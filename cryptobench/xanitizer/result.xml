<?xml version="1.0" encoding="UTF-8"?>
<XanitizerFindingsList xanitizerVersion="version 5.1.3, build no. 145 of 9/3/20" xanitizerVersionShort="5.1.3" timeStamp="2021-03-04 01:01:11" timeStampLong="1614837671009" allFindings="662" findingsNotRemovedByFilter="662" problemFindingsNotRemovedByFilter="458">

  <problemType problemTypeId="CIPHER_INTEGRITY" problemTypeName="FindSecBugs: Cipher with no integrity">
    <description> The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.  
 The solution is to use a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the existing cipher is prone to error [1]. Specifically, it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic functions on the data.  
The following modes are vulnerable because they don't provide a HMAC:
 - CBC
 - OFB
 - CTR
 - ECB

 The following snippets code are some examples of vulnerable code.

 Code at risk:
 AES in CBC mode
 
Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText); 
 Triple DES with ECB mode
 
Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);  
 Solution: 
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);  
 In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.  
 
 References
 Wikipedia: Authenticated encryption
 NIST: Authenticated Encryption Modes
 Moxie Marlinspike's blog: The Cryptographic Doom Principle
 CWE-353: Missing Support for Integrity Check 

See CWE number 353 for details.</description>
  </problemType>

  <problemType problemTypeId="DES_USAGE" problemTypeName="FindSecBugs: DES is insecure">
    <description> DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage of AES block ciphers instead of DES.  
 Example weak code: 
Cipher c = Cipher.getInstance("DES/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);  
 Example solution: 
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);  
 
 References
 NIST Withdraws Outdated Data Encryption Standard
 CWE-326: Inadequate Encryption Strength 

See CWE number 327 for details.</description>
  </problemType>

  <problemType problemTypeId="ECB_MODE" problemTypeName="FindSecBugs: ECB mode is insecure">
    <description>An authentication cipher mode which provides better confidentiality of the encrypted data should be used instead of Electronic Code Book (ECB) mode, which does not provide good confidentiality. Specifically, ECB mode produces the same output for the same input each time. So, for example, if a user is sending a password, the encrypted value is the same each time. This allows an attacker to intercept and replay the data. 
 To fix this, something like Galois/Counter Mode (GCM) should be used instead.  
 Code at risk: 
Cipher c = Cipher.getInstance("AES/ECB/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);  
 Solution: 
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);  
 
 References
 Wikipedia: Authenticated encryption
 NIST: Authenticated Encryption Modes
 Wikipedia: Block cipher modes of operation
 NIST: Recommendation for Block Cipher Modes of Operation 

See CWE number 327 for details.</description>
  </problemType>

  <problemType problemTypeId="HARD_CODE_PASSWORD" problemTypeName="FindSecBugs: Hard coded password">
    <description> Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores. (Hard coded keys are reported separately by Hard Coded Key pattern)  
 
Vulnerable Code:
 
private String SECRET_PASSWORD = "letMeIn!";

Properties props = new Properties();
props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");  
 
 References
 CWE-259: Use of Hard-coded Password 

See CWE number 259 for details.</description>
  </problemType>

  <problemType problemTypeId="LiteralStringsInVariablesSearch:password" problemTypeName="Hard-Coded Credentials: Password in Java Variables">
    <description>Checks for password variables to which constant strings are assigned.

See CWE number 259 for details.</description>
    <howToFix>Remove credentials from the code.</howToFix>
  </problemType>

  <problemType problemTypeId="MS_FINAL_PKGPROTECT" problemTypeName="SpotBugs: Field should be both final and package protected">
    <description> A mutable static field could be changed by malicious code or by accident from another package. The field could be made package protected and/or made final to avoid this vulnerability.</description>
  </problemType>

  <problemType problemTypeId="MS_PKGPROTECT" problemTypeName="SpotBugs: Field should be package protected">
    <description> A mutable static field could be changed by malicious code or by accident. The field could be made package protected to avoid this vulnerability.</description>
  </problemType>

  <problemType problemTypeId="MS_SHOULD_BE_FINAL" problemTypeName="SpotBugs: Field isn't final but should be">
    <description> This static field public but not final, and could be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability.</description>
  </problemType>

  <problemType problemTypeId="NP_UNWRITTEN_FIELD" problemTypeName="SpotBugs: Read of unwritten field">
    <description> The program is dereferencing a field that does not seem to ever have a non-null value written to it. Unless the field is initialized via some mechanism not seen by the analysis, dereferencing this value will generate a null pointer exception. </description>
  </problemType>

  <problemType problemTypeId="PADDING_ORACLE" problemTypeName="FindSecBugs: Cipher is susceptible to Padding Oracle">
    <description> This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the message if the system exposed the difference between plaintext with invalid padding or valid padding. The distinction between valid and invalid padding is usually revealed through distinct error messages being returned for each condition.  
 Code at risk: 
Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);  
 Solution: 
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);  
 
 References
 Padding Oracles for the masses (by Matias Soler)
 Wikipedia: Authenticated encryption
 NIST: Authenticated Encryption Modes
 CAPEC: Padding Oracle Crypto Attack
 CWE-696: Incorrect Behavior Order 

See CWE number 326 for details.</description>
  </problemType>

  <problemType problemTypeId="PREDICTABLE_RANDOM" problemTypeName="FindSecBugs: Predictable pseudorandom number generator">
    <description>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:  
a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token 
a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form 
any other secret value  
 A quick fix could be to replace the use of java.util.Random with something stronger, such as java.security.SecureRandom.  
 Vulnerable Code:
 
String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}  
 Solution: 
import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}  
 
 References
 Cracking Random Number Generators - Part 1 (https://jazzy.id.au)
 CERT: MSC02-J. Generate strong random numbers
 CWE-330: Use of Insufficiently Random Values
 Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation) 

See CWE number 330 for details.</description>
  </problemType>

  <problemType problemTypeId="STATIC_IV" problemTypeName="FindSecBugs: Static IV">
    <description> Initialization vector must be regenerated for each message to be encrypted.  
Vulnerable Code: 
 

private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};

public void encrypt(String message) throws Exception {

    IvParameterSpec ivSpec = new IvParameterSpec(IV);
[...]
 
Solution: 
 

public void encrypt(String message) throws Exception {

    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);

    IvParameterSpec ivSpec = new IvParameterSpec(iv);
[...]
  
 
 References
 Wikipedia: Initialization vector
 CWE-329: Not Using a Random IV with CBC Mode
 Encryption - CBC Mode IV: Secret or Not? 

See CWE number 329 for details.</description>
  </problemType>

  <problemType problemTypeId="SpecialMethodCall:EncryptionUsedInProject" problemTypeName="Cryptography: Cryptographic Algorithms Used in Project">
    <description>Searches in project code for all methods which set, select or determine a cryptographic algorithm. The goal is to find out which cryptographic algorithms are applied in the code.

See CWE number 327 for details.</description>
    <howToFix>n/a</howToFix>
  </problemType>

  <problemType problemTypeId="SpecialMethodCall:EncryptionUsedInProjectWOProvider" problemTypeName="Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider">
    <description>Searches in project code for all methods which set, select or determine a cryptographic algorithm and do not specify a crypto-provider for it, although an alternative method with a parameter for the provider is available. Not specifx the crypto-provider makes it uncertain which crypto-provider the server will use - it might be an unsafe one.

See CWE number 325 for details.</description>
    <howToFix>Specify crypto-provider.</howToFix>
  </problemType>

  <problemType problemTypeId="SpecialMethodCall:PrintStackTrace" problemTypeName="Usage: PrintStackTrace">
    <description>Depending on the system configuration, using java.lang.Throwable.printStackTrace can expose an exception to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system will be vulnerable to.

See CWE number 497 for details.</description>
    <howToFix>Use an appropriately configured logging mechanism and log the exception directly into a log file that is not viewable by an end user.</howToFix>
  </problemType>

  <problemType problemTypeId="SpecialMethodCall:java.util.Random" problemTypeName="Usage: java.util.Random">
    <description>Instances of class 'java.util.Random' are not cryptographically secure. Consider instead using class 'java.security.SecureRandom' to get a cryptographically secure pseudo-random number generator for security-sensitive applications.

See CWE number 330 for details.
Additional CWEs are: 332, 338.</description>
    <howToFix>Use java.security.SecureRandom instead of java.util.Random.</howToFix>
  </problemType>

  <problemType problemTypeId="WEAK_HOSTNAME_VERIFIER" problemTypeName="FindSecBugs: HostnameVerifier that accept any signed certificates">
    <description>A HostnameVerifier that accept any host are often use because of certificate reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middle attacks since the client will trust any certificate.  
 A TrustManager allowing specific certificates (based on a truststore for example) should be built. Wildcard certificates should be created for reused on multiples subdomains. Detailed information for a proper implementation is available at: [1] [2]  
 
 Vulnerable Code:
 
public class AllHosts implements HostnameVerifier {
    public boolean verify(final String hostname, final SSLSession session) {
        return true;
    }
}  
 
 Solution (TrustMangager based on a keystore):
 
KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
  
 
 References
 WASC-04: Insufficient Transport Layer Protection
 CWE-295: Improper Certificate Validation 

See CWE number 295 for details.</description>
  </problemType>

  <problemType problemTypeId="WEAK_MESSAGE_DIGEST_MD5" problemTypeName="FindSecBugs: MD2, MD4 and MD5 are weak hash functions">
    <description>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. PBKDF2 should be used to hash password for example.  "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 224.1).[1] Further, there is also a chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using off-the-shelf computing hardware (complexity 239).[2]"
 - Wikipedia: MD5 - Security   "SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256:
 The use of these hash functions is acceptable for all hash function applications."
 - NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15   "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try, it becomes harder to apply the dictionary or brute force attacks."
 - NIST: Recommendation for Password-Based Key Derivation p.12  
 
 Vulnerable Code:
 
MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest(); 
 
byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());  
 
 Solution (Using bouncy castle):
 
public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
} 
 Solution (Java 8 and later):
 
public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}  
 
 References
 [1] On Collisions for MD5: Master Thesis by M.M.J. Stevens
 [2] Chosen-prefix collisions for MD5 and applications: Paper written by Marc Stevens
 Wikipedia: MD5
 NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths
 NIST: Recommendation for Password-Based Key Derivation
 Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java
 CWE-327: Use of a Broken or Risky Cryptographic Algorithm 

See CWE number 328 for details.</description>
  </problemType>

  <problemType problemTypeId="WEAK_MESSAGE_DIGEST_SHA1" problemTypeName="FindSecBugs: SHA-1 is a weak hash function">
    <description>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other uses. PBKDF2 should be used to hash password for example.  "SHA-1 for digital signature generation:
 SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance. For all other applications, SHA-1 shall not be used for digital signature generation.
 SHA-1 for digital signature verification:
 For digital signature verification, SHA-1 is allowed for legacy-use.
 [...]
 SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256:
 The use of these hash functions is acceptable for all hash function applications."
 - NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15   "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try, it becomes harder to apply the dictionary or brute force attacks."
 - NIST: Recommendation for Password-Based Key Derivation p.12  
 
 Vulnerable Code:
 
MessageDigest sha1Digest = MessageDigest.getInstance("SHA1");
    sha1Digest.update(password.getBytes());
    byte[] hashValue = sha1Digest.digest(); 
 
byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());  
 
 Solution (Using bouncy castle):
 
public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
} 
 Solution (Java 8 and later):
 
public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}  
 
 References
 Qualys blog: SHA1 Deprecation: What You Need to Know
 Google Online Security Blog: Gradually sunsetting SHA-1
 NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths
 NIST: Recommendation for Password-Based Key Derivation
 Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java
 CWE-327: Use of a Broken or Risky Cryptographic Algorithm 

See CWE number 328 for details.</description>
  </problemType>

  <problemType problemTypeId="WEAK_TRUST_MANAGER" problemTypeName="FindSecBugs: TrustManager that accept any certificates">
    <description>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root certificate authority. As a consequence, this is vulnerable to Man-in-the-middle attacks since the client will trust any certificate.  
 A TrustManager allowing specific certificates (based on a TrustStore for example) should be built. Detailed information for a proper implementation is available at: [1] [2]  
 
 Vulnerable Code:
 
class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}  
 
 Solution (TrustMangager based on a keystore):
 
KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
  
 
 References
 WASC-04: Insufficient Transport Layer Protection
 CWE-295: Improper Certificate Validation 

See CWE number 295 for details.</description>
  </problemType>

  <problemType problemTypeId="hcc:Hard-CodedCredentials:CryptographicKeyAsMethodParameter" problemTypeName="Hard-Coded Credentials: Cryptographic Key as Method Parameter">
    <description>This security problem represents an access to some protected system component using hard-coded cryptographic keys.

Do not additionally assign a taint source kind to this problem type. It would be superfluous in this scenario and has no effect.

See CWE number 321 for details.</description>
    <howToFix>Remove cryptographic key from the code.</howToFix>
  </problemType>

  <problemType problemTypeId="protocolCheckProblemType:AES_Encryption" problemTypeName="Cryptography: AES Encryption">
    <description>AES problems concerning encryption.

AES is a recommended algorithm for symmetric encryption and decryption. Problems in AES encryption include wrong construction of a new encryption key object, wrong construction of an encryption cipher object, and wrong use of an encryption cipher in a cipher output stream.

See CWE number 310 for details.
Additional CWEs are: 329.</description>
    <howToFix>Correct the sequence of method invocations so that they match the AES encryption protocols.</howToFix>
  </problemType>

  <problemType problemTypeId="protocolCheckProblemType:CryptographicHashing" problemTypeName="Cryptography: Cryptographic Hashing">
    <description>Problems concerning wrong use of cryptographic hashing.

Cryptographic hashes (aka message digests) are hashes that fulfill some special criteria. This problem type checks the proper use of the message digest API when initializing and using a digest object.

See CWE number 328 for details.</description>
    <howToFix>Correct the sequence of method invocations so that they match the cryptographic hashing protocols.</howToFix>
  </problemType>

  <problemType problemTypeId="protocolCheckProblemType:OnlyAllowedCryptoAlgorithms" problemTypeName="Cryptography: Check that only allowed crypto algorithms are used">
    <description>Uses of non-allowed crypto algorithms.

See CWE number 327 for details.
Additional CWEs are: 780.</description>
    <howToFix>Use one of the allowed crypto algorithms instead.</howToFix>
  </problemType>

  <problemType problemTypeId="protocolCheckProblemType:OnlyAllowedHashAlgorithms" problemTypeName="Cryptography: Check that only allowed hash algorithms are used">
    <description>Uses of non-allowed hash algorithms.

See CWE number 328 for details.</description>
    <howToFix>Use one of the allowed hash algorithms instead.</howToFix>
  </problemType>

  <problemType problemTypeId="protocolCheckProblemType:PBE" problemTypeName="Cryptography: Password-Based Encryption">
    <description>Problems concerning wrong use of password-based encryption.

Password-based encryption constructs cryptographic keys from passwords. A hash function, an iteration count and a salt are needed here. This problem type checks for correct generation of key specs and keys, algorithm parameter specs and algorithm parameters, and ciphers.

See CWE number 310 for details.
Additional CWEs are: 759, 760, 916.</description>
    <howToFix>Correct the sequence of method invocations so that they match the password-based encryption protocols.</howToFix>
  </problemType>

  <problemType problemTypeId="protocolCheckProblemType:RSA_BothEncryptionAndDecryption" problemTypeName="Cryptography: Basic Protocol Violations for RSA Encryption and Decryption">
    <description>RSA problems concerning both encryption and decryption.

RSA is a recommended algorithm for asymmetric encryption and decryption. Problems in RSA encryption and decryption include wrong construction and use of a an RSA key generation parameter spec of wrong key pair generation.

See CWE number 310 for details.</description>
    <howToFix>Correct the sequence of method invocations so that they match the RSA protocols that are used both in encryption and decryption.</howToFix>
  </problemType>

  <problemType problemTypeId="protocolCheckProblemType:SecureRandomNumberGeneratorConstruction" problemTypeName="Cryptography: Construction of Secure Random Number Generator">
    <description>Problems concerning secure random number generator construction.

Secure random number generator construction might be compromised, e.g., by using a non-securely constructed seed.

See CWE number 310 for details.
Additional CWEs are: 335, 337, 338.</description>
    <howToFix>Correct the sequence of method invocations so that they match the secure random number construction protocols.</howToFix>
  </problemType>

  <problemType problemTypeId="rl:IOStreamResourceLeak" problemTypeName="Resource Leak: IO Stream Resource Leak">
    <description>This problem type searches for IO streams in the code that are opened but never closed. This has a negative impact on performance and availability. Such unreleased resources can be classified as a security risk because they enable a denial-of-service attack.

In this analysis certain resources as e.g. HttpServletResponse.getOutputStream() are not supposed to be closed by the servlet. Instead the servlet container must do that in this example.

Xanitizer reports all code paths where the dataflow starts from a created resource instance and is leaving the validity scope of that resource without having it closed. This is the case when the dataflow reaches a point (marked as a taint sink) in the code after that no further access to the resource instance occurs.

This resource leak search does not work if the resource object is stored in non-local variables.

See CWE number 404 for details.
Additional CWEs are: 772.</description>
    <howToFix>Close the stream (preferably in a finally block).</howToFix>
  </problemType>

  <problemType problemTypeId="rl:SocketResourceLeak" problemTypeName="Resource Leak: Socket Resource Leak">
    <description>This problem type reports paths where a socket is opened but never closed. Such unreleased resources can be classified as a security risk because they enable a denial-of-service attack.

Xanitizer reports all code paths where the dataflow starts from a created resource instance and is leaving the validity scope of that resource without having it closed. This is the case when the dataflow reaches a point (marked as a taint sink) in the code after that no further access to the resource instance occurs.

This resource leak search does not work if the resource object is stored in non-local variables.

See CWE number 404 for details.
Additional CWEs are: 772.</description>
    <howToFix>Close the socket (preferably in a finally block).</howToFix>
  </problemType>

  <problemType problemTypeId="ssl:SpecialMethodOverwriting:SSL/TLSValidation" problemTypeName="SSL/TLS Validation: Suspicious Implementation">
    <description>Searches for project-specific implementations for SSL/TLS validation. Quite often such home-grown implementations are imperfect. Verify whether project-specific implementations perform all necessary validation steps:

* Is the certificate signed by a "trusted" CA (see CWE-296)?

* Is the host name matching the certificate‘s CN (see CWE-297)?

* Is the certificate expired (see CWE-298)?

* Has the certificate been revoked (see CWE-299, CWE-370)?

If not, check where these project-specific implementations are used ? Just in test code or also in production code ?

See CWE number 295 for details.</description>
    <howToFix>Review project-specific validation method.</howToFix>
  </problemType>


  <finding id="57bt0y25wn5dgxy6unf3k4i1s" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase10</class>
    <file>BrokenCryptoABICase10.java</file>
    <line>10</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10.crypto[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10.CRYPTO[C with suspicious name

]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase10.java">
      <code lineNo="5" finding="false">import javax.crypto.NoSuchPaddingException;</code>
      <code lineNo="6" finding="false">import javax.crypto.SecretKey;</code>
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="true">public class BrokenCryptoABICase10 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "IDEA";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
    </node>
  </finding>


  <finding id="353b9sdeaaypqcrawgpxl7p7k" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase5</class>
    <file>BrokenCryptoABICase5.java</file>
    <line>10</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5.CRYPTO_ALGO[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5.CRYPTO[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5.crypto_algo[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5.crypto[C with suspicious name

]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase5.java">
      <code lineNo="5" finding="false">import javax.crypto.NoSuchPaddingException;</code>
      <code lineNo="6" finding="false">import javax.crypto.SecretKey;</code>
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="true">public class BrokenCryptoABICase5 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "DES/ECB/PKCS5Padding";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    public static final String DEFAULT_CRYPTO_ALGO = "DES";</code>
    </node>
  </finding>


  <finding id="5jf2q15aevxswlz5xq1lmzvj4" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase6</class>
    <file>BrokenCryptoABICase6.java</file>
    <line>10</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6.crypto[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6.CRYPTO[C with suspicious name

]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase6.java">
      <code lineNo="5" finding="false">import javax.crypto.NoSuchPaddingException;</code>
      <code lineNo="6" finding="false">import javax.crypto.SecretKey;</code>
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="true">public class BrokenCryptoABICase6 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "Blowfish";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
    </node>
  </finding>


  <finding id="3ac8lz5fqxd553rwse26p1ops" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase7</class>
    <file>BrokenCryptoABICase7.java</file>
    <line>10</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7.CRYPTO[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7.crypto[C with suspicious name

]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase7.java">
      <code lineNo="5" finding="false">import javax.crypto.NoSuchPaddingException;</code>
      <code lineNo="6" finding="false">import javax.crypto.SecretKey;</code>
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="true">public class BrokenCryptoABICase7 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "RC4";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
    </node>
  </finding>


  <finding id="2nsojfrw30ncigs24tyalu2cg" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase8</class>
    <file>BrokenCryptoABICase8.java</file>
    <line>10</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8.crypto[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8.CRYPTO[C with suspicious name

]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase8.java">
      <code lineNo="5" finding="false">import javax.crypto.NoSuchPaddingException;</code>
      <code lineNo="6" finding="false">import javax.crypto.SecretKey;</code>
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="true">public class BrokenCryptoABICase8 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "RC2";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
    </node>
  </finding>


  <finding id="5hjlt8ft4rqlebmel67fj19b4" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase5</class>
    <file>BrokenHashABICase5.java</file>
    <line>6</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokenhash.BrokenHashABICase5.crypto[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokenhash.BrokenHashABICase5.CRYPTO[C with suspicious name

]]></description>
    <node lineNo="6" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase5.java">
      <code lineNo="1" finding="false">package org.cryptoapi.bench.brokenhash;</code>
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="true">public class BrokenHashABICase5 {</code>
      <code lineNo="7" finding="false">    public static final String DEFAULT_CRYPTO = "SHA1";</code>
      <code lineNo="8" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="9" finding="false">    private static char[] crypto;</code>
      <code lineNo="10" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="11" finding="false">        String str = "abcdef";</code>
    </node>
  </finding>


  <finding id="6yf5e67oul8xn0sf7jtnvj3og" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase6</class>
    <file>BrokenHashABICase6.java</file>
    <line>6</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokenhash.BrokenHashABICase6.CRYPTO[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokenhash.BrokenHashABICase6.crypto[C with suspicious name

]]></description>
    <node lineNo="6" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase6.java">
      <code lineNo="1" finding="false">package org.cryptoapi.bench.brokenhash;</code>
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="true">public class BrokenHashABICase6 {</code>
      <code lineNo="7" finding="false">    public static final String DEFAULT_CRYPTO = "MD5";</code>
      <code lineNo="8" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="9" finding="false">    private static char[] crypto;</code>
      <code lineNo="10" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="11" finding="false">        String str = "abcdef";</code>
    </node>
  </finding>


  <finding id="42opib80u3e9sazswvcjh9vfk" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase7</class>
    <file>BrokenHashABICase7.java</file>
    <line>6</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokenhash.BrokenHashABICase7.CRYPTO[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokenhash.BrokenHashABICase7.crypto[C with suspicious name

]]></description>
    <node lineNo="6" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase7.java">
      <code lineNo="1" finding="false">package org.cryptoapi.bench.brokenhash;</code>
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="true">public class BrokenHashABICase7 {</code>
      <code lineNo="7" finding="false">    public static final String DEFAULT_CRYPTO = "MD4";</code>
      <code lineNo="8" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="9" finding="false">    private static char[] crypto;</code>
      <code lineNo="10" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="11" finding="false">        String str = "abcdef";</code>
    </node>
  </finding>


  <finding id="54e9jl5gmt8hfzv02j12vrtcw" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase8</class>
    <file>BrokenHashABICase8.java</file>
    <line>6</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.brokenhash.BrokenHashABICase8.CRYPTO[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.brokenhash.BrokenHashABICase8.crypto[C with suspicious name

]]></description>
    <node lineNo="6" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase8.java">
      <code lineNo="1" finding="false">package org.cryptoapi.bench.brokenhash;</code>
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="true">public class BrokenHashABICase8 {</code>
      <code lineNo="7" finding="false">    public static final String DEFAULT_CRYPTO = "MD2";</code>
      <code lineNo="8" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="9" finding="false">    private static char[] crypto;</code>
      <code lineNo="10" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="11" finding="false">        String str = "abcdef";</code>
    </node>
  </finding>


  <finding id="8zh684ezf64gdzgbjqe9vg4h" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase2</class>
    <file>EcbInSymmCryptoABICase2.java</file>
    <line>10</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2.CRYPTO[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2.crypto[C with suspicious name

]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase2.java">
      <code lineNo="5" finding="false">import javax.crypto.NoSuchPaddingException;</code>
      <code lineNo="6" finding="false">import javax.crypto.SecretKey;</code>
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="true">public class EcbInSymmCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "AES/ECB/PKCS5Padding";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
    </node>
  </finding>


  <finding id="ccizyz9noc5r3wfsjldic6zl" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>PredictableCryptographicKeyABICase2</class>
    <file>PredictableCryptographicKeyABICase2.java</file>
    <line>7</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2.encryptKey[C with suspicious name
- Value is hard coded in field org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2.ENCRYPT_KEY[C with suspicious name

]]></description>
    <node lineNo="7" classFQN="org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyABICase2.java">
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">import javax.crypto.spec.SecretKeySpec;</code>
      <code lineNo="4" finding="false">import java.security.SecureRandom;</code>
      <code lineNo="5" finding="false">import java.util.Arrays;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="true">public class PredictableCryptographicKeyABICase2 {</code>
      <code lineNo="8" finding="false">    public static final String DEFAULT_ENCRYPT_KEY = "defaultkey";</code>
      <code lineNo="9" finding="false">    private static char[] ENCRYPT_KEY;</code>
      <code lineNo="10" finding="false">    private static char[] encryptKey;</code>
      <code lineNo="11" finding="false">    public static void main(String [] args){</code>
      <code lineNo="12" finding="false">        go2();</code>
    </node>
  </finding>


  <finding id="5d7dmjmi0zj8m7650kz5ewl0h" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase2</class>
    <file>PredictableKeyStorePasswordABICase2.java</file>
    <line>10</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- Value is hard coded in field org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2.ENCRYPT_KEY[C with suspicious name

]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java">
      <code lineNo="5" finding="false">import java.security.KeyStore;</code>
      <code lineNo="6" finding="false">import java.security.KeyStoreException;</code>
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false">import java.security.cert.CertificateException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="true">public class PredictableKeyStorePasswordABICase2 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_ENCRYPT_KEY = "changeit";</code>
      <code lineNo="12" finding="false">    private static char[] ENCRYPT_KEY;</code>
      <code lineNo="13" finding="false">    private static char[] encryptKey;</code>
      <code lineNo="14" finding="false">    URL cacerts;</code>
      <code lineNo="15" finding="false">    public static void main(String [] args) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException {</code>
    </node>
  </finding>


  <finding id="5vushrj1ebr1jh21e1044pdgh" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase2</class>
    <file>PredictableKeyStorePasswordABICase2.java</file>
    <line>33</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- In method org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2.go()
- Called method java.security.KeyStore.load(InputStream, char[])
- Hard coded parameter number (in reverse order) is 1
- Value loaded from field org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2.encryptKey

]]></description>
    <node lineNo="33" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java">
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    private void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="30" finding="false">        String type = "JKS";</code>
      <code lineNo="31" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="32" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="33" finding="true">        ks.load(cacerts.openStream(), encryptKey);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false">}</code>
    </node>
  </finding>


  <finding id="566rhp7ft0ry913kl9zsnx2zl" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordBBCase1</class>
    <file>PredictableKeyStorePasswordBBCase1.java</file>
    <line>23</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- In method org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1.go()
- Called method java.security.KeyStore.load(InputStream, char[])
- Hard coded parameter number (in reverse order) is 1
- Return value of String.toCharArray() of type char[]

]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java">
      <code lineNo="18" finding="false">    public void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="23" finding="true">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">}</code>
    </node>
  </finding>


  <finding id="6fgkyeu0ml0b2nqo5c7rsibtt" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordBBCase1</class>
    <file>PredictablePBEPasswordBBCase1.java</file>
    <line>22</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- In method org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1.key()
- Called method new javax.crypto.spec.PBEKeySpec(char[], byte[], int, int)
- Hard coded parameter number (in reverse order) is 4
- Return value of String.toCharArray() of type char[]

]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false"></code>
      <code lineNo="25" finding="false">}</code>
    </node>
  </finding>


  <finding id="77ulquzgpj36li2k21qp51wm9" kind="GENERIC">
    <problemType>FindSecBugs: Hard coded password</problemType>
    <problemTypeId>HARD_CODE_PASSWORD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordBBCase2</class>
    <file>PredictablePBEPasswordBBCase2.java</file>
    <line>22</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Hard coded password found

- In method org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2.key()
- Called method new javax.crypto.spec.PBEKeySpec(char[], byte[], int, int)
- Hard coded parameter number (in reverse order) is 4
- Value 1

]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase2.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey,salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </node>
  </finding>


  <finding id="4o6iy298f99se6r5ewq7jmxy9" kind="SPECIAL">
    <problemType>Hard-Coded Credentials: Password in Java Variables</problemType>
    <problemTypeId>LiteralStringsInVariablesSearch:password</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABICase1</class>
    <file>PredictablePBEPasswordABICase1.java</file>
    <line>14</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Hard-Coded Credentials: Password in Java Variables'.
Literal credential in field 'password'


]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABICase1.java">
      <code lineNo="9" finding="false">    private PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public static void main(String [] args){</code>
      <code lineNo="12" finding="false">        PredictablePBEPasswordABICase1 ckp = new PredictablePBEPasswordABICase1();</code>
      <code lineNo="13" finding="false">        String password = "sagar";</code>
      <code lineNo="14" finding="true">        ckp.go(password);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false">    public void go(String password) {</code>
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
    </node>
  </finding>


  <finding id="5tpoyr95ae2p19nk6kebnfgip" kind="SPECIAL">
    <problemType>Hard-Coded Credentials: Password in Java Variables</problemType>
    <problemTypeId>LiteralStringsInVariablesSearch:password</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABICase3</class>
    <file>PredictablePBEPasswordABICase3.java</file>
    <line>14</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Hard-Coded Credentials: Password in Java Variables'.
Literal credential in field 'password'


]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABICase3.java">
      <code lineNo="9" finding="false">    private PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public static void main(String [] args){</code>
      <code lineNo="12" finding="false">        PredictablePBEPasswordABICase3 pppac = new PredictablePBEPasswordABICase3();</code>
      <code lineNo="13" finding="false">        String password = "sagar";</code>
      <code lineNo="14" finding="true">        pppac.method1(password);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">    public void method1(String k){</code>
      <code lineNo="18" finding="false">        String key2 = k;</code>
      <code lineNo="19" finding="false">        method2(key2);</code>
    </node>
  </finding>


  <finding id="494b5750knzmh399puuszgy8x" kind="SPECIAL">
    <problemType>Hard-Coded Credentials: Password in Java Variables</problemType>
    <problemTypeId>LiteralStringsInVariablesSearch:password</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABMCCase1</class>
    <file>PredictablePBEPasswordABMCCase1.java</file>
    <line>7</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Hard-Coded Credentials: Password in Java Variables'.
Literal credential in field 'password'


]]></description>
    <node lineNo="7" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMCCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABMCCase1.java">
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">public class PredictablePBEPasswordABMCCase1 {</code>
      <code lineNo="4" finding="false">    public static void main(String [] args){</code>
      <code lineNo="5" finding="false">        PredictablePBEPasswordABMC1 ckp = new PredictablePBEPasswordABMC1();</code>
      <code lineNo="6" finding="false">        String password = "sagar";</code>
      <code lineNo="7" finding="true">        ckp.key(password);</code>
      <code lineNo="8" finding="false">    }</code>
      <code lineNo="9" finding="false">}</code>
    </node>
  </finding>


  <finding id="5phdganhccfld7udwsjreh00x" kind="SPECIAL">
    <problemType>Hard-Coded Credentials: Password in Java Variables</problemType>
    <problemTypeId>LiteralStringsInVariablesSearch:password</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABSCase1</class>
    <file>PredictablePBEPasswordABSCase1.java</file>
    <line>11</line>
    <cweNumber>CWE-259</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Hard-Coded Credentials: Password in Java Variables'.
Literal credential in field 'password'


]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABSCase1.java">
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class PredictablePBEPasswordABSCase1 {</code>
      <code lineNo="8" finding="false">    CryptoPredictablePBE crypto;</code>
      <code lineNo="9" finding="false">    public PredictablePBEPasswordABSCase1(){</code>
      <code lineNo="10" finding="false">        String password = "sagar";</code>
      <code lineNo="11" finding="true">        crypto = new CryptoPredictablePBE(password);</code>
      <code lineNo="12" finding="false">        crypto.method1("");</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">}</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
    </node>
  </finding>


  <finding id="xdstv46jxubfe0nfy843s0gw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>18</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
The protocol check detected something wrong when encountering symbol 'CipherInitializationForEncryption_IVMissing': initialization vector is missing: 
An initialization vector should be used when encrypting.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.

Matching pattern in protocol check kind 'CipherInitializationForEncryption_IVMissing':
void javax.crypto.Cipher.init(int, java.security.Key)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="22" finding="false">        BrokenCryptoABPSCase1 bc = new BrokenCryptoABPSCase1();</code>
      <code lineNo="23" finding="false">        int choice=2;</code>
    </node>
  </finding>


  <finding id="7iojy5cahy63oheunltiiwz8g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>17</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
The protocol check detected something wrong when encountering symbol 'CipherInitializationForEncryption_IVMissing': initialization vector is missing: 
An initialization vector should be used when encrypting.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.

Matching pattern in protocol check kind 'CipherInitializationForEncryption_IVMissing':
void javax.crypto.Cipher.init(int, java.security.Key)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="21" finding="false">        BrokenCryptoABPSCase2 bc = new BrokenCryptoABPSCase2();</code>
      <code lineNo="22" finding="false">        int choice=2;</code>
    </node>
  </finding>


  <finding id="1an4gl9vc2nl1cytetruq5gf4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>18</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
The protocol check detected something wrong when encountering symbol 'CipherInitializationForEncryption_IVMissing': initialization vector is missing: 
An initialization vector should be used when encrypting.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.

Matching pattern in protocol check kind 'CipherInitializationForEncryption_IVMissing':
void javax.crypto.Cipher.init(int, java.security.Key)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="22" finding="false">        BrokenCryptoABPSCase3 bc = new BrokenCryptoABPSCase3();</code>
      <code lineNo="23" finding="false">        int choice=2;</code>
    </node>
  </finding>


  <finding id="6o1sv72415526cf6f1ad0iixs" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>18</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
The protocol check detected something wrong when encountering symbol 'CipherInitializationForEncryption_IVMissing': initialization vector is missing: 
An initialization vector should be used when encrypting.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.

Matching pattern in protocol check kind 'CipherInitializationForEncryption_IVMissing':
void javax.crypto.Cipher.init(int, java.security.Key)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="22" finding="false">        BrokenCryptoABPSCase4 bc = new BrokenCryptoABPSCase4();</code>
      <code lineNo="23" finding="false">        int choice=2;</code>
    </node>
  </finding>


  <finding id="2aovoglzw2hx5yhnrns0x1lk0" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>17</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
The protocol check detected something wrong when encountering symbol 'CipherInitializationForEncryption_IVMissing': initialization vector is missing: 
An initialization vector should be used when encrypting.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.

Matching pattern in protocol check kind 'CipherInitializationForEncryption_IVMissing':
void javax.crypto.Cipher.init(int, java.security.Key)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="21" finding="false">        BrokenCryptoABPSCase5 bc = new BrokenCryptoABPSCase5();</code>
      <code lineNo="22" finding="false">        int choice=2;</code>
    </node>
  </finding>


  <finding id="4kxzwwav59impm87gv0itw4m8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>16</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
The protocol check detected something wrong when encountering symbol 'CipherInitializationForEncryption_IVMissing': initialization vector is missing: 
An initialization vector should be used when encrypting.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.

Matching pattern in protocol check kind 'CipherInitializationForEncryption_IVMissing':
void javax.crypto.Cipher.init(int, java.security.Key)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        EcbInSymmCryptoABPSCase1 bc = new EcbInSymmCryptoABPSCase1();</code>
      <code lineNo="21" finding="false">        int choice = 2;</code>
    </node>
  </finding>


  <finding id="7d0sx61ut0kn23bewq48917c0" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>16</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
Dataflow ended in a state that was not GOOD.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.


]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        EcbInSymmCryptoABPSCase1 bc = new EcbInSymmCryptoABPSCase1();</code>
      <code lineNo="21" finding="false">        int choice = 2;</code>
    </node>
  </finding>


  <finding id="6tzxk3vdqkrzizkgpe1w9ynhc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoBBCase1</class>
    <file>EcbInSymmCryptoBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
The protocol check detected something wrong when encountering symbol 'CipherInitializationForEncryption_IVMissing': initialization vector is missing: 
An initialization vector should be used when encrypting.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.

Matching pattern in protocol check kind 'CipherInitializationForEncryption_IVMissing':
void javax.crypto.Cipher.init(int, java.security.Key)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoBBCase1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
      <code lineNo="20" finding="false">        bc.go();</code>
    </node>
  </finding>


  <finding id="5y1czzs0fcnjm8g37626mz8m8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: AES Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:AES_Encryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>PredictableCryptographicKeyCorrected</class>
    <file>PredictableCryptographicKeyCorrected.java</file>
    <line>23</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: AES Encryption'.
The protocol check detected something wrong when encountering symbol 'CipherInitializationForEncryption_IVMissing': initialization vector is missing: 
An initialization vector should be used when encrypting.

Violated protocol: Creation of an AES Cipher for Encryption
Protocol description: 
Creation of a cipher for AES consists of creating an uninitialized cipher, and then initializing it properly.

Matching pattern in protocol check kind 'CipherInitializationForEncryption_IVMissing':
void javax.crypto.Cipher.init(int, java.security.Key)
]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyCorrected.java">
      <code lineNo="18" finding="false">        byte[] keyBytes = defaultKey.getBytes();</code>
      <code lineNo="19" finding="false">        keyBytes = Arrays.copyOf(keyBytes,16);</code>
      <code lineNo="20" finding="false">        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");</code>
      <code lineNo="23" finding="true">        cipher.init(Cipher.ENCRYPT_MODE, keySpec);</code>
      <code lineNo="24" finding="false">        String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")));</code>
      <code lineNo="25" finding="false">        System.out.println(encrypt);</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false">}</code>
    </node>
  </finding>


  <finding id="162eygk9tlbkqc39keo522pnk" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase1</class>
    <file>BrokenCryptoABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String keyAlgo) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(keyAlgo);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="332ika9zqay04z6m2u77zz23k" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase1</class>
    <file>BrokenCryptoABICase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String keyAlgo) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(keyAlgo);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase1 bc = new BrokenCryptoABICase1();</code>
    </node>
  </finding>


  <finding id="4yrymka2r86skg1ks0zl0cajk" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase10</class>
    <file>BrokenCryptoABICase10.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase10.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase10 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "IDEA";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="2b8s7ds5bs5otq4qe9m91y8gw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase10</class>
    <file>BrokenCryptoABICase10.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase10.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="578febqouw4v9kl7835swftr4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase11</class>
    <file>BrokenCryptoABICase11.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase11.java">
      <code lineNo="11" finding="false">    public static void method2(String c, String key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo,key);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto,String cryptoKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="27zr619jme2w4gl4oic0mpppc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase11</class>
    <file>BrokenCryptoABICase11.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase11.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo,key);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto,String cryptoKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false">        String key = "DES";</code>
    </node>
  </finding>


  <finding id="6q6tvuwandsrl45jn93mgksbk" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase12</class>
    <file>BrokenCryptoABICase12.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase12.java">
      <code lineNo="10" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="12" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="4p4bl0kfa3vuyzz3v6n2a41uo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase12</class>
    <file>BrokenCryptoABICase12.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase12.java">
      <code lineNo="12" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="3yrqzc6rhwds79tvorn42vfxc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase13</class>
    <file>BrokenCryptoABICase13.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase13.java">
      <code lineNo="12" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="14" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="17" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="19" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="20" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="486a1qq844p48c3j9gx0vku3k" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase13</class>
    <file>BrokenCryptoABICase13.java</file>
    <line>19</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase13.java">
      <code lineNo="14" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="17" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="19" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="20" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="24" finding="false">        String crypto = "RC4";</code>
    </node>
  </finding>


  <finding id="1rp5inwtx57vp1oypxfcsi4ps" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase14</class>
    <file>BrokenCryptoABICase14.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase14.java">
      <code lineNo="11" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="g0nn9waq4fztd08y7ak1yiqo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase14</class>
    <file>BrokenCryptoABICase14.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase14.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false"></code>
    </node>
  </finding>


  <finding id="j4m78qdnljl7ayv9qr7q0in4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase15</class>
    <file>BrokenCryptoABICase15.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase15.java">
      <code lineNo="11" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="65zlcch09elcuh3igundra1cw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase15</class>
    <file>BrokenCryptoABICase15.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase15.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false"></code>
    </node>
  </finding>


  <finding id="433cl566e3eh53br4oslvj8f4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase2</class>
    <file>BrokenCryptoABICase2.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="3sqm6eneri39bxdmznoxtnjog" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase2</class>
    <file>BrokenCryptoABICase2.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase2 bc = new BrokenCryptoABICase2();</code>
    </node>
  </finding>


  <finding id="2or4z9qmc068w58t4kcirv334" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase3</class>
    <file>BrokenCryptoABICase3.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="4o27i6nnc3v141ezeaefkazxc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase3</class>
    <file>BrokenCryptoABICase3.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase3 bc = new BrokenCryptoABICase3();</code>
    </node>
  </finding>


  <finding id="6b90wkovyj5coo28sq5yg821s" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase4</class>
    <file>BrokenCryptoABICase4.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="56jb2w9fkl9thvmh64mfsaycg" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase4</class>
    <file>BrokenCryptoABICase4.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase4 bc = new BrokenCryptoABICase4();</code>
    </node>
  </finding>


  <finding id="2c19wnkvla1kf5a387t8jf3vk" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase5</class>
    <file>BrokenCryptoABICase5.java</file>
    <line>20</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase5.java">
      <code lineNo="15" finding="false">    public static final String DEFAULT_CRYPTO_ALGO = "DES";</code>
      <code lineNo="16" finding="false">    private static char[] CRYPTO_ALGO;</code>
      <code lineNo="17" finding="false">    private static char[] crypto_algo;</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto_algo));</code>
      <code lineNo="21" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="22" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="6cn04z6wob99m3rwkm84d7xwg" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase5</class>
    <file>BrokenCryptoABICase5.java</file>
    <line>22</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase5.java">
      <code lineNo="17" finding="false">    private static char[] crypto_algo;</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto_algo));</code>
      <code lineNo="21" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="22" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false">    private static void go2(){</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
    </node>
  </finding>


  <finding id="6hpza3866sa2wfh4zjvt452lc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase6</class>
    <file>BrokenCryptoABICase6.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase6.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase6 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "Blowfish";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="1q30a6dwbg5unbjprcdhb9ie8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase6</class>
    <file>BrokenCryptoABICase6.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase6.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2yjynhzvo56w6cxpayboyspy8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase7</class>
    <file>BrokenCryptoABICase7.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase7.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase7 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "RC4";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="1u3n1xh1j2a6l4mt9el5cdt28" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase7</class>
    <file>BrokenCryptoABICase7.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase7.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6bxgqw03iqjtg83ko10wzapuo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase8</class>
    <file>BrokenCryptoABICase8.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase8.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase8 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "RC2";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="6s9ood5379a6fwi6lzqgunqlc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase8</class>
    <file>BrokenCryptoABICase8.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase8.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6aljgb5vuwi9hvxmzcq33z23k" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase9</class>
    <file>BrokenCryptoABICase9.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase9.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase9 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="33emv0j63sx31gvk8fav8bexs" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase9</class>
    <file>BrokenCryptoABICase9.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase9.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase9 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase9 bc = new BrokenCryptoABICase9();</code>
    </node>
  </finding>


  <finding id="fgzk0lq7ic5ism59dlq7ysm8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC1</class>
    <file>BrokenCryptoABMC1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String cryptoKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="6b5wug940m8twtpguxlenn140" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC1</class>
    <file>BrokenCryptoABMC1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String cryptoKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="1flc8oda0iprdmpwcmardf5uo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC2</class>
    <file>BrokenCryptoABMC2.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3wzeiqji5a0o7o6wbllo7jqlc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC2</class>
    <file>BrokenCryptoABMC2.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="10xjauh8wreunjiydpi573dy8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC3</class>
    <file>BrokenCryptoABMC3.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3tv8e9y2fkhxrye7t382d6kww" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC3</class>
    <file>BrokenCryptoABMC3.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="16tywp40iciwf6z953sbojbds" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC4</class>
    <file>BrokenCryptoABMC4.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="4oe384pzfmadixh1p1fxu8pcw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC4</class>
    <file>BrokenCryptoABMC4.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="1q8a5jdrym0b7idl965e8ri3k" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC5</class>
    <file>BrokenCryptoABMC5.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC5.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC5 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="24at0pn0ippt88rx2lzpfby3k" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC5</class>
    <file>BrokenCryptoABMC5.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC5.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC5 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="29wygrzm153g6coqisod097xc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5s8loj3r94nw6ksb7ibdklhls" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase2 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="16sxb8td8rqi0bqchqdzu9jds" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase3 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2eoi0ok9hhgqsgad468vohh0g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase4 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="49oikhmvtxs378jxkrwsgszts" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase5 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5znjo3tohdq7s6bcibrb0cig0" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="whxilf8rz4bv91ygep08k31c" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="2bslbscy29msfgu0hpnzf7ts" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase2</class>
    <file>BrokenCryptoBBCase2.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase2 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="3hvnstw0xxwq8k5t27wyy93kw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase2</class>
    <file>BrokenCryptoBBCase2.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase2 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase2 bc = new BrokenCryptoBBCase2();</code>
    </node>
  </finding>


  <finding id="7dkbc3npda8m388wj249sef6o" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase3</class>
    <file>BrokenCryptoBBCase3.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase3 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("RC4");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="68qh0lacchawk9j3schbb1x0g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase3</class>
    <file>BrokenCryptoBBCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase3 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("RC4");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase3 bc = new BrokenCryptoBBCase3();</code>
    </node>
  </finding>


  <finding id="5yjbj0ijzntt1ry5ywhm8jyao" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase4</class>
    <file>BrokenCryptoBBCase4.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase4 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("RC2");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="7985a1fmxf428v7g012jfhfmo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase4</class>
    <file>BrokenCryptoBBCase4.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase4 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("RC2");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase4 bc = new BrokenCryptoBBCase4();</code>
    </node>
  </finding>


  <finding id="3gt08uwxvo33c98df4xz1y3q8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase5</class>
    <file>BrokenCryptoBBCase5.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_KeyGeneratorGetInstance'.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_KeyGeneratorGetInstance':
static javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase5.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase5 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("IDEA");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="ov4hyzvosqto0vk49w5xeb1c" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase5</class>
    <file>BrokenCryptoBBCase5.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase5.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase5 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("IDEA");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase5 bc = new BrokenCryptoBBCase5();</code>
    </node>
  </finding>


  <finding id="37xgi54wgwbo8jqywliik19wg" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase1</class>
    <file>EcbInSymmCryptoABICase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoABICase1 bc = new EcbInSymmCryptoABICase1();</code>
    </node>
  </finding>


  <finding id="8sk81ed030vj5oamp5nhitsw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase2</class>
    <file>EcbInSymmCryptoABICase2.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase2.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="7fpyrxq3bj1zszkk2rjydg5eo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase3</class>
    <file>EcbInSymmCryptoABICase3.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase3.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false">        String crypto = "AES/ECB/PKCS5Padding";</code>
    </node>
  </finding>


  <finding id="4iak0d24jzmahes2g1l38rx40" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABMC1</class>
    <file>EcbInSymmCryptoABMC1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABMC1.java">
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABMC1 {</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false">}</code>
    </node>
  </finding>


  <finding id="5ci01an1jub8hx0o0bz05a9nk" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoABPSCase1 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="2auc1sk7utkiv953mz7tv8m00" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoBBCase1</class>
    <file>EcbInSymmCryptoBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoBBCase1.java">
      <code lineNo="9" finding="false">public class EcbInSymmCryptoBBCase1 {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="1ur40q5d4cqt8ib0ibykkl8ww" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="11" finding="false">    public void go(int keySize) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="12" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="13" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="14" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="1ypbkfkt56wjmvu5iwc7jld28" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>24</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //decrypting</code>
      <code lineNo="24" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="25" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="28" finding="false">        System.out.println(message);</code>
      <code lineNo="29" finding="false">    }</code>
    </node>
  </finding>


  <finding id="388dl1w1vyexrcv8kk86h8xgg" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="11" finding="false">    public static final int DEFAULT_KEY_SIZE = 1024;</code>
      <code lineNo="12" finding="false">    private static int KEY_SIZE;</code>
      <code lineNo="13" finding="false">    private static int keysize;</code>
      <code lineNo="14" finding="false">    public void go(KeyPairGenerator kgp, KeyPair kp) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="w0sxcpplxoy5xwps3c0dvwps" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>24</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //decrypting</code>
      <code lineNo="24" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="25" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="28" finding="false">        System.out.println(message);</code>
      <code lineNo="29" finding="false">    }</code>
    </node>
  </finding>


  <finding id="1uyaxlwam4vi55y7iw121lnq8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>23</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="18" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="19" finding="false">        kgp.initialize(key);</code>
      <code lineNo="20" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="24" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        //encrypting</code>
      <code lineNo="27" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="28" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="zyt5k9epf031e9jw1ico4jmo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="26" finding="false">        //encrypting</code>
      <code lineNo="27" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="28" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="29" finding="false"></code>
      <code lineNo="30" finding="false">        //decrypting</code>
      <code lineNo="31" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="32" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="35" finding="false">        System.out.println(message);</code>
      <code lineNo="36" finding="false">    }</code>
    </node>
  </finding>


  <finding id="1wg3xpc1xno7m31lxyy89jn1c" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="11" finding="false">    public void go(int keySize) throws IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        //encrypting</code>
    </node>
  </finding>


  <finding id="40rlyz1m9nahen9biuhi7w5sw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        //encrypting</code>
      <code lineNo="22" finding="false">        String myMessage = new String("Secret Message");</code>
    </node>
  </finding>


  <finding id="5d9ssb4tit3zplhlxx9itds2o" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABPSCase1</class>
    <file>InsecureAsymmetricCipherABPSCase1.java</file>
    <line>20</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABPSCase1.java">
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="17" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="21" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //encrypting</code>
      <code lineNo="24" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="25" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="2jjf4ait7ulkf440zhwptfalc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="10" finding="false">        int keysize = 1024;</code>
      <code lineNo="11" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="12" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        //encrypting</code>
      <code lineNo="19" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="20" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="1k9hogmk62vim9pjwqnlrwc4g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed crypto algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedCryptoAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>23</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed crypto algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_CipherConstruction': 
The specified algorithm or triple of algorithm/operation mode/padding is not allowed for encryption or decryption.

Violated protocol: Check Allowed Cryptography Algorithms
Protocol description: 
Allow only a given set of cryptography algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_CipherConstruction':
static javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="18" finding="false">        //encrypting</code>
      <code lineNo="19" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="20" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        //decrypting</code>
      <code lineNo="23" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="24" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="27" finding="false">        System.out.println(message);</code>
      <code lineNo="28" finding="false">    }</code>
    </node>
  </finding>


  <finding id="22bz2o5ylibt5gvs6rv58ahr4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase1</class>
    <file>BrokenHashABICase1.java</file>
    <line>13</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase1.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "SHA1";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="19zau1b8n5aptgusyxgblfalc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase10</class>
    <file>BrokenHashABICase10.java</file>
    <line>18</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase10.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="2whr35vg8laeqaw9ndvgvah5s" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase11</class>
    <file>BrokenHashABICase11.java</file>
    <line>18</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase11.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="5uud5mezc4srbl5fwqt75u4ps" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase12</class>
    <file>BrokenHashABICase12.java</file>
    <line>18</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase12.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="3yilwekmtdlcen91c89xr9f8g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase2</class>
    <file>BrokenHashABICase2.java</file>
    <line>13</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase2.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD5";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="4rhhnuemov9725kwwfb2wkfog" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase3</class>
    <file>BrokenHashABICase3.java</file>
    <line>13</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase3.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD4";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="fgwm7f4tmzdueou8msykdqow" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase4</class>
    <file>BrokenHashABICase4.java</file>
    <line>13</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase4.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD2";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="97gqbxypv00nuzsb3wfiknz4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase5</class>
    <file>BrokenHashABICase5.java</file>
    <line>25</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase5.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="6hhc4ezyo41xwt6qqwjgx4huo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase6</class>
    <file>BrokenHashABICase6.java</file>
    <line>25</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase6.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="5nu52abqof9xzsy45vb2fcz8g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase7</class>
    <file>BrokenHashABICase7.java</file>
    <line>25</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase7.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="6wd4dl02yesyjk3elj4wz89cw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase8</class>
    <file>BrokenHashABICase8.java</file>
    <line>25</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase8.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="6xg0ex8yq6uzc463f7prvpops" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase9</class>
    <file>BrokenHashABICase9.java</file>
    <line>18</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase9.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="4qahute7wkxzprj7l5odoms80" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC1</class>
    <file>BrokenHashABMC1.java</file>
    <line>8</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC1.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC1 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="ly3fxvo78osmcak60w1nr3a8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC2</class>
    <file>BrokenHashABMC2.java</file>
    <line>8</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC2.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC2 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="7iqnws0g60gmakcrba3tuftcw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC3</class>
    <file>BrokenHashABMC3.java</file>
    <line>8</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC3.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC3 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="2vjqjs7g23rw16vasdrysxsv4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC4</class>
    <file>BrokenHashABMC4.java</file>
    <line>8</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC4.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC4 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="5z3kvnnhkiqq4lnfjomxu4868" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase1</class>
    <file>BrokenHashABPSCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase1.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase1 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="723zba0xrgplw4jd6rv7yrv4w" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase2</class>
    <file>BrokenHashABPSCase2.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase2.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase2 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6qr072zynr480lhi3rlsbwz1c" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase3</class>
    <file>BrokenHashABPSCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase3.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase3 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4dqu93ii62njlm63iznoj2n34" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase4</class>
    <file>BrokenHashABPSCase4.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase4.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase4 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3f14v0avn8cksplnba45fgv34" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase1</class>
    <file>BrokenHashBBCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase1.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase1 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="4b3lsjya1laez3zx9gkwi4nz4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase2</class>
    <file>BrokenHashBBCase2.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase2.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase2 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="259t2kfmwnv80b9em275jr42o" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase3</class>
    <file>BrokenHashBBCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase3.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase3 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="66sb2k39vg6nmm29x1pwqyqg0" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Check that only allowed hash algorithms are used</problemType>
    <problemTypeId>protocolCheckProblemType:OnlyAllowedHashAlgorithms</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase4</class>
    <file>BrokenHashBBCase4.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Check that only allowed hash algorithms are used'.
The protocol check detected something wrong when encountering symbol 'AnyAlgorithm_MessageDigestGetInstance'.

Violated protocol: Check Allowed Hash Algorithms
Protocol description: 
Allow only a given set of hash algorithm names where algorithm names are expected.

The algorithm names are configured via constant value constraint variables.

Names to be checked against can be found here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html

Matching pattern in protocol check kind 'AnyAlgorithm_MessageDigestGetInstance':
static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String, ***)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase4.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase4 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="4b3aqszv7rjbllpoue5jqjqse" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase1</class>
    <file>BrokenCryptoABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String keyAlgo) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(keyAlgo);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="26hg5l3s29sg45d1u1nlcuhjy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase1</class>
    <file>BrokenCryptoABICase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String keyAlgo) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(keyAlgo);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase1 bc = new BrokenCryptoABICase1();</code>
    </node>
  </finding>


  <finding id="4fq1c1ehlo4v0xewq2rj2cbq6" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase10</class>
    <file>BrokenCryptoABICase10.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase10.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase10 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "IDEA";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="5rsa4qphubo2iczod0kyoy34u" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase10</class>
    <file>BrokenCryptoABICase10.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase10.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3gm4rr09udgkmarc9t1reb7fj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase11</class>
    <file>BrokenCryptoABICase11.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase11.java">
      <code lineNo="11" finding="false">    public static void method2(String c, String key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo,key);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto,String cryptoKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="2c82iw10t90e5234uqas039sv" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase11</class>
    <file>BrokenCryptoABICase11.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase11.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo,key);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto,String cryptoKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false">        String key = "DES";</code>
    </node>
  </finding>


  <finding id="3ryfpb1iz0rmeirpmpmsez5gf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase12</class>
    <file>BrokenCryptoABICase12.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase12.java">
      <code lineNo="10" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="12" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="5hwyyx6w5kgwm5w8o35jze927" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase12</class>
    <file>BrokenCryptoABICase12.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase12.java">
      <code lineNo="12" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="66rfz4s2w01fux8ylvtejgqcf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase13</class>
    <file>BrokenCryptoABICase13.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase13.java">
      <code lineNo="12" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="14" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="17" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="19" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="20" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="3iy61f4zvv85t45h5kd2frwin" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase13</class>
    <file>BrokenCryptoABICase13.java</file>
    <line>19</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase13.java">
      <code lineNo="14" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="17" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="19" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="20" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="24" finding="false">        String crypto = "RC4";</code>
    </node>
  </finding>


  <finding id="4w9hahh5l8gm3p1v57kyne927" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase14</class>
    <file>BrokenCryptoABICase14.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase14.java">
      <code lineNo="11" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="1pntuvew4nhtmrpxs38jr2sm7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase14</class>
    <file>BrokenCryptoABICase14.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase14.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false"></code>
    </node>
  </finding>


  <finding id="1fldg3sziuv7gg6nwm9de7asf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase15</class>
    <file>BrokenCryptoABICase15.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase15.java">
      <code lineNo="11" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="4k7puodjb6i6bwui5xxydbeqn" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase15</class>
    <file>BrokenCryptoABICase15.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase15.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false"></code>
    </node>
  </finding>


  <finding id="2unga32hmrmvw9j34q2onusta" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase2</class>
    <file>BrokenCryptoABICase2.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="2d3abzsuombr7fuz5gd8ftizi" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase2</class>
    <file>BrokenCryptoABICase2.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase2 bc = new BrokenCryptoABICase2();</code>
    </node>
  </finding>


  <finding id="3238xtcuuboaucmfjqcj53yvy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase3</class>
    <file>BrokenCryptoABICase3.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="63d6jscnwi7em5nalqu368voe" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase3</class>
    <file>BrokenCryptoABICase3.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase3 bc = new BrokenCryptoABICase3();</code>
    </node>
  </finding>


  <finding id="s4dw7qm0d7nnrjttqy8gnae7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase4</class>
    <file>BrokenCryptoABICase4.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="75tksm3sa04xg8e50frz9b23j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase4</class>
    <file>BrokenCryptoABICase4.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase4 bc = new BrokenCryptoABICase4();</code>
    </node>
  </finding>


  <finding id="2ih6g0t7regom061l9u6lh5r2" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase5</class>
    <file>BrokenCryptoABICase5.java</file>
    <line>20</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase5.java">
      <code lineNo="15" finding="false">    public static final String DEFAULT_CRYPTO_ALGO = "DES";</code>
      <code lineNo="16" finding="false">    private static char[] CRYPTO_ALGO;</code>
      <code lineNo="17" finding="false">    private static char[] crypto_algo;</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto_algo));</code>
      <code lineNo="21" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="22" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="v407iks4f428n746viddia1q" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase5</class>
    <file>BrokenCryptoABICase5.java</file>
    <line>22</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase5.java">
      <code lineNo="17" finding="false">    private static char[] crypto_algo;</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto_algo));</code>
      <code lineNo="21" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="22" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false">    private static void go2(){</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
    </node>
  </finding>


  <finding id="71wxsk8g0l63t4vka4qxh8c4f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase6</class>
    <file>BrokenCryptoABICase6.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase6.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase6 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "Blowfish";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="1takjov0bgtcgbviomf8wu3j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase6</class>
    <file>BrokenCryptoABICase6.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase6.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2hs58qvdrzm0llzqcp0nuu99a" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase7</class>
    <file>BrokenCryptoABICase7.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase7.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase7 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "RC4";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="14huw9dk98unor223wu3j7xi7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase7</class>
    <file>BrokenCryptoABICase7.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase7.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3ektre7u1oteaofaaa8pvuqfz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase8</class>
    <file>BrokenCryptoABICase8.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase8.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase8 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "RC2";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="3s3d2609pyfsruhaclw8hmjj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase8</class>
    <file>BrokenCryptoABICase8.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase8.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4jemek4raiqtik70npoj4jlni" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase9</class>
    <file>BrokenCryptoABICase9.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase9.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase9 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="4ded6agvn12an8j12sg8j1un2" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase9</class>
    <file>BrokenCryptoABICase9.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase9.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase9 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase9 bc = new BrokenCryptoABICase9();</code>
    </node>
  </finding>


  <finding id="4p1jh2hy0xy4hb7ctij75id7j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC1</class>
    <file>BrokenCryptoABMC1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String cryptoKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="33n8yvepzjx12y0vecrbvxxsv" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC1</class>
    <file>BrokenCryptoABMC1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String cryptoKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="2i236fpydeuwj761z1ucun33" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC2</class>
    <file>BrokenCryptoABMC2.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3cu2rdcg9k45m16ras6fa5s9r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC2</class>
    <file>BrokenCryptoABMC2.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="1wlnce6o7o76krnjdkpdrvmu6" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC3</class>
    <file>BrokenCryptoABMC3.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3oe94odi2n43zrgxwdtpwqyce" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC3</class>
    <file>BrokenCryptoABMC3.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="4unfvknvsnz540dqu5qjp536n" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC4</class>
    <file>BrokenCryptoABMC4.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="1u4dlciq4veyrzgf6pk3tyqn3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC4</class>
    <file>BrokenCryptoABMC4.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3rd9ygdsggjdjbet3xhlncva7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC5</class>
    <file>BrokenCryptoABMC5.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC5.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC5 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="6ec8uv1atuap3snmvnd5qb8f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC5</class>
    <file>BrokenCryptoABMC5.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC5.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC5 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="61u5srsgy03t4pppjyhn5qman" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="54mjjvhj2gowqw2na2fdlemvz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2aqqyf6vlurdrcxco6uysexcv" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="3ps0crln41dt2r5t30dq55b32" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>11</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="6" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase2 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
    </node>
  </finding>


  <finding id="77ftp62wvcjn2nzdb7hok0voe" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase2 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6svhl95hnir5fp2b08aotxxem" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="53g19f68154puet5dixq5gw9r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase3 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="21l47g7tpf4w6tge9gj20fcdb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase3 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="71idiz6sm04gq0pmvnzbpm15r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="2z73xqryof5tc9ltcw17nsmla" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase4 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="30orbyu9j7zzvur94908r2uzi" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase4 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2y97nwxgdsqzmm07bchpndu1q" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="3jg2qvwfqrhmyldfc8usmkbi" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>11</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="6" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase5 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
    </node>
  </finding>


  <finding id="32htxoomgp55lrckw466s3lni" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase5 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3bwlslix9ij24mmfe4ga8b68u" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="8kcpgwkkkhj92zy1b5gbjw4e" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="70y5xv8xmypo07n5isclo4cim" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="64cy85uj6iprsprx6r8hafecf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase2</class>
    <file>BrokenCryptoBBCase2.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase2 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="5caabwvpd5s484sowfhprlw0v" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase2</class>
    <file>BrokenCryptoBBCase2.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase2 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase2 bc = new BrokenCryptoBBCase2();</code>
    </node>
  </finding>


  <finding id="4a54s9xsi11d486fidhlb3syn" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase3</class>
    <file>BrokenCryptoBBCase3.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase3 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("RC4");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="7bsaskztyky99v7e9txc3ajj3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase3</class>
    <file>BrokenCryptoBBCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase3 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("RC4");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase3 bc = new BrokenCryptoBBCase3();</code>
    </node>
  </finding>


  <finding id="38xuelumwwyj3m2za7gqu4dpa" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase4</class>
    <file>BrokenCryptoBBCase4.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase4 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("RC2");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="408kivibtm2qaacoronieoqxq" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase4</class>
    <file>BrokenCryptoBBCase4.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase4 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("RC2");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase4 bc = new BrokenCryptoBBCase4();</code>
    </node>
  </finding>


  <finding id="26k9ltrn746mh6eq4v4jxzrry" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase5</class>
    <file>BrokenCryptoBBCase5.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase5.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase5 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("IDEA");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="215pm15j5s4bc58v2xlurlye6" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase5</class>
    <file>BrokenCryptoBBCase5.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase5.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase5 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("IDEA");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase5 bc = new BrokenCryptoBBCase5();</code>
    </node>
  </finding>


  <finding id="41byzh2sdn1pl0uy1m72nt36n" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoCorrected</class>
    <file>BrokenCryptoCorrected.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoCorrected.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="77bmluxm9t787o6f8d850buqn" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoCorrected</class>
    <file>BrokenCryptoCorrected.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoCorrected.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="41mjd84lk4bhcjynbizdx6hr3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase1</class>
    <file>BrokenHashABICase1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase1.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "SHA1";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="5p5ftiovs2log217pa168s127" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase10</class>
    <file>BrokenHashABICase10.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase10.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="u0upfzizj7iusbyy3x22tjz3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase11</class>
    <file>BrokenHashABICase11.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase11.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="2n8u17n2bntzl03epm6932man" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase12</class>
    <file>BrokenHashABICase12.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase12.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="3ca6qhmk0nityqogxvjp00m73" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase2</class>
    <file>BrokenHashABICase2.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase2.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD5";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3wbxrrqunmoc6sxlvnjx8k28u" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase3</class>
    <file>BrokenHashABICase3.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase3.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD4";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3km1aauj9611z0rw1i73h6sta" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase4</class>
    <file>BrokenHashABICase4.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase4.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD2";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="39kk27xhtl4eg9zc8xvaiepum" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase5</class>
    <file>BrokenHashABICase5.java</file>
    <line>25</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase5.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="1f3e7h3mcrw8ivqmi2e55t17i" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase6</class>
    <file>BrokenHashABICase6.java</file>
    <line>25</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase6.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="36bbstvbqujbdsarhqhmzc95r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase7</class>
    <file>BrokenHashABICase7.java</file>
    <line>25</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase7.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="2v3r1fz9qxue9zplsorifvxwe" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase8</class>
    <file>BrokenHashABICase8.java</file>
    <line>25</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase8.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="332vx8q74tw6ya9qz7xpo3gwv" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase9</class>
    <file>BrokenHashABICase9.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase9.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="48pa26zfvtdfmbia10xufdlcu" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC1</class>
    <file>BrokenHashABMC1.java</file>
    <line>8</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC1.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC1 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="6as1vu5dppekfdqh7m1psbivz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC2</class>
    <file>BrokenHashABMC2.java</file>
    <line>8</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC2.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC2 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="2370nwv38x8yn5u8zw7upl36n" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC3</class>
    <file>BrokenHashABMC3.java</file>
    <line>8</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC3.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC3 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="43zmy6ntg4n7d965zkx6ixjy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC4</class>
    <file>BrokenHashABMC4.java</file>
    <line>8</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC4.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC4 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="32ccderczmegb0w9b07ngh2se" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase1</class>
    <file>BrokenHashABPSCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase1.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase1 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3264m85x4gdtewlqja7n2bvxa" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase1</class>
    <file>BrokenHashABPSCase1.java</file>
    <line>11</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase1.java">
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="true">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="6ra7oy1w7xoc8rb665lq30ehq" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase2</class>
    <file>BrokenHashABPSCase2.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase2.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase2 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3jkduvdssshjmnqfko0kxf7fi" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase2</class>
    <file>BrokenHashABPSCase2.java</file>
    <line>11</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase2.java">
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="true">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="61otr8dwrdmqpjad6d8glqy5a" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase3</class>
    <file>BrokenHashABPSCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase3.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase3 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3da0ft2tfs21jh56hlqh1z42m" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase3</class>
    <file>BrokenHashABPSCase3.java</file>
    <line>11</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase3.java">
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="true">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="4aoxlzvtu0idrwcff2e6ngg2m" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase4</class>
    <file>BrokenHashABPSCase4.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase4.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase4 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5nls8a13v3cpjcjsdp45qvdjy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase4</class>
    <file>BrokenHashABPSCase4.java</file>
    <line>11</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase4.java">
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="true">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="57m2h4hkwi2wmzsc39okko8da" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase1</class>
    <file>BrokenHashBBCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase1.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase1 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="pwje6dvpbaweqde7qn4g3z32" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase2</class>
    <file>BrokenHashBBCase2.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase2.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase2 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="qcuoqztol1soskj0n9b5qj4u" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase3</class>
    <file>BrokenHashBBCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase3.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase3 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="2ybrx8302dbx1959ibtg5ohni" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase4</class>
    <file>BrokenHashBBCase4.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase4.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase4 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="2cnyex1zf8ihgaqi6ywrtbqla" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashCorrected</class>
    <file>BrokenHashCorrected.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashCorrected.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashCorrected {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) {</code>
      <code lineNo="8" finding="false">        try {</code>
      <code lineNo="9" finding="true">            MessageDigest md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="10" finding="false">        } catch (NoSuchAlgorithmException e) {</code>
      <code lineNo="11" finding="false">            e.printStackTrace();</code>
      <code lineNo="12" finding="false">        }</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">}</code>
    </node>
  </finding>


  <finding id="6qbagg5su4bu79zvg416b7tjz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>Crypto</class>
    <file>Crypto.java</file>
    <line>40</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="40" classFQN="org.cryptoapi.bench.predictablecryptographickey.Crypto" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyABSCase1.java">
      <code lineNo="35" finding="false">    Cipher cipher;</code>
      <code lineNo="36" finding="false">    String algoSpec = "AES/CBC/PKCS5Padding";</code>
      <code lineNo="37" finding="false">    String algo = "AES";</code>
      <code lineNo="38" finding="false">    String defaultKey;</code>
      <code lineNo="39" finding="false">    public Crypto(String defkey) throws NoSuchPaddingException, NoSuchAlgorithmException {</code>
      <code lineNo="40" finding="true">        cipher = Cipher.getInstance(algoSpec);</code>
      <code lineNo="41" finding="false">        defaultKey = defkey;</code>
      <code lineNo="42" finding="false">    }</code>
      <code lineNo="43" finding="false"></code>
      <code lineNo="44" finding="false">    public byte[] method1(String txt, String key) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {</code>
      <code lineNo="45" finding="false">        if(key.isEmpty()){</code>
    </node>
  </finding>


  <finding id="4rec4boipzc25d8dk6flkrzhb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto2</class>
    <file>Crypto2.java</file>
    <line>28</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="28" classFQN="org.cryptoapi.bench.brokencrypto.Crypto2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase1.java">
      <code lineNo="23" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="24" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="6qiyjjly3bjrr304y2n95et7j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto2</class>
    <file>Crypto2.java</file>
    <line>30</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="30" classFQN="org.cryptoapi.bench.brokencrypto.Crypto2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase1.java">
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="34" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="35" finding="false">    }</code>
    </node>
  </finding>


  <finding id="51pwho7i9dcdznugafzz18ztr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto3</class>
    <file>Crypto3.java</file>
    <line>28</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="28" classFQN="org.cryptoapi.bench.brokencrypto.Crypto3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase2.java">
      <code lineNo="23" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="24" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="6iz7npplb37m9nts4csefcz8f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto3</class>
    <file>Crypto3.java</file>
    <line>30</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="30" classFQN="org.cryptoapi.bench.brokencrypto.Crypto3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase2.java">
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="34" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="35" finding="false">    }</code>
    </node>
  </finding>


  <finding id="7k03bl6u4a8wtj14xiayye6vz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto4</class>
    <file>Crypto4.java</file>
    <line>28</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="28" classFQN="org.cryptoapi.bench.brokencrypto.Crypto4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase3.java">
      <code lineNo="23" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="24" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="5edklc81j8063hrg5i03s9y7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto4</class>
    <file>Crypto4.java</file>
    <line>30</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="30" classFQN="org.cryptoapi.bench.brokencrypto.Crypto4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase3.java">
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="34" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="35" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2maabhdofdmalomzx0v6nv3vj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto5</class>
    <file>Crypto5.java</file>
    <line>29</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="29" classFQN="org.cryptoapi.bench.brokencrypto.Crypto5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase4.java">
      <code lineNo="24" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="25" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="26" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="30" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="31" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="32" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="6gqdxw3xtvgpvhgv3zonwlgtb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto5</class>
    <file>Crypto5.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokencrypto.Crypto5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase4.java">
      <code lineNo="26" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="30" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="31" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="32" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="35" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="36" finding="false">    }</code>
    </node>
  </finding>


  <finding id="15uqn7ao3axo81ejmenaat5r3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto6</class>
    <file>Crypto6.java</file>
    <line>29</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="29" classFQN="org.cryptoapi.bench.brokencrypto.Crypto6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase5.java">
      <code lineNo="24" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="25" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="26" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="30" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="31" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="32" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="8391rrcmga7m56wnka8c04tb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto6</class>
    <file>Crypto6.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokencrypto.Crypto6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase5.java">
      <code lineNo="26" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="30" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="31" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="32" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="35" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="36" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4ci6kxmbiyda1fxhufdzud0f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>CryptoECB1</class>
    <file>CryptoECB1.java</file>
    <line>32</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="32" classFQN="org.cryptoapi.bench.ecbcrypto.CryptoECB1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABSCase1.java">
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="29" finding="false">            passedAlgo = defAlgo;</code>
      <code lineNo="30" finding="false">        }</code>
      <code lineNo="31" finding="false"></code>
      <code lineNo="32" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="33" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="34" finding="false">        Cipher cipher = Cipher.getInstance(passedAlgo);</code>
      <code lineNo="35" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4sqoesfhw3thtpeyc0to7ayjj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>CryptoECB1</class>
    <file>CryptoECB1.java</file>
    <line>34</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="34" classFQN="org.cryptoapi.bench.ecbcrypto.CryptoECB1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABSCase1.java">
      <code lineNo="29" finding="false">            passedAlgo = defAlgo;</code>
      <code lineNo="30" finding="false">        }</code>
      <code lineNo="31" finding="false"></code>
      <code lineNo="32" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="33" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="34" finding="true">        Cipher cipher = Cipher.getInstance(passedAlgo);</code>
      <code lineNo="35" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">    }</code>
      <code lineNo="38" finding="false">}</code>
    </node>
  </finding>


  <finding id="2vvuewsgxzb5qzbk97lp4drhb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>CryptoHash1</class>
    <file>CryptoHash1.java</file>
    <line>29</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="29" classFQN="org.cryptoapi.bench.brokenhash.CryptoHash1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABSCase1.java">
      <code lineNo="24" finding="false">    public void encrypt(String str, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="25" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="26" finding="false">            passedAlgo = crypto;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="30" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="31" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">    }</code>
      <code lineNo="34" finding="false">}</code>
    </node>
  </finding>


  <finding id="oxiwizfscz761a1iyrokpmxr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>CryptoHash2</class>
    <file>CryptoHash2.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokenhash.CryptoHash2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABSCase2.java">
      <code lineNo="26" finding="false">    public void encrypt(String str, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="27" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="28" finding="false">            passedAlgo = crypto;</code>
      <code lineNo="29" finding="false">        }</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="32" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="33" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="34" finding="false"></code>
      <code lineNo="35" finding="false">    }</code>
      <code lineNo="36" finding="false">}</code>
    </node>
  </finding>


  <finding id="3qo4tbplup19vqxxnictgsspr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>CryptoHash3</class>
    <file>CryptoHash3.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokenhash.CryptoHash3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABSCase3.java">
      <code lineNo="26" finding="false">    public void encrypt(String str, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="27" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="28" finding="false">            passedAlgo = crypto;</code>
      <code lineNo="29" finding="false">        }</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="32" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="33" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="34" finding="false"></code>
      <code lineNo="35" finding="false">    }</code>
      <code lineNo="36" finding="false">}</code>
    </node>
  </finding>


  <finding id="4gspd0h9hymjx0cr6iiqtuq1r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>CryptoHash4</class>
    <file>CryptoHash4.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokenhash.CryptoHash4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABSCase4.java">
      <code lineNo="26" finding="false">    public void encrypt(String str, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="27" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="28" finding="false">            passedAlgo = crypto;</code>
      <code lineNo="29" finding="false">        }</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="32" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="33" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="34" finding="false"></code>
      <code lineNo="35" finding="false">    }</code>
      <code lineNo="36" finding="false">}</code>
    </node>
  </finding>


  <finding id="1c0dxtwrmog0cnng0auiye6vz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>CryptoPBEIteration1</class>
    <file>CryptoPBEIteration1.java</file>
    <line>37</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="37" classFQN="org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABSCase1.java">
      <code lineNo="32" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="33" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="34" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="35" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="true">        pbeParamSpec = new PBEParameterSpec(salt,passedCount);</code>
      <code lineNo="38" finding="false"></code>
      <code lineNo="39" finding="false"></code>
      <code lineNo="40" finding="false"></code>
      <code lineNo="41" finding="false">    }</code>
      <code lineNo="42" finding="false">}</code>
    </node>
  </finding>


  <finding id="7g2qvzp5toyu1pdct4i1lzpen" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>CryptoPredictableKeyStorePassword1</class>
    <file>CryptoPredictableKeyStorePassword1.java</file>
    <line>32</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="32" classFQN="org.cryptoapi.bench.predictablekeystorepassword.CryptoPredictableKeyStorePassword1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABSCase1.java">
      <code lineNo="27" finding="false">    public void method1(String passedKey) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">        passedKey = defKey;</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        String type = "JKS";</code>
      <code lineNo="32" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="33" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="34" finding="false">        ks.load(cacerts.openStream(), passedKey.toCharArray());</code>
      <code lineNo="35" finding="false">    }</code>
      <code lineNo="36" finding="false">}</code>
    </node>
  </finding>


  <finding id="2pphcixrit8eg334fh06lbd5r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>CryptoStaticIV1</class>
    <file>CryptoStaticIV1.java</file>
    <line>32</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="32" classFQN="org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABSCase1.java">
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    public void method1(byte[] passedIV) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        passedIV = defIV;</code>
      <code lineNo="32" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(passedIV);</code>
      <code lineNo="33" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="34" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="35" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="36" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="37" finding="false"></code>
    </node>
  </finding>


  <finding id="1ggho1lmbhwggd227qz7oo21r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>CryptoStaticIV1</class>
    <file>CryptoStaticIV1.java</file>
    <line>33</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="33" classFQN="org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABSCase1.java">
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    public void method1(byte[] passedIV) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        passedIV = defIV;</code>
      <code lineNo="32" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(passedIV);</code>
      <code lineNo="33" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="34" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="35" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="36" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="37" finding="false"></code>
      <code lineNo="38" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5suqk5iiokja6erjgtsph9e1r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>CryptoStaticIV1</class>
    <file>CryptoStaticIV1.java</file>
    <line>35</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="35" classFQN="org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABSCase1.java">
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        passedIV = defIV;</code>
      <code lineNo="32" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(passedIV);</code>
      <code lineNo="33" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="34" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="35" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="36" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="37" finding="false"></code>
      <code lineNo="38" finding="false">    }</code>
      <code lineNo="39" finding="false">}</code>
      <code lineNo="40" finding="false"></code>
    </node>
  </finding>


  <finding id="6dwtfwea1kuvkizqu43ct0e3j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>CryptoStaticSalt1</class>
    <file>CryptoStaticSalt1.java</file>
    <line>27</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="27" classFQN="org.cryptoapi.bench.staticsalts.CryptoStaticSalt1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsABSCase1.java">
      <code lineNo="22" finding="false">    public void method1(byte[] passedSalt)  {</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">        passedSalt = defSalt;</code>
      <code lineNo="25" finding="false">        int count = 1020;</code>
      <code lineNo="26" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="27" finding="true">        pbeParamSpec = new PBEParameterSpec(passedSalt, count);</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </node>
  </finding>


  <finding id="qbj871jh8555guvpkszidwm7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase1</class>
    <file>EcbInSymmCryptoABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="3zd4ni1s04ino3mhkcp1zh3rz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase1</class>
    <file>EcbInSymmCryptoABICase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoABICase1 bc = new EcbInSymmCryptoABICase1();</code>
    </node>
  </finding>


  <finding id="80qw75ex90ckazqk6f0jz4gu" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase2</class>
    <file>EcbInSymmCryptoABICase2.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase2.java">
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "AES/ECB/PKCS5Padding";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="6c3qa6jcy64zu58gfpiodsqxq" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase2</class>
    <file>EcbInSymmCryptoABICase2.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase2.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5pq4qi843cy7vaflw6dsetyzj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase3</class>
    <file>EcbInSymmCryptoABICase3.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase3.java">
      <code lineNo="11" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="36im5wl17bq2du6h2v9rb40v3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase3</class>
    <file>EcbInSymmCryptoABICase3.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase3.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false">        String crypto = "AES/ECB/PKCS5Padding";</code>
    </node>
  </finding>


  <finding id="6or1ai7kxc671r8iq8468v9zy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABMC1</class>
    <file>EcbInSymmCryptoABMC1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABMC1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABMC1 {</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false">}</code>
    </node>
  </finding>


  <finding id="2w5fao5hbz1ksb07n711s7hi6" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABMC1</class>
    <file>EcbInSymmCryptoABMC1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABMC1.java">
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABMC1 {</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false">}</code>
    </node>
  </finding>


  <finding id="5qqeutg9xi0p2alhc2unyj4v" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>11</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="6" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoABPSCase1 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
    </node>
  </finding>


  <finding id="p6io3xdap1dlwd4u8yekj9sv" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoABPSCase1 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="s2zqocp7huyfkszeyypg0yu7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        EcbInSymmCryptoABPSCase1 bc = new EcbInSymmCryptoABPSCase1();</code>
    </node>
  </finding>


  <finding id="4xqtw93j1qp19bczyssmmqa8u" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoBBCase1</class>
    <file>EcbInSymmCryptoBBCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoBBCase1.java">
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoBBCase1 {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="5mew4i0ppas8c7wqg3sp7ixcu" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoBBCase1</class>
    <file>EcbInSymmCryptoBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoBBCase1.java">
      <code lineNo="9" finding="false">public class EcbInSymmCryptoBBCase1 {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="5s2x9lfcr3okxy6xnqtthcdi7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoCorrected</class>
    <file>EcbInSymmCryptoCorrected.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoCorrected.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="14hgd9wmt97ctdrjmb1vq1x7j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoCorrected</class>
    <file>EcbInSymmCryptoCorrected.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoCorrected.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="5nmcd4pyeid41jp8tjerhoz1b" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="7" finding="false">import java.security.KeyPairGenerator;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class InsecureAsymmetricCipherABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(int keySize) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="12" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="13" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="14" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
    </node>
  </finding>


  <finding id="40cthl8pfi9bk5phl938o117j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="11" finding="false">    public void go(int keySize) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="12" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="13" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="14" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="4k6egg7hl3nqyp4est6j15kkf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>24</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //decrypting</code>
      <code lineNo="24" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="25" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="28" finding="false">        System.out.println(message);</code>
      <code lineNo="29" finding="false">    }</code>
    </node>
  </finding>


  <finding id="12mzsvih6g9ivsdbyroeu7gbj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="11" finding="false">    public static final int DEFAULT_KEY_SIZE = 1024;</code>
      <code lineNo="12" finding="false">    private static int KEY_SIZE;</code>
      <code lineNo="13" finding="false">    private static int keysize;</code>
      <code lineNo="14" finding="false">    public void go(KeyPairGenerator kgp, KeyPair kp) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="4ti6un4y5a5bbtf7yrz40fasf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>24</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //decrypting</code>
      <code lineNo="24" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="25" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="28" finding="false">        System.out.println(message);</code>
      <code lineNo="29" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3i9ru5of0inbqbrlhbd7gd1em" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>41</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="41" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="38" finding="false">        InsecureAsymmetricCipherABICase2 bc = new InsecureAsymmetricCipherABICase2();</code>
      <code lineNo="39" finding="false">        go2();</code>
      <code lineNo="40" finding="false">        go3();</code>
      <code lineNo="41" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="42" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="43" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="44" finding="false">        bc.go(kgp,kp);</code>
      <code lineNo="45" finding="false">    }</code>
      <code lineNo="46" finding="false"></code>
    </node>
  </finding>


  <finding id="14x2d7nwsjiatfr8m3njo9qvz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="13" finding="false">        method1(keySize);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">    public static void method1(int key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="19" finding="false">        kgp.initialize(key);</code>
      <code lineNo="20" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
    </node>
  </finding>


  <finding id="5a4666qta6fxewkmgb5gepo4f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>23</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="18" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="19" finding="false">        kgp.initialize(key);</code>
      <code lineNo="20" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="24" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        //encrypting</code>
      <code lineNo="27" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="28" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="162x8e08ql3xm9ucxw2lgqc7z" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="26" finding="false">        //encrypting</code>
      <code lineNo="27" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="28" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="29" finding="false"></code>
      <code lineNo="30" finding="false">        //decrypting</code>
      <code lineNo="31" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="32" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="35" finding="false">        System.out.println(message);</code>
      <code lineNo="36" finding="false">    }</code>
    </node>
  </finding>


  <finding id="1ywxlb34uj8x44fbjx444nm8u" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class InsecureAsymmetricCipherABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(int keySize) throws IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="3vtwg1rfa8cag39jf6rk5wnku" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="11" finding="false">    public void go(int keySize) throws IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        //encrypting</code>
    </node>
  </finding>


  <finding id="1s6ctdnw9mavc2leth1qoocbi" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        //encrypting</code>
      <code lineNo="22" finding="false">        String myMessage = new String("Secret Message");</code>
    </node>
  </finding>


  <finding id="11a4n0iycevaorucodxpnzyhr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABPSCase1</class>
    <file>InsecureAsymmetricCipherABPSCase1.java</file>
    <line>8</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABPSCase1.java">
      <code lineNo="3" finding="false">import java.io.IOException;</code>
      <code lineNo="4" finding="false">import java.security.*;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class InsecureAsymmetricCipherABPSCase1 {</code>
      <code lineNo="7" finding="false">    public void go(int choice) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="8" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">        int keysize;</code>
      <code lineNo="11" finding="false">        if (choice&gt;1)</code>
      <code lineNo="12" finding="false">            keysize = 2048;</code>
      <code lineNo="13" finding="false">        else</code>
    </node>
  </finding>


  <finding id="3rx7gy7d25wnh44bid3hqm2jj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABPSCase1</class>
    <file>InsecureAsymmetricCipherABPSCase1.java</file>
    <line>20</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABPSCase1.java">
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="17" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="21" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //encrypting</code>
      <code lineNo="24" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="25" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="1466zeu0sm077um5tb7g4g2fz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="4" finding="false">import java.io.IOException;</code>
      <code lineNo="5" finding="false">import java.security.*;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class InsecureAsymmetricCipherBBCase1 {</code>
      <code lineNo="8" finding="false">    public void go() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="9" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="10" finding="false">        int keysize = 1024;</code>
      <code lineNo="11" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="12" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false"></code>
    </node>
  </finding>


  <finding id="3wpw3t746f9e1hjn65a8jwxgf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="10" finding="false">        int keysize = 1024;</code>
      <code lineNo="11" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="12" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        //encrypting</code>
      <code lineNo="19" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="20" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="5d1qcj2fgkjxn5dyycm3qyr8f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>23</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="18" finding="false">        //encrypting</code>
      <code lineNo="19" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="20" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        //decrypting</code>
      <code lineNo="23" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="24" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="27" finding="false">        System.out.println(message);</code>
      <code lineNo="28" finding="false">    }</code>
    </node>
  </finding>


  <finding id="298boa5mfpy737y4xysq8vjhb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>LessThan1000IterationPBEABHCase1</class>
    <file>LessThan1000IterationPBEABHCase1.java</file>
    <line>27</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="27" classFQN="org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABHCase1.java">
      <code lineNo="22" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="23" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="24" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="25" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="26" finding="false">        //int count = 20;</code>
      <code lineNo="27" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, iteration);</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="7cj9jj0i46gp7kh5dynhs1c9r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>LessThan1000IterationPBEABICase1</class>
    <file>LessThan1000IterationPBEABICase1.java</file>
    <line>19</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABICase1.java">
      <code lineNo="14" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="15" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="16" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="17" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false">}</code>
    </node>
  </finding>


  <finding id="7k0il3exmla3z6aa9opfeiue7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>LessThan1000IterationPBEABICase2</class>
    <file>LessThan1000IterationPBEABICase2.java</file>
    <line>28</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="28" classFQN="org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABICase2.java">
      <code lineNo="23" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="24" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="25" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="26" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, Integer.parseInt(String.valueOf(count)));</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </node>
  </finding>


  <finding id="76nwgw14i8wzbgp7c5g8165wf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>LessThan1000IterationPBEABICase3</class>
    <file>LessThan1000IterationPBEABICase3.java</file>
    <line>23</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABICase3.java">
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">    public static void method1(int count, SecureRandom random, PBEParameterSpec pbe) {</code>
      <code lineNo="20" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="21" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="true">        pbe = new PBEParameterSpec(salt, count);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false">}</code>
    </node>
  </finding>


  <finding id="72bc6nsug8ieyjwuvv18owtb3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>LessThan1000IterationPBEABMC1</class>
    <file>LessThan1000IterationPBEABMC1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABMC1.java">
      <code lineNo="8" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="9" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="10" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="11" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="4a6vfkriyzonpzb0cqj87jwwu" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>LessThan1000IterationPBEABPSCase1</class>
    <file>LessThan1000IterationPBEABPSCase1.java</file>
    <line>19</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEABPSCase1.java">
      <code lineNo="14" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="15" finding="false">        if(choice &gt; 1)</code>
      <code lineNo="16" finding="false">            count = 1050;</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="19" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false">}</code>
    </node>
  </finding>


  <finding id="14pstd92fmte8svflxp6p48db" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>LessThan1000IterationPBEBBCase1</class>
    <file>LessThan1000IterationPBEBBCase1.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBEBBCase1.java">
      <code lineNo="12" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="13" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="14" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="15" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="16" finding="false">        int count = 20;</code>
      <code lineNo="17" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </node>
  </finding>


  <finding id="6p7lzp3kp9spuwjm9dekeeyjj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.pbeiteration</package>
    <class>LessThan1000IterationPBECorrected</class>
    <file>LessThan1000IterationPBECorrected.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/pbeiteration/LessThan1000IterationPBECorrected.java">
      <code lineNo="12" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="13" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="14" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="15" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="16" finding="false">        int count = 1020;</code>
      <code lineNo="17" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </node>
  </finding>


  <finding id="2yi2xpumzifbtv95801bnuna6" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>PredictableCryptographicKeyCorrected</class>
    <file>PredictableCryptographicKeyCorrected.java</file>
    <line>22</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyCorrected.java">
      <code lineNo="17" finding="false">        String originalString = "Testing";</code>
      <code lineNo="18" finding="false">        byte[] keyBytes = defaultKey.getBytes();</code>
      <code lineNo="19" finding="false">        keyBytes = Arrays.copyOf(keyBytes,16);</code>
      <code lineNo="20" finding="false">        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, keySpec);</code>
      <code lineNo="24" finding="false">        String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")));</code>
      <code lineNo="25" finding="false">        System.out.println(encrypt);</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">    }</code>
    </node>
  </finding>


  <finding id="18v9lj9nq0f1s0j7poo6jbdjz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABHCase1</class>
    <file>PredictableKeyStorePasswordABHCase1.java</file>
    <line>24</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABHCase1.java">
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="21" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="22" finding="false">        byte [] keyBytes = password.getBytes("UTF-8");</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="25" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="26" finding="false">        ks.load(cacerts.openStream(), new String(keyBytes).toCharArray());</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false">}</code>
    </node>
  </finding>


  <finding id="7hu848k1nj9eh7el4dk7hvwpr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABHCase2</class>
    <file>PredictableKeyStorePasswordABHCase2.java</file>
    <line>29</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="29" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABHCase2.java">
      <code lineNo="24" finding="false">        hm.put("ccc", "cfix");</code>
      <code lineNo="25" finding="false">        hm.put("ddd", "dfix");</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String key = hm.get("aaa");</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="30" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="31" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="32" finding="false">    }</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">}</code>
    </node>
  </finding>


  <finding id="47vni4y2ap3qrajr1xhn8k3tq" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase1</class>
    <file>PredictableKeyStorePasswordABICase1.java</file>
    <line>20</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java">
      <code lineNo="15" finding="false">        pksp.go(key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </node>
  </finding>


  <finding id="3gvmrtkcz7blqerc1ccj8g2fy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase2</class>
    <file>PredictableKeyStorePasswordABICase2.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java">
      <code lineNo="26" finding="false">        encryptKey = ENCRYPT_KEY;</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    private void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="30" finding="false">        String type = "JKS";</code>
      <code lineNo="31" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="32" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="33" finding="false">        ks.load(cacerts.openStream(), encryptKey);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false">}</code>
    </node>
  </finding>


  <finding id="209egas268637c8vvpbloxkyn" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase3</class>
    <file>PredictableKeyStorePasswordABICase3.java</file>
    <line>25</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java">
      <code lineNo="20" finding="false">        method2(key2);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public void method2(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="24" finding="false">        String type = "JKS";</code>
      <code lineNo="25" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="26" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="27" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="761dzhtwsya8x68acj2new9y6" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABMC1</class>
    <file>PredictableKeyStorePasswordABMC1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class PredictableKeyStorePasswordABMC1 {</code>
      <code lineNo="12" finding="false">    URL cacerts;</code>
      <code lineNo="13" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="14" finding="false">        String type = "JKS";</code>
      <code lineNo="15" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="16" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="17" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </node>
  </finding>


  <finding id="29kqer97295yfhm949a4m8lem" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABPSCase1</class>
    <file>PredictableKeyStorePasswordABPSCase1.java</file>
    <line>21</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="21" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java">
      <code lineNo="16" finding="false">        pksp.go(choice);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public void go(int choice) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="20" finding="false">        String type = "JKS";</code>
      <code lineNo="21" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="22" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="23" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="24" finding="false">        if(choice&gt;1){</code>
      <code lineNo="25" finding="false">            SecureRandom random = new SecureRandom();</code>
      <code lineNo="26" finding="false">            defaultKey = String.valueOf(random.ints());</code>
    </node>
  </finding>


  <finding id="7h2qey20mukwf0xsf43170866" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordBBCase1</class>
    <file>PredictableKeyStorePasswordBBCase1.java</file>
    <line>20</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java">
      <code lineNo="15" finding="false">        pksp.go();</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="23" finding="false">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
    </node>
  </finding>


  <finding id="6triex7f8sp745oiz2a72akin" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordCorrected</class>
    <file>PredictableKeyStorePasswordCorrected.java</file>
    <line>20</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java">
      <code lineNo="15" finding="false">        pksp.go();</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="24" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="25" finding="false"></code>
    </node>
  </finding>


  <finding id="7jyc2w97xm9cgy34htyvjsdwf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase1</class>
    <file>StaticInitializationVectorABHCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase1.java">
      <code lineNo="10" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="11" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">public class StaticInitializationVectorABHCase1 {</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        byte [] bytes = "abcde".getBytes("UTF-8");</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="2diixzzinuevtb6rjcmkll2e7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase1</class>
    <file>StaticInitializationVectorABHCase1.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">public class StaticInitializationVectorABHCase1 {</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        byte [] bytes = "abcde".getBytes("UTF-8");</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="6zds876utrdtzkk4pkg0xkk7z" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase1</class>
    <file>StaticInitializationVectorABHCase1.java</file>
    <line>21</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="21" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase1.java">
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        byte [] bytes = "abcde".getBytes("UTF-8");</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {</code>
    </node>
  </finding>


  <finding id="20cvnyjr9usfeuojrn6f7wnz3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase2</class>
    <file>StaticInitializationVectorABHCase2.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase2.java">
      <code lineNo="11" finding="false">import java.util.HashMap;</code>
      <code lineNo="12" finding="false">import java.util.Map;</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">public class StaticInitializationVectorABHCase2 {</code>
      <code lineNo="15" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        String name = "abcdef";</code>
      <code lineNo="21" finding="false">        Map&lt;String,String&gt; hm = new HashMap&lt;String, String&gt;();</code>
    </node>
  </finding>


  <finding id="4wcpv8ieqmcjv2vzql2qec0nz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase2</class>
    <file>StaticInitializationVectorABHCase2.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase2.java">
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">public class StaticInitializationVectorABHCase2 {</code>
      <code lineNo="15" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        String name = "abcdef";</code>
      <code lineNo="21" finding="false">        Map&lt;String,String&gt; hm = new HashMap&lt;String, String&gt;();</code>
      <code lineNo="22" finding="false">        hm.put("aaa", "abcde");</code>
      <code lineNo="23" finding="false">        hm.put("bbb", "fghij");</code>
    </node>
  </finding>


  <finding id="3uley4gq0kfgshn4tbzh2pppb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase2</class>
    <file>StaticInitializationVectorABHCase2.java</file>
    <line>31</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase2.java">
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String str = hm.get("aaa");</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">        byte [] bytes = str.getBytes();</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false"></code>
      <code lineNo="36" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="2h4cjl94odvwnfvs0ojfl7kgv" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase1</class>
    <file>StaticInitializationVectorABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase1.java">
      <code lineNo="7" finding="false">import javax.crypto.spec.IvParameterSpec;</code>
      <code lineNo="8" finding="false">import java.security.*;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
    </node>
  </finding>


  <finding id="y1aos8yqp392qij39gskylb3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase1</class>
    <file>StaticInitializationVectorABICase1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase1.java">
      <code lineNo="8" finding="false">import java.security.*;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2vl9e9170uvmr6z06e9garsrj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase1</class>
    <file>StaticInitializationVectorABICase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase1.java">
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="6n7eqnn8rdwu4zrpgi9v7e53z" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase2</class>
    <file>StaticInitializationVectorABICase2.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase2.java">
      <code lineNo="12" finding="false">public class StaticInitializationVectorABICase2 {</code>
      <code lineNo="13" finding="false">    public static final String DEFAULT_INITIALIZATION = "abcde";</code>
      <code lineNo="14" finding="false">    private static char[] INITIALIZATION;</code>
      <code lineNo="15" finding="false">    private static char[] initialization;</code>
      <code lineNo="16" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="17" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(new byte[]{Byte.parseByte(String.valueOf(initialization))});</code>
      <code lineNo="18" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="19" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="20" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
    </node>
  </finding>


  <finding id="43nlq83snj52vg00g3nb3h8in" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase2</class>
    <file>StaticInitializationVectorABICase2.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase2.java">
      <code lineNo="13" finding="false">    public static final String DEFAULT_INITIALIZATION = "abcde";</code>
      <code lineNo="14" finding="false">    private static char[] INITIALIZATION;</code>
      <code lineNo="15" finding="false">    private static char[] initialization;</code>
      <code lineNo="16" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="17" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(new byte[]{Byte.parseByte(String.valueOf(initialization))});</code>
      <code lineNo="18" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="19" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="20" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="23" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2sop89wyh40yb2d1v7bwitopr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase2</class>
    <file>StaticInitializationVectorABICase2.java</file>
    <line>20</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase2.java">
      <code lineNo="15" finding="false">    private static char[] initialization;</code>
      <code lineNo="16" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="17" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(new byte[]{Byte.parseByte(String.valueOf(initialization))});</code>
      <code lineNo="18" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="19" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="20" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">    private static void go2(){</code>
      <code lineNo="25" finding="false">        INITIALIZATION = DEFAULT_INITIALIZATION.toCharArray();</code>
    </node>
  </finding>


  <finding id="jf3ci36u0id9z1s2t1c3yf6n" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase3</class>
    <file>StaticInitializationVectorABICase3.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase3.java">
      <code lineNo="7" finding="false">import javax.crypto.spec.IvParameterSpec;</code>
      <code lineNo="8" finding="false">import java.security.*;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase3 {</code>
      <code lineNo="11" finding="false">    public static void method2(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
    </node>
  </finding>


  <finding id="baphcwzq0ood8h80est0oo67" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase3</class>
    <file>StaticInitializationVectorABICase3.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase3.java">
      <code lineNo="8" finding="false">import java.security.*;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase3 {</code>
      <code lineNo="11" finding="false">    public static void method2(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5l9bwf4oo2jnwfubf934xq6hr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase3</class>
    <file>StaticInitializationVectorABICase3.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase3.java">
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase3 {</code>
      <code lineNo="11" finding="false">    public static void method2(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">    public static void method1 (byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="3ud3wm4zr1eravxjrvyy6l0m6" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABMC1</class>
    <file>StaticInitializationVectorABMC1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABMC1.java">
      <code lineNo="9" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="10" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">public class StaticInitializationVectorABMC1 {</code>
      <code lineNo="13" finding="false">    public void go(byte [] bytes) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {</code>
      <code lineNo="14" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
    </node>
  </finding>


  <finding id="1ht0lk4fbcdz3hziuha4pzfxa" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABMC1</class>
    <file>StaticInitializationVectorABMC1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABMC1.java">
      <code lineNo="10" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">public class StaticInitializationVectorABMC1 {</code>
      <code lineNo="13" finding="false">    public void go(byte [] bytes) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {</code>
      <code lineNo="14" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="20" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3cleqjf4tlpyu0hwfpkednivy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABMC1</class>
    <file>StaticInitializationVectorABMC1.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABMC1.java">
      <code lineNo="12" finding="false">public class StaticInitializationVectorABMC1 {</code>
      <code lineNo="13" finding="false">    public void go(byte [] bytes) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {</code>
      <code lineNo="14" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false">}</code>
    </node>
  </finding>


  <finding id="76k527mr0484hzla7y9vq5s9r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABPSCase1</class>
    <file>StaticInitializationVectorABPSCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java">
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false">import java.security.SecureRandom;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
    </node>
  </finding>


  <finding id="2x0elng19qf1afzyaf88hei5b" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABPSCase1</class>
    <file>StaticInitializationVectorABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        if(choice&gt;1){</code>
    </node>
  </finding>


  <finding id="qwpfsh1ujfh58mm9fj6cfjhb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABPSCase1</class>
    <file>StaticInitializationVectorABPSCase1.java</file>
    <line>24</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java">
      <code lineNo="19" finding="false">        if(choice&gt;1){</code>
      <code lineNo="20" finding="false">            bytes = new byte[16];</code>
      <code lineNo="21" finding="false">            sr.nextBytes(bytes);</code>
      <code lineNo="22" finding="false">        }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="5lqx3yqo8s4q4nl2fem5krpzy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorBBCase1</class>
    <file>StaticInitializationVectorBBCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorBBCase1.java">
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorBBCase1 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
    </node>
  </finding>


  <finding id="3gme11fjw4vm135jvfav0313y" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorBBCase1</class>
    <file>StaticInitializationVectorBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorBBCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorBBCase1 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="19" finding="false"></code>
    </node>
  </finding>


  <finding id="4yqvzqfas6pmy8nnct1dna8gu" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorBBCase1</class>
    <file>StaticInitializationVectorBBCase1.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorBBCase1.java">
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="u3ho171llzg3072u5d18eyxr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorCorrected</class>
    <file>StaticInitializationVectorCorrected.java</file>
    <line>39</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="39" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java">
      <code lineNo="34" finding="false">}</code>
      <code lineNo="35" finding="false">*/</code>
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">public class StaticInitializationVectorCorrected {</code>
      <code lineNo="38" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="39" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="40" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="41" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="42" finding="false"></code>
      <code lineNo="43" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="44" finding="false"></code>
    </node>
  </finding>


  <finding id="6fwzudkltetp0ywq7xh4ld2sf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorCorrected</class>
    <file>StaticInitializationVectorCorrected.java</file>
    <line>41</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="41" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java">
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">public class StaticInitializationVectorCorrected {</code>
      <code lineNo="38" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="39" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="40" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="41" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="42" finding="false"></code>
      <code lineNo="43" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="44" finding="false"></code>
      <code lineNo="45" finding="false">        byte [] bytes = new byte[16];</code>
      <code lineNo="46" finding="false">        sr.nextBytes(bytes);</code>
    </node>
  </finding>


  <finding id="2oly9yeyd33nzox8dzmjaje5b" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorCorrected</class>
    <file>StaticInitializationVectorCorrected.java</file>
    <line>48</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.IvParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
java.security.spec.**ParameterSpec(**)
]]></description>
    <node lineNo="48" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java">
      <code lineNo="43" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="44" finding="false"></code>
      <code lineNo="45" finding="false">        byte [] bytes = new byte[16];</code>
      <code lineNo="46" finding="false">        sr.nextBytes(bytes);</code>
      <code lineNo="47" finding="false"></code>
      <code lineNo="48" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="49" finding="false"></code>
      <code lineNo="50" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="51" finding="false">    }</code>
      <code lineNo="52" finding="false"></code>
      <code lineNo="53" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="717ilcnxlh9gz0uigzupes0ny" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>StaticSaltsABHCase1</class>
    <file>StaticSaltsABHCase1.java</file>
    <line>25</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.staticsalts.StaticSaltsABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsABHCase1.java">
      <code lineNo="20" finding="false">        byte b = hm.get("aaa");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="23" finding="false">        byte[] salt = {b,b};</code>
      <code lineNo="24" finding="false">        int count = 1020;</code>
      <code lineNo="25" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="26" finding="false">    }</code>
      <code lineNo="27" finding="false">}</code>
    </node>
  </finding>


  <finding id="6cbklgaqox0aawnvq1ytqmli6" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>StaticSaltsABICase1</class>
    <file>StaticSaltsABICase1.java</file>
    <line>16</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.staticsalts.StaticSaltsABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsABICase1.java">
      <code lineNo="11" finding="false">        cs.key2(salt,count);</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">    public void key2(byte[] salt, int count){</code>
      <code lineNo="15" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="16" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false">}</code>
    </node>
  </finding>


  <finding id="3h7bv1l883h7gszxglpvn5z6m" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>StaticSaltsABICase2</class>
    <file>StaticSaltsABICase2.java</file>
    <line>27</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="27" classFQN="org.cryptoapi.bench.staticsalts.StaticSaltsABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsABICase2.java">
      <code lineNo="22" finding="false">        salt = SALT;</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false"></code>
      <code lineNo="25" finding="false">    public void key2(int count){</code>
      <code lineNo="26" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="27" finding="true">        pbeParamSpec = new PBEParameterSpec(new byte[]{Byte.parseByte(salt.toString())}, count);</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
      <code lineNo="30" finding="false"></code>
    </node>
  </finding>


  <finding id="ait4ghgrcwyb73mp5hrl27of" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>StaticSaltsABICase3</class>
    <file>StaticSaltsABICase3.java</file>
    <line>18</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticsalts.StaticSaltsABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsABICase3.java">
      <code lineNo="13" finding="false">        method2(s,count2);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">    public static void method2(byte[] salt, int count){</code>
      <code lineNo="17" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="18" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">}</code>
    </node>
  </finding>


  <finding id="726dcvnxa73l31a95xnlt48da" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>StaticSaltsABMC1</class>
    <file>StaticSaltsABMC1.java</file>
    <line>8</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.staticsalts.StaticSaltsABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsABMC1.java">
      <code lineNo="3" finding="false">import javax.crypto.spec.PBEParameterSpec;</code>
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class StaticSaltsABMC1 {</code>
      <code lineNo="6" finding="false">    public void key2(byte[] salt, int count) {</code>
      <code lineNo="7" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="8" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="9" finding="false">    }</code>
      <code lineNo="10" finding="false">}</code>
    </node>
  </finding>


  <finding id="2jr2smd6wk32xfvdor6qfwk0u" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>StaticSaltsABPSCase1</class>
    <file>StaticSaltsABPSCase1.java</file>
    <line>19</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.staticsalts.StaticSaltsABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsABPSCase1.java">
      <code lineNo="14" finding="false">        SecureRandom sr2 = new SecureRandom();</code>
      <code lineNo="15" finding="false">        byte[] salt = {(byte) 0xa2};</code>
      <code lineNo="16" finding="false">        if(choice&gt;1)</code>
      <code lineNo="17" finding="false">            sr2.nextBytes(salt);</code>
      <code lineNo="18" finding="false">        int count = 1020;</code>
      <code lineNo="19" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false">}</code>
    </node>
  </finding>


  <finding id="572xljm1h0htso1rbytiud7i" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>StaticSaltsBBCase1</class>
    <file>StaticSaltsBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticsalts.StaticSaltsBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsBBCase1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void key2(){</code>
      <code lineNo="12" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="13" finding="false">        byte[] salt = {(byte) 0xa2};</code>
      <code lineNo="14" finding="false">        int count = 1020;</code>
      <code lineNo="15" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3flncrz3hw4wojr15d8uzyafy" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms Used in Project</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProject</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>0.00</rating>
    <classification>Information</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticsalts</package>
    <class>StaticSaltsCorrected</class>
    <file>StaticSaltsCorrected.java</file>
    <line>17</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms Used in Project'.
Declared in: javax.crypto.spec.PBEParameterSpec

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms Used in Project':
javax.crypto.spec.**ParameterSpec(**, **)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticsalts.StaticSaltsCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticsalts/StaticSaltsCorrected.java">
      <code lineNo="12" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="13" finding="false">        PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="14" finding="false">        byte[] salt = new byte[32];</code>
      <code lineNo="15" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="16" finding="false">        int count = 1020;</code>
      <code lineNo="17" finding="true">        pbeParamSpec = new PBEParameterSpec(salt, count);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </node>
  </finding>


  <finding id="dve979bbgz0y9jj38y7o0yu7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase1</class>
    <file>BrokenCryptoABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String keyAlgo) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(keyAlgo);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="3v1evbbpefazjt1rujfj9b23j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase1</class>
    <file>BrokenCryptoABICase1.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String keyAlgo) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(keyAlgo);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase1 bc = new BrokenCryptoABICase1();</code>
    </node>
  </finding>


  <finding id="mv1d51abn8zqiy343so7mmvz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase10</class>
    <file>BrokenCryptoABICase10.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase10.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase10 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "IDEA";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="1vwoigx8q8t1rwds40j4olu8v" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase10</class>
    <file>BrokenCryptoABICase10.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase10.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5vnmrg9kvh6rxk5fvo3u3cs4g" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase11</class>
    <file>BrokenCryptoABICase11.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase11.java">
      <code lineNo="11" finding="false">    public static void method2(String c, String key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo,key);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto,String cryptoKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="7b2fpvt0ww39u4vzmhbwat10g" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase11</class>
    <file>BrokenCryptoABICase11.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase11.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo,key);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto,String cryptoKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false">        String key = "DES";</code>
    </node>
  </finding>


  <finding id="5aytve92tdefmcr4tw1jc29gg" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase12</class>
    <file>BrokenCryptoABICase12.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase12.java">
      <code lineNo="10" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="12" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="xuv5ibx0q5uv6wvtj1zc6h5s" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase12</class>
    <file>BrokenCryptoABICase12.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase12.java">
      <code lineNo="12" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="2zu8ylq6jl0k8fyzl7087v2ao" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase13</class>
    <file>BrokenCryptoABICase13.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase13.java">
      <code lineNo="12" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="14" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="17" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="19" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="20" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="62yjpmdn9sxjs5y3uazevh6xs" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase13</class>
    <file>BrokenCryptoABICase13.java</file>
    <line>19</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase13.java">
      <code lineNo="14" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="17" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="18" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="19" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="20" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="24" finding="false">        String crypto = "RC4";</code>
    </node>
  </finding>


  <finding id="3pix55x213vy3dncag2oaaogw" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase14</class>
    <file>BrokenCryptoABICase14.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase14.java">
      <code lineNo="11" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="4d5ypeendpx4tog770uylbza8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase14</class>
    <file>BrokenCryptoABICase14.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase14.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false"></code>
    </node>
  </finding>


  <finding id="3mxym7w9izhbppot0rt271ly8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase15</class>
    <file>BrokenCryptoABICase15.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase15.java">
      <code lineNo="11" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="4z3kzq2kfw64gpnsugtnlj5nk" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase15</class>
    <file>BrokenCryptoABICase15.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase15.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false"></code>
    </node>
  </finding>


  <finding id="7fpkzlow1op4xj1xf4g3ncndr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase2</class>
    <file>BrokenCryptoABICase2.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="5zwff79p9hv9ssg88efhahxzz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase2</class>
    <file>BrokenCryptoABICase2.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase2 bc = new BrokenCryptoABICase2();</code>
    </node>
  </finding>


  <finding id="4t7pnvukbfen3wboox2xpwiu7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase3</class>
    <file>BrokenCryptoABICase3.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="7e83l8od8sbed58ni4h3myijj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase3</class>
    <file>BrokenCryptoABICase3.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase3 bc = new BrokenCryptoABICase3();</code>
    </node>
  </finding>


  <finding id="29v92jddo5iejrlsj4539u734" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase4</class>
    <file>BrokenCryptoABICase4.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="31gimztgy0itnzcaun3vdogv4" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase4</class>
    <file>BrokenCryptoABICase4.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase4 bc = new BrokenCryptoABICase4();</code>
    </node>
  </finding>


  <finding id="2ymqd6o8idno8tw5zyhlkxffj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase5</class>
    <file>BrokenCryptoABICase5.java</file>
    <line>20</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase5.java">
      <code lineNo="15" finding="false">    public static final String DEFAULT_CRYPTO_ALGO = "DES";</code>
      <code lineNo="16" finding="false">    private static char[] CRYPTO_ALGO;</code>
      <code lineNo="17" finding="false">    private static char[] crypto_algo;</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto_algo));</code>
      <code lineNo="21" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="22" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="12f321xrh0m299c8liibglzrz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase5</class>
    <file>BrokenCryptoABICase5.java</file>
    <line>22</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase5.java">
      <code lineNo="17" finding="false">    private static char[] crypto_algo;</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto_algo));</code>
      <code lineNo="21" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="22" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false">    private static void go2(){</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
    </node>
  </finding>


  <finding id="m6ah3zn30d8e3gu60xgadr34" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase6</class>
    <file>BrokenCryptoABICase6.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase6.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase6 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "Blowfish";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="3d9y4663t15ypp9ogx6xf4hgg" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase6</class>
    <file>BrokenCryptoABICase6.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase6.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5ovlw3h6nfc1jpm6sn1m2frrz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase7</class>
    <file>BrokenCryptoABICase7.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase7.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase7 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "RC4";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="a4h5p1nkvcudmlwximbeezbz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase7</class>
    <file>BrokenCryptoABICase7.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase7.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="zdp2v017gjzeicoa1pakx55s" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase8</class>
    <file>BrokenCryptoABICase8.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase8.java">
      <code lineNo="10" finding="false">public class BrokenCryptoABICase8 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "RC2";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="4hym18kyd36wgs4lad4twwkm8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase8</class>
    <file>BrokenCryptoABICase8.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase8.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(String.valueOf(crypto));</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="60bxvmx59ywh5qfqeqsow2b1b" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase9</class>
    <file>BrokenCryptoABICase9.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase9.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase9 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="xsoefyhmadnq7h31yyrvb78f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABICase9</class>
    <file>BrokenCryptoABICase9.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABICase9.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABICase9 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoABICase9 bc = new BrokenCryptoABICase9();</code>
    </node>
  </finding>


  <finding id="4k1h8yjfrdl1aktc13yypia1r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC1</class>
    <file>BrokenCryptoABMC1.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String cryptoKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3wt6u52lahdfrmu6gqvd9tg7z" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC1</class>
    <file>BrokenCryptoABMC1.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto, String cryptoKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(cryptoKey);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="2qh48mei40wlqdgqzp0eip2sg" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC2</class>
    <file>BrokenCryptoABMC2.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="4nfmacc4mgvlkkwd7zelqz2ao" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC2</class>
    <file>BrokenCryptoABMC2.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC2 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="7gaqoiajizezj8u9pv2joim3j" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC3</class>
    <file>BrokenCryptoABMC3.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="7izt1d9ulrljas7ss1jgq8x9b" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC3</class>
    <file>BrokenCryptoABMC3.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC3 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3o1slan2qg63anz80bryp7nmo" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC4</class>
    <file>BrokenCryptoABMC4.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3t30b02lrg0ae9lgk09c9ok0w" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC4</class>
    <file>BrokenCryptoABMC4.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC4 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="53yz9r6oz7xjjntzziolw9kkg" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC5</class>
    <file>BrokenCryptoABMC5.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC5.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC5 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="51kvwravxt5nwjnlj0pavkyu8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABMC5</class>
    <file>BrokenCryptoABMC5.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABMC5.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABMC5 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(crypto);</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="4pcjjdx4nfhvq0lmfy8msastc" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="1ib67msnabw943coge1n0xug0" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6osrbtl46l5r124zlbes931pc" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="1im4vi00dl0ylkra7177qb1wf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>11</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="6" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase2 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
    </node>
  </finding>


  <finding id="4sluod720lbye9jg03hnji44f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase2 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="1tgimkv1blkg3dtk1xln4swnz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="spg2qrf9p7pqkoyfa2n6o8rj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase3 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="6gzubmf7flbeo2pfdg7sn7srj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase3 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6yjxcuv7l1bwvwksuilewlr33" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="1wd4endrwxdad4zg3aog3o8kf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase4 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="6hhir19ah5xrsqumj5s7kmxr3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase4 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3d2y9zh53qyjmaz5w3ged23q7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="20f5nu5k8j6rkpch84ybt2s7z" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>11</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="6" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase5 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
    </node>
  </finding>


  <finding id="6aeu8j3fv88xtvv2cc64yxt9b" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase5 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4m2j7sdjv43otpyu6n7sg0acf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="dnw7k9s56iw2kg14w51fi9nj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="1mriuqmz4t54h9q3wwqalqwkf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="35a850q9ij0c17wqcfcyijdcw" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase2</class>
    <file>BrokenCryptoBBCase2.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase2.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase2 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="48ujdv9fapsu5muzyul6pia1s" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase2</class>
    <file>BrokenCryptoBBCase2.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase2 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase2 bc = new BrokenCryptoBBCase2();</code>
    </node>
  </finding>


  <finding id="4zv5nxud9neuza24my9e3lqhs" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase3</class>
    <file>BrokenCryptoBBCase3.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase3.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase3 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("RC4");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="6jqlravewllp6xduemj1l17c0" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase3</class>
    <file>BrokenCryptoBBCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase3 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("RC4");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase3 bc = new BrokenCryptoBBCase3();</code>
    </node>
  </finding>


  <finding id="295haaewdp7685busuoc3jeqn" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase4</class>
    <file>BrokenCryptoBBCase4.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase4.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase4 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("RC2");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="1xbutswkpattmkzlan4f1bgbj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase4</class>
    <file>BrokenCryptoBBCase4.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase4 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("RC2");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase4 bc = new BrokenCryptoBBCase4();</code>
    </node>
  </finding>


  <finding id="35l1p84wcles28f3gvcbsv8f3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase5</class>
    <file>BrokenCryptoBBCase5.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase5.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase5 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("IDEA");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="2kzuesfbak5rgqdd8fodsmrfj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase5</class>
    <file>BrokenCryptoBBCase5.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase5.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase5 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("IDEA");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase5 bc = new BrokenCryptoBBCase5();</code>
    </node>
  </finding>


  <finding id="26lceauy72amzwgc9wfrfnhpc" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoCorrected</class>
    <file>BrokenCryptoCorrected.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoCorrected.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="4u00e3qttdkakvhxs2dom99c" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoCorrected</class>
    <file>BrokenCryptoCorrected.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoCorrected.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="5vab8wrbc1v6d5f540didf9sw" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase1</class>
    <file>BrokenHashABICase1.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase1.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "SHA1";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="2bn7vz8dujxeeogab89j4v3og" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase10</class>
    <file>BrokenHashABICase10.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase10" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase10.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="1or2po4edojne2gz9ngpv1l5s" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase11</class>
    <file>BrokenHashABICase11.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase11" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase11.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="6jrm9lh6n2z4bzjo580i39eo" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase12</class>
    <file>BrokenHashABICase12.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase12" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase12.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="4lzhbrq0tg18m8vpwzus5kmlc" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase2</class>
    <file>BrokenHashABICase2.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase2.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD5";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="ve2apjdlobjtgn8e3vgwzkv3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase3</class>
    <file>BrokenHashABICase3.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase3.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD4";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="2d6mur8vuwau1v12o9v9whaov" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase4</class>
    <file>BrokenHashABICase4.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase4.java">
      <code lineNo="8" finding="false">        String str = "abcdef";</code>
      <code lineNo="9" finding="false">        String crypto = "MD2";</code>
      <code lineNo="10" finding="false">        go(str,crypto);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">    public static void go (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="13" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="14" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="15" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="3fxlqywqnenyugnas62ala1r3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase5</class>
    <file>BrokenHashABICase5.java</file>
    <line>25</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase5.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="4o6ux9moip8izu9d63uejkuvz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase6</class>
    <file>BrokenHashABICase6.java</file>
    <line>25</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase6.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="45mcil0wl9bbjtfqs0xwj41nk" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase7</class>
    <file>BrokenHashABICase7.java</file>
    <line>25</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase7" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase7.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="40teug6xjdyf8sv702es81h0f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase8</class>
    <file>BrokenHashABICase8.java</file>
    <line>25</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase8" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase8.java">
      <code lineNo="20" finding="false">    private static void go3(){</code>
      <code lineNo="21" finding="false">        crypto = CRYPTO;</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">    public static void go (String str) throws NoSuchAlgorithmException {</code>
      <code lineNo="25" finding="true">        MessageDigest md = MessageDigest.getInstance(String.valueOf(crypto));</code>
      <code lineNo="26" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="27" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="5oq50g2zspzlgodyvpn04wkm8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABICase9</class>
    <file>BrokenHashABICase9.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABICase9" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABICase9.java">
      <code lineNo="13" finding="false">        String str2 = s;</code>
      <code lineNo="14" finding="false">        String hashAlgo = cryptoHash;</code>
      <code lineNo="15" finding="false">        method1(str2,hashAlgo);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">    public static void method1 (String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="18" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="20" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="5wc9b0d9xhysf4b5e0u7wkxun" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC1</class>
    <file>BrokenHashABMC1.java</file>
    <line>8</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC1.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC1 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="4ffwlbelqh6j8f7llh6d2mq8w" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC2</class>
    <file>BrokenHashABMC2.java</file>
    <line>8</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC2.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC2 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="5851zw0bua60si2zwv19kjzvj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC3</class>
    <file>BrokenHashABMC3.java</file>
    <line>8</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC3.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC3 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="1e221kg0tx2iuvpvaiyvstx0f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABMC4</class>
    <file>BrokenHashABMC4.java</file>
    <line>8</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABMC4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABMC4.java">
      <code lineNo="3" finding="false">import java.security.MessageDigest;</code>
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashABMC4 {</code>
      <code lineNo="7" finding="false">    public void go(String str, String crypto) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="9" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="10" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="rawwbqi1z7nzozgx6rd7ydlr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase1</class>
    <file>BrokenHashABPSCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase1.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase1 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4qf7ue9tnp2gaq4sbhprg5xen" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase1</class>
    <file>BrokenHashABPSCase1.java</file>
    <line>11</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase1.java">
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="true">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="5dhjwhraxeu4132enx2t4te1r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase2</class>
    <file>BrokenHashABPSCase2.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase2.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase2 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="7hjkun04tf3i6bxqpbihrj61r" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase2</class>
    <file>BrokenHashABPSCase2.java</file>
    <line>11</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase2.java">
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="true">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="6cs2trtr1a9114u31uqtx1ba7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase3</class>
    <file>BrokenHashABPSCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase3.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase3 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6f6nolev12jz8q2jr3q10lljz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase3</class>
    <file>BrokenHashABPSCase3.java</file>
    <line>11</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase3.java">
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="true">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="23my3oa0fr09tsgssk3dn7lnj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase4</class>
    <file>BrokenHashABPSCase4.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase4.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase4 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6f29hqim1ekdozgg5tj83nsrj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase4</class>
    <file>BrokenHashABPSCase4.java</file>
    <line>11</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase4.java">
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="true">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="6ji9gvwobh1jq012usy3nnplr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase1</class>
    <file>BrokenHashBBCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase1.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase1 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="8g5wgu07bmyps7r6vsflxtgf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase2</class>
    <file>BrokenHashBBCase2.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase2.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase2 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="1pntkf0ljrssiqwk7wq4kbq7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase3</class>
    <file>BrokenHashBBCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase3.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase3 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="97mu745nuoifumol7dd63ty7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase4</class>
    <file>BrokenHashBBCase4.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase4.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase4 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="5v84lglp4femnwwz9tdss84f3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashCorrected</class>
    <file>BrokenHashCorrected.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashCorrected.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashCorrected {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) {</code>
      <code lineNo="8" finding="false">        try {</code>
      <code lineNo="9" finding="true">            MessageDigest md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="10" finding="false">        } catch (NoSuchAlgorithmException e) {</code>
      <code lineNo="11" finding="false">            e.printStackTrace();</code>
      <code lineNo="12" finding="false">        }</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">}</code>
    </node>
  </finding>


  <finding id="6ndqt0becp77tvxrd5gapwbq8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>Crypto</class>
    <file>Crypto.java</file>
    <line>40</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="40" classFQN="org.cryptoapi.bench.predictablecryptographickey.Crypto" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyABSCase1.java">
      <code lineNo="35" finding="false">    Cipher cipher;</code>
      <code lineNo="36" finding="false">    String algoSpec = "AES/CBC/PKCS5Padding";</code>
      <code lineNo="37" finding="false">    String algo = "AES";</code>
      <code lineNo="38" finding="false">    String defaultKey;</code>
      <code lineNo="39" finding="false">    public Crypto(String defkey) throws NoSuchPaddingException, NoSuchAlgorithmException {</code>
      <code lineNo="40" finding="true">        cipher = Cipher.getInstance(algoSpec);</code>
      <code lineNo="41" finding="false">        defaultKey = defkey;</code>
      <code lineNo="42" finding="false">    }</code>
      <code lineNo="43" finding="false"></code>
      <code lineNo="44" finding="false">    public byte[] method1(String txt, String key) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {</code>
      <code lineNo="45" finding="false">        if(key.isEmpty()){</code>
    </node>
  </finding>


  <finding id="3u0bw6cn722m1a0xq337u2ycg" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto2</class>
    <file>Crypto2.java</file>
    <line>28</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="28" classFQN="org.cryptoapi.bench.brokencrypto.Crypto2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase1.java">
      <code lineNo="23" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="24" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="quxjo86eflgovfvl6crtoqcg" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto2</class>
    <file>Crypto2.java</file>
    <line>30</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="30" classFQN="org.cryptoapi.bench.brokencrypto.Crypto2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase1.java">
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="34" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="35" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2pstaxz6f4opwgemuz23zg9r4" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto3</class>
    <file>Crypto3.java</file>
    <line>28</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="28" classFQN="org.cryptoapi.bench.brokencrypto.Crypto3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase2.java">
      <code lineNo="23" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="24" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="5jmx2mbf2m0z8gefabcjn5z6o" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto3</class>
    <file>Crypto3.java</file>
    <line>30</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="30" classFQN="org.cryptoapi.bench.brokencrypto.Crypto3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase2.java">
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="34" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="35" finding="false">    }</code>
    </node>
  </finding>


  <finding id="34ud4i1h976ebdy5ksw4klf8g" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto4</class>
    <file>Crypto4.java</file>
    <line>28</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="28" classFQN="org.cryptoapi.bench.brokencrypto.Crypto4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase3.java">
      <code lineNo="23" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="24" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="6iwjmqs76wedmspsyzbq3wvvk" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto4</class>
    <file>Crypto4.java</file>
    <line>30</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="30" classFQN="org.cryptoapi.bench.brokencrypto.Crypto4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase3.java">
      <code lineNo="25" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="26" finding="false">        }</code>
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="29" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="30" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="31" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="34" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="35" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2k8hr3mvuelljqnur2io1giu8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto5</class>
    <file>Crypto5.java</file>
    <line>29</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="29" classFQN="org.cryptoapi.bench.brokencrypto.Crypto5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase4.java">
      <code lineNo="24" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="25" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="26" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="30" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="31" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="32" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="78o4pseji39bds23qvz38ajc0" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto5</class>
    <file>Crypto5.java</file>
    <line>31</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokencrypto.Crypto5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase4.java">
      <code lineNo="26" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="30" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="31" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="32" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="35" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="36" finding="false">    }</code>
    </node>
  </finding>


  <finding id="7049yjlgjvgho17f2p2jsfs68" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto6</class>
    <file>Crypto6.java</file>
    <line>29</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="29" classFQN="org.cryptoapi.bench.brokencrypto.Crypto6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase5.java">
      <code lineNo="24" finding="false">    public byte[] encrypt(String txt, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="25" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="26" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="30" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="31" finding="false">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="32" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        byte [] txtBytes = txt.getBytes();</code>
    </node>
  </finding>


  <finding id="13cd38db4i3pbh4axm8sfjp0g" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>Crypto6</class>
    <file>Crypto6.java</file>
    <line>31</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokencrypto.Crypto6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABSCase5.java">
      <code lineNo="26" finding="false">            passedAlgo = defaultAlgo;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance(defaultAlgo);</code>
      <code lineNo="30" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="31" finding="true">        Cipher cipher = Cipher.getInstance(defaultAlgo);</code>
      <code lineNo="32" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        byte [] txtBytes = txt.getBytes();</code>
      <code lineNo="35" finding="false">        return cipher.doFinal(txtBytes);</code>
      <code lineNo="36" finding="false">    }</code>
    </node>
  </finding>


  <finding id="7iuzt1b6gife877av98k4y5i8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>CryptoECB1</class>
    <file>CryptoECB1.java</file>
    <line>32</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="32" classFQN="org.cryptoapi.bench.ecbcrypto.CryptoECB1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABSCase1.java">
      <code lineNo="27" finding="false"></code>
      <code lineNo="28" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="29" finding="false">            passedAlgo = defAlgo;</code>
      <code lineNo="30" finding="false">        }</code>
      <code lineNo="31" finding="false"></code>
      <code lineNo="32" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="33" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="34" finding="false">        Cipher cipher = Cipher.getInstance(passedAlgo);</code>
      <code lineNo="35" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4sxb5uhydfkqi8tzmgqkl9h7k" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>CryptoECB1</class>
    <file>CryptoECB1.java</file>
    <line>34</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="34" classFQN="org.cryptoapi.bench.ecbcrypto.CryptoECB1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABSCase1.java">
      <code lineNo="29" finding="false">            passedAlgo = defAlgo;</code>
      <code lineNo="30" finding="false">        }</code>
      <code lineNo="31" finding="false"></code>
      <code lineNo="32" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="33" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="34" finding="true">        Cipher cipher = Cipher.getInstance(passedAlgo);</code>
      <code lineNo="35" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">    }</code>
      <code lineNo="38" finding="false">}</code>
    </node>
  </finding>


  <finding id="57ayr943222qcpe5zizyi7vc0" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>CryptoHash1</class>
    <file>CryptoHash1.java</file>
    <line>29</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="29" classFQN="org.cryptoapi.bench.brokenhash.CryptoHash1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABSCase1.java">
      <code lineNo="24" finding="false">    public void encrypt(String str, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="25" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="26" finding="false">            passedAlgo = crypto;</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="30" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="31" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">    }</code>
      <code lineNo="34" finding="false">}</code>
    </node>
  </finding>


  <finding id="4qryrlsslxgw4hm1gaq30zlnk" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>CryptoHash2</class>
    <file>CryptoHash2.java</file>
    <line>31</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokenhash.CryptoHash2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABSCase2.java">
      <code lineNo="26" finding="false">    public void encrypt(String str, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="27" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="28" finding="false">            passedAlgo = crypto;</code>
      <code lineNo="29" finding="false">        }</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="32" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="33" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="34" finding="false"></code>
      <code lineNo="35" finding="false">    }</code>
      <code lineNo="36" finding="false">}</code>
    </node>
  </finding>


  <finding id="2n1et5l5ubjuglv1hl84plkkg" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>CryptoHash3</class>
    <file>CryptoHash3.java</file>
    <line>31</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokenhash.CryptoHash3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABSCase3.java">
      <code lineNo="26" finding="false">    public void encrypt(String str, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="27" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="28" finding="false">            passedAlgo = crypto;</code>
      <code lineNo="29" finding="false">        }</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="32" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="33" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="34" finding="false"></code>
      <code lineNo="35" finding="false">    }</code>
      <code lineNo="36" finding="false">}</code>
    </node>
  </finding>


  <finding id="10xoro9qhcpsdu1x4kwdz1h7k" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>CryptoHash4</class>
    <file>CryptoHash4.java</file>
    <line>31</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.MessageDigest

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.brokenhash.CryptoHash4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABSCase4.java">
      <code lineNo="26" finding="false">    public void encrypt(String str, String passedAlgo) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="27" finding="false">        if(passedAlgo.isEmpty()){</code>
      <code lineNo="28" finding="false">            passedAlgo = crypto;</code>
      <code lineNo="29" finding="false">        }</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="true">        MessageDigest md = MessageDigest.getInstance(crypto);</code>
      <code lineNo="32" finding="false">        md.update(str.getBytes());</code>
      <code lineNo="33" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="34" finding="false"></code>
      <code lineNo="35" finding="false">    }</code>
      <code lineNo="36" finding="false">}</code>
    </node>
  </finding>


  <finding id="2n1cpe1ou0kzdj1xz3suilkdc" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>CryptoPredictableKeyStorePassword1</class>
    <file>CryptoPredictableKeyStorePassword1.java</file>
    <line>32</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="32" classFQN="org.cryptoapi.bench.predictablekeystorepassword.CryptoPredictableKeyStorePassword1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABSCase1.java">
      <code lineNo="27" finding="false">    public void method1(String passedKey) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">        passedKey = defKey;</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        String type = "JKS";</code>
      <code lineNo="32" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="33" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="34" finding="false">        ks.load(cacerts.openStream(), passedKey.toCharArray());</code>
      <code lineNo="35" finding="false">    }</code>
      <code lineNo="36" finding="false">}</code>
    </node>
  </finding>


  <finding id="6yalqnb1lgegvprx7n9xshbhc" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>CryptoStaticIV1</class>
    <file>CryptoStaticIV1.java</file>
    <line>33</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="33" classFQN="org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABSCase1.java">
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    public void method1(byte[] passedIV) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        passedIV = defIV;</code>
      <code lineNo="32" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(passedIV);</code>
      <code lineNo="33" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="34" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="35" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="36" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="37" finding="false"></code>
      <code lineNo="38" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6jxhzv070f6mdtj62a66whmjk" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>CryptoStaticIV1</class>
    <file>CryptoStaticIV1.java</file>
    <line>35</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="35" classFQN="org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABSCase1.java">
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        passedIV = defIV;</code>
      <code lineNo="32" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(passedIV);</code>
      <code lineNo="33" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="34" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="35" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="36" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="37" finding="false"></code>
      <code lineNo="38" finding="false">    }</code>
      <code lineNo="39" finding="false">}</code>
      <code lineNo="40" finding="false"></code>
    </node>
  </finding>


  <finding id="w894soj5tbpbqo5my69v0cww" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase1</class>
    <file>EcbInSymmCryptoABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase1.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="30puwwz40snl70z11qc4cz5uo" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase1</class>
    <file>EcbInSymmCryptoABICase1.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoABICase1 bc = new EcbInSymmCryptoABICase1();</code>
    </node>
  </finding>


  <finding id="3ajsy0hkenw3nmj98iw218ehr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase2</class>
    <file>EcbInSymmCryptoABICase2.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase2.java">
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABICase2 {</code>
      <code lineNo="11" finding="false">    public static final String DEFAULT_CRYPTO = "AES/ECB/PKCS5Padding";</code>
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
    </node>
  </finding>


  <finding id="4xcvlzwzbzi4ssl44a0ca1aan" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase2</class>
    <file>EcbInSymmCryptoABICase2.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase2.java">
      <code lineNo="12" finding="false">    private static char[] CRYPTO;</code>
      <code lineNo="13" finding="false">    private static char[] crypto;</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance(String.valueOf(crypto));</code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">    private static void go2(){</code>
      <code lineNo="21" finding="false">        CRYPTO = DEFAULT_CRYPTO.toCharArray();</code>
      <code lineNo="22" finding="false">    }</code>
    </node>
  </finding>


  <finding id="1gvcw4rmaktstj1syupqabrz4" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase3</class>
    <file>EcbInSymmCryptoABICase3.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase3.java">
      <code lineNo="11" finding="false">    public static void method2(String c) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        String cryptoAlgo = c;</code>
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
    </node>
  </finding>


  <finding id="ox3tsqt2s12nhnlopcm1ezj4" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABICase3</class>
    <file>EcbInSymmCryptoABICase3.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABICase3.java">
      <code lineNo="13" finding="false">        method1(cryptoAlgo);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    public static void method1(String crypto) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="23" finding="false">        String crypto = "AES/ECB/PKCS5Padding";</code>
    </node>
  </finding>


  <finding id="5w7wq3qrr2w0w3a0g6vtp7xwf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABMC1</class>
    <file>EcbInSymmCryptoABMC1.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABMC1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABMC1 {</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false">}</code>
    </node>
  </finding>


  <finding id="1sue7dch6138nh5zday7hj3a7" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABMC1</class>
    <file>EcbInSymmCryptoABMC1.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABMC1.java">
      <code lineNo="10" finding="false">public class EcbInSymmCryptoABMC1 {</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">    public void go(String crypto) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance(crypto);</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false">}</code>
    </node>
  </finding>


  <finding id="2qzuym129d4218acbt4igtx0f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>11</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="6" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoABPSCase1 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
    </node>
  </finding>


  <finding id="69etn4q3o0w7kcbj6jhfgyzj4" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoABPSCase1 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="63k6ci8nl4tqk530usitz2ctc" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        EcbInSymmCryptoABPSCase1 bc = new EcbInSymmCryptoABPSCase1();</code>
    </node>
  </finding>


  <finding id="1yn2yz16cri12jpwve5z14yfz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoBBCase1</class>
    <file>EcbInSymmCryptoBBCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoBBCase1.java">
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoBBCase1 {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="3ycbmu5548hpe576fm1jllpb3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoBBCase1</class>
    <file>EcbInSymmCryptoBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoBBCase1.java">
      <code lineNo="9" finding="false">public class EcbInSymmCryptoBBCase1 {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="6b5588f2ev16hgkk9cqvj9rvk" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoCorrected</class>
    <file>EcbInSymmCryptoCorrected.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoCorrected.java">
      <code lineNo="7" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="3urc220wh388q6yjr7mncth7k" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoCorrected</class>
    <file>EcbInSymmCryptoCorrected.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoCorrected.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="4j4ozdiz5bp6khd6vw3qd7jog" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="7" finding="false">import java.security.KeyPairGenerator;</code>
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class InsecureAsymmetricCipherABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(int keySize) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="12" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="13" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="14" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
    </node>
  </finding>


  <finding id="6ew9auzk2q535myk1cwnjdmxs" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="11" finding="false">    public void go(int keySize) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="12" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="13" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="14" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="6a8k05nd0ed0i6eou3480d0m8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>24</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //decrypting</code>
      <code lineNo="24" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="25" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="28" finding="false">        System.out.println(message);</code>
      <code lineNo="29" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2np7bxy6u18u5u28neoo6pmjj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="11" finding="false">    public static final int DEFAULT_KEY_SIZE = 1024;</code>
      <code lineNo="12" finding="false">    private static int KEY_SIZE;</code>
      <code lineNo="13" finding="false">    private static int keysize;</code>
      <code lineNo="14" finding="false">    public void go(KeyPairGenerator kgp, KeyPair kp) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="1kfonrdmbri7b01kx11nkm5b3" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>24</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="19" finding="false">        //encrypting</code>
      <code lineNo="20" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="21" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //decrypting</code>
      <code lineNo="24" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="25" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="28" finding="false">        System.out.println(message);</code>
      <code lineNo="29" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6ft9c9r3z5iofjdpb4c8qwjfj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>41</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="41" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="38" finding="false">        InsecureAsymmetricCipherABICase2 bc = new InsecureAsymmetricCipherABICase2();</code>
      <code lineNo="39" finding="false">        go2();</code>
      <code lineNo="40" finding="false">        go3();</code>
      <code lineNo="41" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="42" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="43" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="44" finding="false">        bc.go(kgp,kp);</code>
      <code lineNo="45" finding="false">    }</code>
      <code lineNo="46" finding="false"></code>
    </node>
  </finding>


  <finding id="ic3omsvwhz7d93jutx34szts" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="13" finding="false">        method1(keySize);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">    public static void method1(int key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="19" finding="false">        kgp.initialize(key);</code>
      <code lineNo="20" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
    </node>
  </finding>


  <finding id="fbm3pluin1jhet07ykqztgm8" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>23</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="18" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="19" finding="false">        kgp.initialize(key);</code>
      <code lineNo="20" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="24" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        //encrypting</code>
      <code lineNo="27" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="28" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="40lggzg72qqtcgxbl64pfv68w" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>31</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="26" finding="false">        //encrypting</code>
      <code lineNo="27" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="28" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="29" finding="false"></code>
      <code lineNo="30" finding="false">        //decrypting</code>
      <code lineNo="31" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="32" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="35" finding="false">        System.out.println(message);</code>
      <code lineNo="36" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2i0vswnr4l6xwitpady7fo0nz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class InsecureAsymmetricCipherABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(int keySize) throws IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="5yo7jdxjdr89vbxbwb3ze34nz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="11" finding="false">    public void go(int keySize) throws IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        //encrypting</code>
    </node>
  </finding>


  <finding id="22l1c0d05mbfsmrk1wmj8xg7z" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="false">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        //encrypting</code>
      <code lineNo="22" finding="false">        String myMessage = new String("Secret Message");</code>
    </node>
  </finding>


  <finding id="32cigyhw9j6vfh1i0db3gpy00" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABPSCase1</class>
    <file>InsecureAsymmetricCipherABPSCase1.java</file>
    <line>8</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABPSCase1.java">
      <code lineNo="3" finding="false">import java.io.IOException;</code>
      <code lineNo="4" finding="false">import java.security.*;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class InsecureAsymmetricCipherABPSCase1 {</code>
      <code lineNo="7" finding="false">    public void go(int choice) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="8" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">        int keysize;</code>
      <code lineNo="11" finding="false">        if (choice&gt;1)</code>
      <code lineNo="12" finding="false">            keysize = 2048;</code>
      <code lineNo="13" finding="false">        else</code>
    </node>
  </finding>


  <finding id="4cdw2cohwrc22erafhhy4dqow" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABPSCase1</class>
    <file>InsecureAsymmetricCipherABPSCase1.java</file>
    <line>20</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABPSCase1.java">
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="17" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="21" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        //encrypting</code>
      <code lineNo="24" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="25" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="3rkv1ps3br1n33uoamp5f2dlr" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyPairGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="4" finding="false">import java.io.IOException;</code>
      <code lineNo="5" finding="false">import java.security.*;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class InsecureAsymmetricCipherBBCase1 {</code>
      <code lineNo="8" finding="false">    public void go() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="9" finding="true">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="10" finding="false">        int keysize = 1024;</code>
      <code lineNo="11" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="12" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false"></code>
    </node>
  </finding>


  <finding id="2y8peuehnrou58ds3mdw1tffj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="10" finding="false">        int keysize = 1024;</code>
      <code lineNo="11" finding="false">        kgp.initialize(keysize);</code>
      <code lineNo="12" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        //encrypting</code>
      <code lineNo="19" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="20" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
    </node>
  </finding>


  <finding id="6nb5f8poicahlubzunvkj44tb" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>23</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="23" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="18" finding="false">        //encrypting</code>
      <code lineNo="19" finding="false">        String myMessage = new String("Secret Message");</code>
      <code lineNo="20" finding="false">        SealedObject encryptedMessage = new SealedObject(myMessage,cipher);</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        //decrypting</code>
      <code lineNo="23" finding="true">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="24" finding="false">        dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        String message = (String) encryptedMessage.getObject(dec);</code>
      <code lineNo="27" finding="false">        System.out.println(message);</code>
      <code lineNo="28" finding="false">    }</code>
    </node>
  </finding>


  <finding id="767bpdtg0ftg1v5a5cpsayk4f" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>PredictableCryptographicKeyCorrected</class>
    <file>PredictableCryptographicKeyCorrected.java</file>
    <line>22</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyCorrected.java">
      <code lineNo="17" finding="false">        String originalString = "Testing";</code>
      <code lineNo="18" finding="false">        byte[] keyBytes = defaultKey.getBytes();</code>
      <code lineNo="19" finding="false">        keyBytes = Arrays.copyOf(keyBytes,16);</code>
      <code lineNo="20" finding="false">        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, keySpec);</code>
      <code lineNo="24" finding="false">        String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")));</code>
      <code lineNo="25" finding="false">        System.out.println(encrypt);</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6ihp97yjii3jcb1zmbzdtrxpc" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABHCase1</class>
    <file>PredictableKeyStorePasswordABHCase1.java</file>
    <line>24</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABHCase1.java">
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="21" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="22" finding="false">        byte [] keyBytes = password.getBytes("UTF-8");</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="25" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="26" finding="false">        ks.load(cacerts.openStream(), new String(keyBytes).toCharArray());</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false">}</code>
    </node>
  </finding>


  <finding id="2i5i3j66nwko2abwxsg230bc0" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABHCase2</class>
    <file>PredictableKeyStorePasswordABHCase2.java</file>
    <line>29</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="29" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABHCase2.java">
      <code lineNo="24" finding="false">        hm.put("ccc", "cfix");</code>
      <code lineNo="25" finding="false">        hm.put("ddd", "dfix");</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String key = hm.get("aaa");</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="30" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="31" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="32" finding="false">    }</code>
      <code lineNo="33" finding="false"></code>
      <code lineNo="34" finding="false">}</code>
    </node>
  </finding>


  <finding id="40kjwy1nqvoqdqdrc6hahauzj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase1</class>
    <file>PredictableKeyStorePasswordABICase1.java</file>
    <line>20</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java">
      <code lineNo="15" finding="false">        pksp.go(key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </node>
  </finding>


  <finding id="172wo8a1igr1sg0yr302dqy5b" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase2</class>
    <file>PredictableKeyStorePasswordABICase2.java</file>
    <line>31</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java">
      <code lineNo="26" finding="false">        encryptKey = ENCRYPT_KEY;</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    private void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="30" finding="false">        String type = "JKS";</code>
      <code lineNo="31" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="32" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="33" finding="false">        ks.load(cacerts.openStream(), encryptKey);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false">}</code>
    </node>
  </finding>


  <finding id="507ple5sntioue664ap5hafz4" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase3</class>
    <file>PredictableKeyStorePasswordABICase3.java</file>
    <line>25</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java">
      <code lineNo="20" finding="false">        method2(key2);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public void method2(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="24" finding="false">        String type = "JKS";</code>
      <code lineNo="25" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="26" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="27" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="6b0ryz175f1lu7zddehr62gyn" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABMC1</class>
    <file>PredictableKeyStorePasswordABMC1.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class PredictableKeyStorePasswordABMC1 {</code>
      <code lineNo="12" finding="false">    URL cacerts;</code>
      <code lineNo="13" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="14" finding="false">        String type = "JKS";</code>
      <code lineNo="15" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="16" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="17" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </node>
  </finding>


  <finding id="32u7trhj6j14a8ivr1kb0gmzj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABPSCase1</class>
    <file>PredictableKeyStorePasswordABPSCase1.java</file>
    <line>21</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="21" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java">
      <code lineNo="16" finding="false">        pksp.go(choice);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public void go(int choice) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="20" finding="false">        String type = "JKS";</code>
      <code lineNo="21" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="22" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="23" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="24" finding="false">        if(choice&gt;1){</code>
      <code lineNo="25" finding="false">            SecureRandom random = new SecureRandom();</code>
      <code lineNo="26" finding="false">            defaultKey = String.valueOf(random.ints());</code>
    </node>
  </finding>


  <finding id="6hym96cnb1ekuuk4t0nq2s5en" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordBBCase1</class>
    <file>PredictableKeyStorePasswordBBCase1.java</file>
    <line>20</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java">
      <code lineNo="15" finding="false">        pksp.go();</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="23" finding="false">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
    </node>
  </finding>


  <finding id="3ftjdva5tlie1d2x4tmvyom74" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordCorrected</class>
    <file>PredictableKeyStorePasswordCorrected.java</file>
    <line>20</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: java.security.KeyStore

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static java.security.** java.security.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java">
      <code lineNo="15" finding="false">        pksp.go();</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="true">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="24" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="25" finding="false"></code>
    </node>
  </finding>


  <finding id="lqsr7gw52nhe184qr4vhkuhs" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase1</class>
    <file>StaticInitializationVectorABHCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase1.java">
      <code lineNo="10" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="11" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">public class StaticInitializationVectorABHCase1 {</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        byte [] bytes = "abcde".getBytes("UTF-8");</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="1of254r7h08oao8nz4aidxso0" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase1</class>
    <file>StaticInitializationVectorABHCase1.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">public class StaticInitializationVectorABHCase1 {</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        byte [] bytes = "abcde".getBytes("UTF-8");</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="1p7sm0ajwd5ach5my7tywqkww" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase2</class>
    <file>StaticInitializationVectorABHCase2.java</file>
    <line>16</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase2.java">
      <code lineNo="11" finding="false">import java.util.HashMap;</code>
      <code lineNo="12" finding="false">import java.util.Map;</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">public class StaticInitializationVectorABHCase2 {</code>
      <code lineNo="15" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="16" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        String name = "abcdef";</code>
      <code lineNo="21" finding="false">        Map&lt;String,String&gt; hm = new HashMap&lt;String, String&gt;();</code>
    </node>
  </finding>


  <finding id="17p605czh4dwhdjkzywjs2yqo" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase2</class>
    <file>StaticInitializationVectorABHCase2.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase2.java">
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">public class StaticInitializationVectorABHCase2 {</code>
      <code lineNo="15" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        String name = "abcdef";</code>
      <code lineNo="21" finding="false">        Map&lt;String,String&gt; hm = new HashMap&lt;String, String&gt;();</code>
      <code lineNo="22" finding="false">        hm.put("aaa", "abcde");</code>
      <code lineNo="23" finding="false">        hm.put("bbb", "fghij");</code>
    </node>
  </finding>


  <finding id="1z97gz7dys49q1leh43nnpahs" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase1</class>
    <file>StaticInitializationVectorABICase1.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase1.java">
      <code lineNo="8" finding="false">import java.security.*;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="65e6z3yefocgdxoktsn5y0in4" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase1</class>
    <file>StaticInitializationVectorABICase1.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase1.java">
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="15tjxi0e7ik3t28lzh3dvbf4w" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase2</class>
    <file>StaticInitializationVectorABICase2.java</file>
    <line>18</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase2.java">
      <code lineNo="13" finding="false">    public static final String DEFAULT_INITIALIZATION = "abcde";</code>
      <code lineNo="14" finding="false">    private static char[] INITIALIZATION;</code>
      <code lineNo="15" finding="false">    private static char[] initialization;</code>
      <code lineNo="16" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="17" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(new byte[]{Byte.parseByte(String.valueOf(initialization))});</code>
      <code lineNo="18" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="19" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="20" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="23" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5oporx6p4mhmgj5idgxc0mzk" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase2</class>
    <file>StaticInitializationVectorABICase2.java</file>
    <line>20</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase2.java">
      <code lineNo="15" finding="false">    private static char[] initialization;</code>
      <code lineNo="16" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="17" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(new byte[]{Byte.parseByte(String.valueOf(initialization))});</code>
      <code lineNo="18" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="19" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="20" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">    private static void go2(){</code>
      <code lineNo="25" finding="false">        INITIALIZATION = DEFAULT_INITIALIZATION.toCharArray();</code>
    </node>
  </finding>


  <finding id="1owmm7v4nksx7kp5bfc11udeo" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase3</class>
    <file>StaticInitializationVectorABICase3.java</file>
    <line>13</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase3.java">
      <code lineNo="8" finding="false">import java.security.*;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase3 {</code>
      <code lineNo="11" finding="false">    public static void method2(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5ino4pn9xnbp235e7ajnml9b4" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase3</class>
    <file>StaticInitializationVectorABICase3.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase3.java">
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase3 {</code>
      <code lineNo="11" finding="false">    public static void method2(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">    public static void method1 (byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="7ge7xctoigjvsd77py5az4fvj" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABMC1</class>
    <file>StaticInitializationVectorABMC1.java</file>
    <line>15</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABMC1.java">
      <code lineNo="10" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">public class StaticInitializationVectorABMC1 {</code>
      <code lineNo="13" finding="false">    public void go(byte [] bytes) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {</code>
      <code lineNo="14" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="15" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="20" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4sfh1j37i3oo9wjf3po3xclen" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABMC1</class>
    <file>StaticInitializationVectorABMC1.java</file>
    <line>17</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABMC1.java">
      <code lineNo="12" finding="false">public class StaticInitializationVectorABMC1 {</code>
      <code lineNo="13" finding="false">    public void go(byte [] bytes) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {</code>
      <code lineNo="14" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false">}</code>
    </node>
  </finding>


  <finding id="2fiacwc9ie9y4knwbnzgde34w" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABPSCase1</class>
    <file>StaticInitializationVectorABPSCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java">
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false">import java.security.SecureRandom;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
    </node>
  </finding>


  <finding id="62d84gci56p8kvm2hcn8gukps" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABPSCase1</class>
    <file>StaticInitializationVectorABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        if(choice&gt;1){</code>
    </node>
  </finding>


  <finding id="3frs5chja42t1gkusyyn4lsnz" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorBBCase1</class>
    <file>StaticInitializationVectorBBCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorBBCase1.java">
      <code lineNo="7" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorBBCase1 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
    </node>
  </finding>


  <finding id="uuckng3cdpq2mzorwnfiz5gf" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorBBCase1</class>
    <file>StaticInitializationVectorBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorBBCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorBBCase1 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="19" finding="false"></code>
    </node>
  </finding>


  <finding id="4ym3jneifal86tirbqa4432ow" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorCorrected</class>
    <file>StaticInitializationVectorCorrected.java</file>
    <line>39</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.KeyGenerator

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="39" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java">
      <code lineNo="34" finding="false">}</code>
      <code lineNo="35" finding="false">*/</code>
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">public class StaticInitializationVectorCorrected {</code>
      <code lineNo="38" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="39" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="40" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="41" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="42" finding="false"></code>
      <code lineNo="43" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="44" finding="false"></code>
    </node>
  </finding>


  <finding id="bqb98q6olzmt09ao5kf4cbc0" kind="SPECIAL">
    <problemType>Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider</problemType>
    <problemTypeId>SpecialMethodCall:EncryptionUsedInProjectWOProvider</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>1.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorCorrected</class>
    <file>StaticInitializationVectorCorrected.java</file>
    <line>41</line>
    <cweNumber>CWE-325</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider'.
Declared in: javax.crypto.Cipher

Matching pattern in special code kind 'Cryptography: Cryptographic Algorithms w/o Specified Crypto-Provider':
static javax.crypto.** javax.crypto.**.getInstance(java.lang.String)
]]></description>
    <node lineNo="41" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java">
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">public class StaticInitializationVectorCorrected {</code>
      <code lineNo="38" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="39" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="40" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="41" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="42" finding="false"></code>
      <code lineNo="43" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="44" finding="false"></code>
      <code lineNo="45" finding="false">        byte [] bytes = new byte[16];</code>
      <code lineNo="46" finding="false">        sr.nextBytes(bytes);</code>
    </node>
  </finding>


  <finding id="4y3o9g7mvoid076i9dcmni0yo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Cryptographic Hashing</problemType>
    <problemTypeId>protocolCheckProblemType:CryptographicHashing</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase1</class>
    <file>BrokenHashABPSCase1.java</file>
    <line>12</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Hashing'.
Dataflow ended in a state that was not GOOD.

Violated protocol: MessageDigest Use for Cryptographic Hashing
Protocol description: 
A MessageDigest instance is created and used for cryptographic hashing.


]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase1.java">
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="true">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="2sq1bwiq0g5feseyfdqff334" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Cryptographic Hashing</problemType>
    <problemTypeId>protocolCheckProblemType:CryptographicHashing</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase2</class>
    <file>BrokenHashABPSCase2.java</file>
    <line>12</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Hashing'.
Dataflow ended in a state that was not GOOD.

Violated protocol: MessageDigest Use for Cryptographic Hashing
Protocol description: 
A MessageDigest instance is created and used for cryptographic hashing.


]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase2.java">
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="true">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="2nd8pdff58yvvjf6es0clssio" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Cryptographic Hashing</problemType>
    <problemTypeId>protocolCheckProblemType:CryptographicHashing</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase3</class>
    <file>BrokenHashABPSCase3.java</file>
    <line>12</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Hashing'.
Dataflow ended in a state that was not GOOD.

Violated protocol: MessageDigest Use for Cryptographic Hashing
Protocol description: 
A MessageDigest instance is created and used for cryptographic hashing.


]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase3.java">
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="true">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="w2j9fne2yjfpddmpj0qb749s" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Cryptographic Hashing</problemType>
    <problemTypeId>protocolCheckProblemType:CryptographicHashing</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase4</class>
    <file>BrokenHashABPSCase4.java</file>
    <line>12</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Hashing'.
Dataflow ended in a state that was not GOOD.

Violated protocol: MessageDigest Use for Cryptographic Hashing
Protocol description: 
A MessageDigest instance is created and used for cryptographic hashing.


]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase4.java">
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="false">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="true">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="56st2d89y7i9mold69uj4swo0" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Cryptographic Hashing</problemType>
    <problemTypeId>protocolCheckProblemType:CryptographicHashing</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashCorrected</class>
    <file>BrokenHashCorrected.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Cryptographic Hashing'.
Dataflow ended in a state that was not GOOD.

Violated protocol: MessageDigest Use for Cryptographic Hashing
Protocol description: 
A MessageDigest instance is created and used for cryptographic hashing.


]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashCorrected.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashCorrected {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) {</code>
      <code lineNo="8" finding="false">        try {</code>
      <code lineNo="9" finding="true">            MessageDigest md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="10" finding="false">        } catch (NoSuchAlgorithmException e) {</code>
      <code lineNo="11" finding="false">            e.printStackTrace();</code>
      <code lineNo="12" finding="false">        }</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">}</code>
    </node>
  </finding>


  <finding id="7av14m35uvki6bt3qtzte7tr4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABHCase1</class>
    <file>PredictablePBEPasswordABHCase1.java</file>
    <line>25</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABHCase1.java">
      <code lineNo="20" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="21" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="22" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="23" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="24" finding="false">        int keyLength = 16;</code>
      <code lineNo="25" finding="true">        pbeKeySpec = new PBEKeySpec(new String(keyBytes).toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="26" finding="false">    }</code>
      <code lineNo="27" finding="false">}</code>
    </node>
  </finding>


  <finding id="3pemx34t3263cgziae6e4s50g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABHCase2</class>
    <file>PredictablePBEPasswordABHCase2.java</file>
    <line>30</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="30" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABHCase2.java">
      <code lineNo="25" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="26" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="27" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="28" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="29" finding="false">        int keyLength = 16;</code>
      <code lineNo="30" finding="true">        pbeKeySpec = new PBEKeySpec(key.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="31" finding="false">    }</code>
      <code lineNo="32" finding="false">}</code>
    </node>
  </finding>


  <finding id="3zrpxzjeyi6902obkks3v8qqo" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABICase1</class>
    <file>PredictablePBEPasswordABICase1.java</file>
    <line>22</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABICase1.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(password.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false"></code>
      <code lineNo="25" finding="false">}</code>
      <code lineNo="26" finding="false"></code>
    </node>
  </finding>


  <finding id="k9v85voqypfg10pioojwlwm8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABICase2</class>
    <file>PredictablePBEPasswordABICase2.java</file>
    <line>33</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="33" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABICase2.java">
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    private void go() {</code>
      <code lineNo="30" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="31" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="32" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="33" finding="true">        pbeKeySpec = new PBEKeySpec(encryptKey,salt,10000,16);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false">}</code>
    </node>
  </finding>


  <finding id="7j9qvr6ki1a1h5mzb7jvyzexs" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABICase3</class>
    <file>PredictablePBEPasswordABICase3.java</file>
    <line>28</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="28" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABICase3.java">
      <code lineNo="23" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="24" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="25" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="26" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="27" finding="false">        int keyLength = 16;</code>
      <code lineNo="28" finding="true">        pbeKeySpec = new PBEKeySpec(password.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </node>
  </finding>


  <finding id="18u7gsioxlvpfbal2h33lrujk" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABMC1</class>
    <file>PredictablePBEPasswordABMC1.java</file>
    <line>16</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABMC1.java">
      <code lineNo="11" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="12" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="13" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="14" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="15" finding="false">        int keyLength = 16;</code>
      <code lineNo="16" finding="true">        pbeKeySpec = new PBEKeySpec(password.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false">}</code>
    </node>
  </finding>


  <finding id="5sqn0u4dii4masz79u12doehs" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABPSCase1</class>
    <file>PredictablePBEPasswordABPSCase1.java</file>
    <line>27</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="27" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABPSCase1.java">
      <code lineNo="22" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="23" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="24" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="25" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="26" finding="false">        int keyLength = 16;</code>
      <code lineNo="27" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="5su6atjqjqw4sgvgxtkd30y8w" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordBBCase1</class>
    <file>PredictablePBEPasswordBBCase1.java</file>
    <line>22</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false"></code>
      <code lineNo="25" finding="false">}</code>
    </node>
  </finding>


  <finding id="4y8fj3ekuspyjvj8lv9weoyu8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordBBCase2</class>
    <file>PredictablePBEPasswordBBCase2.java</file>
    <line>22</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase2.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey,salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </node>
  </finding>


  <finding id="2ks6mvzb88w6vc0ytcrslyhy8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Password-Based Encryption</problemType>
    <problemTypeId>protocolCheckProblemType:PBE</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordCorrected</class>
    <file>PredictablePBEPasswordCorrected.java</file>
    <line>22</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Password-Based Encryption'.
The protocol check detected something wrong when encountering symbol 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG'.

Violated protocol: Generation of a PBEKeySpec
Protocol description: 
A PBE key spec is used for creating a PBE key.

Matching pattern in protocol check kind 'PBEKeySpecConstructorWithSaltAndIterationCount_WRONG':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, ***)
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordCorrected.java">
      <code lineNo="17" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="18" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="19" finding="false">        random.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(password.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </node>
  </finding>


  <finding id="1chg5qkcpklf7kizl8ke16dsw" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>16</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1.go(int)

]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="549hdxkzqbb1f41g4wakloxgg" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>15</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2.go(int)

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="1w38o8h0g8et0jya81he4zyao" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>16</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3.go(int)

]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="44g7o9xppf22s1makimec47s0" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>16</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4.go(int)

]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="69xuvkddmfzcmqlvlr8yxoqcg" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>15</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5.go(int)

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="qgh7hez1blnomfaqfolhl2e8" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoCorrected</class>
    <file>BrokenCryptoCorrected.java</file>
    <line>14</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoCorrected.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="5by71k6fv39sq7oejowyz7v4x" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>Crypto</class>
    <file>Crypto.java</file>
    <line>40</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method new org.cryptoapi.bench.predictablecryptographickey.Crypto(String)

]]></description>
    <node lineNo="40" classFQN="org.cryptoapi.bench.predictablecryptographickey.Crypto" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyABSCase1.java">
      <code lineNo="35" finding="false">    Cipher cipher;</code>
      <code lineNo="36" finding="false">    String algoSpec = "AES/CBC/PKCS5Padding";</code>
      <code lineNo="37" finding="false">    String algo = "AES";</code>
      <code lineNo="38" finding="false">    String defaultKey;</code>
      <code lineNo="39" finding="false">    public Crypto(String defkey) throws NoSuchPaddingException, NoSuchAlgorithmException {</code>
      <code lineNo="40" finding="true">        cipher = Cipher.getInstance(algoSpec);</code>
      <code lineNo="41" finding="false">        defaultKey = defkey;</code>
      <code lineNo="42" finding="false">    }</code>
      <code lineNo="43" finding="false"></code>
      <code lineNo="44" finding="false">    public byte[] method1(String txt, String key) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {</code>
      <code lineNo="45" finding="false">        if(key.isEmpty()){</code>
    </node>
  </finding>


  <finding id="6cau63dapcdzev73fy3nrjnfl" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>CryptoStaticIV1</class>
    <file>CryptoStaticIV1.java</file>
    <line>35</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1.method1(byte[])

]]></description>
    <node lineNo="35" classFQN="org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABSCase1.java">
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        passedIV = defIV;</code>
      <code lineNo="32" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(passedIV);</code>
      <code lineNo="33" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="34" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="35" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="36" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="37" finding="false"></code>
      <code lineNo="38" finding="false">    }</code>
      <code lineNo="39" finding="false">}</code>
      <code lineNo="40" finding="false"></code>
    </node>
  </finding>


  <finding id="3vu63po0eq2761azchmy2nhwh" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1.go(int)

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        EcbInSymmCryptoABPSCase1 bc = new EcbInSymmCryptoABPSCase1();</code>
    </node>
  </finding>


  <finding id="5dlfgulztbx1jfacjo08wo2u9" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoCorrected</class>
    <file>EcbInSymmCryptoCorrected.java</file>
    <line>14</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoCorrected.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="68aodadly2jnqxmlg6yc3ij4x" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase1</class>
    <file>StaticInitializationVectorABHCase1.java</file>
    <line>17</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1.go()

]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">public class StaticInitializationVectorABHCase1 {</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        byte [] bytes = "abcde".getBytes("UTF-8");</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="58r9rzpmb24bs8ut8id90r4o1" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase2</class>
    <file>StaticInitializationVectorABHCase2.java</file>
    <line>18</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2.go()

]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase2.java">
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">public class StaticInitializationVectorABHCase2 {</code>
      <code lineNo="15" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        String name = "abcdef";</code>
      <code lineNo="21" finding="false">        Map&lt;String,String&gt; hm = new HashMap&lt;String, String&gt;();</code>
      <code lineNo="22" finding="false">        hm.put("aaa", "abcde");</code>
      <code lineNo="23" finding="false">        hm.put("bbb", "fghij");</code>
    </node>
  </finding>


  <finding id="2mxznv0cxb6xfm8q6m5exjgpt" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase1</class>
    <file>StaticInitializationVectorABICase1.java</file>
    <line>15</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1.go(byte[])

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase1.java">
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="3vpp0jpp6xad4cfajffbrx9b5" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase2</class>
    <file>StaticInitializationVectorABICase2.java</file>
    <line>20</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2.go()

]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase2.java">
      <code lineNo="15" finding="false">    private static char[] initialization;</code>
      <code lineNo="16" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="17" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(new byte[]{Byte.parseByte(String.valueOf(initialization))});</code>
      <code lineNo="18" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="19" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="20" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">    private static void go2(){</code>
      <code lineNo="25" finding="false">        INITIALIZATION = DEFAULT_INITIALIZATION.toCharArray();</code>
    </node>
  </finding>


  <finding id="84lfp9xvv9h2y1zsmhwb4sip" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase3</class>
    <file>StaticInitializationVectorABICase3.java</file>
    <line>15</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3.method2(byte[])

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase3.java">
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase3 {</code>
      <code lineNo="11" finding="false">    public static void method2(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">    public static void method1 (byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="2ioplgepsjkg95luihc1vimap" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABMC1</class>
    <file>StaticInitializationVectorABMC1.java</file>
    <line>17</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1.go(byte[])

]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABMC1.java">
      <code lineNo="12" finding="false">public class StaticInitializationVectorABMC1 {</code>
      <code lineNo="13" finding="false">    public void go(byte [] bytes) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {</code>
      <code lineNo="14" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false">}</code>
    </node>
  </finding>


  <finding id="2e6xdkcekb2e1ih3u3x2hsy1t" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABPSCase1</class>
    <file>StaticInitializationVectorABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1.go(int)

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        if(choice&gt;1){</code>
    </node>
  </finding>


  <finding id="6tlru1kbq644zioxqp0eo74v5" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorBBCase1</class>
    <file>StaticInitializationVectorBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorBBCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorBBCase1 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="19" finding="false"></code>
    </node>
  </finding>


  <finding id="395rwbsan7gvhgz43vkrlmbfl" kind="GENERIC">
    <problemType>FindSecBugs: Cipher is susceptible to Padding Oracle</problemType>
    <problemTypeId>PADDING_ORACLE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorCorrected</class>
    <file>StaticInitializationVectorCorrected.java</file>
    <line>41</line>
    <cweNumber>CWE-326</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher is susceptible to padding oracle attacks

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected.go()

]]></description>
    <node lineNo="41" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java">
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">public class StaticInitializationVectorCorrected {</code>
      <code lineNo="38" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="39" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="40" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="41" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="42" finding="false"></code>
      <code lineNo="43" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="44" finding="false"></code>
      <code lineNo="45" finding="false">        byte [] bytes = new byte[16];</code>
      <code lineNo="46" finding="false">        sr.nextBytes(bytes);</code>
    </node>
  </finding>


  <finding id="49ivbanat90eccdqe70117jog" kind="GENERIC">
    <problemType>FindSecBugs: DES is insecure</problemType>
    <problemTypeId>DES_USAGE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
DES should be replaced with AES

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1.go(int)
- Sink method javax/crypto/Cipher.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;
- Sink parameter 0

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="l6mnvyrdvyey5wg7lqwpsi8w" kind="GENERIC">
    <problemType>FindSecBugs: DES is insecure</problemType>
    <problemTypeId>DES_USAGE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
DES should be replaced with AES

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1.go()
- Sink method javax/crypto/KeyGenerator.getInstance(Ljava/lang/String;)Ljavax/crypto/KeyGenerator;
- Sink parameter 0

]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="true">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="374cfcczf9dinwwi018729oww" kind="GENERIC">
    <problemType>FindSecBugs: DES is insecure</problemType>
    <problemTypeId>DES_USAGE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
DES should be replaced with AES

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1.go()
- Sink method javax/crypto/Cipher.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;
- Sink parameter 0

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="6ce353ywctqxz1jtufp2i0o68" kind="GENERIC">
    <problemType>FindSecBugs: ECB mode is insecure</problemType>
    <problemTypeId>ECB_MODE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher uses ECB mode, which provides poor confidentiality for encrypted data

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1.go(int)

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="2rja30tigqqmwhiq9us4lhdnk" kind="GENERIC">
    <problemType>FindSecBugs: ECB mode is insecure</problemType>
    <problemTypeId>ECB_MODE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher uses ECB mode, which provides poor confidentiality for encrypted data

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1.go()

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="nea94agdxb54k5tk8usv1ish" kind="GENERIC">
    <problemType>FindSecBugs: ECB mode is insecure</problemType>
    <problemTypeId>ECB_MODE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher uses ECB mode, which provides poor confidentiality for encrypted data

- In method org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1.go(int)

]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoABPSCase1 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="5o67umqo25qu05gfm1qg9ewdd" kind="GENERIC">
    <problemType>FindSecBugs: ECB mode is insecure</problemType>
    <problemTypeId>ECB_MODE</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoBBCase1</class>
    <file>EcbInSymmCryptoBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-327</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher uses ECB mode, which provides poor confidentiality for encrypted data

- In method org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoBBCase1.java">
      <code lineNo="9" finding="false">public class EcbInSymmCryptoBBCase1 {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="76260seq6w7og0re3gkfp9kdd" kind="GENERIC">
    <problemType>FindSecBugs: HostnameVerifier that accept any signed certificates</problemType>
    <problemTypeId>WEAK_HOSTNAME_VERIFIER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummyhostnameverifier</package>
    <class>DummyHostNameVerifierCase1</class>
    <file>DummyHostNameVerifierCase1.java</file>
    <line>8</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
HostnameVerifier that accept any signed certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummyhostnameverifier.DummyHostNameVerifierCase1.verify(String, SSLSession)

]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.dummyhostnameverifier.DummyHostNameVerifierCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummyhostnameverifier/DummyHostNameVerifierCase1.java">
      <code lineNo="3" finding="false">import javax.net.ssl.HostnameVerifier;</code>
      <code lineNo="4" finding="false">import javax.net.ssl.SSLSession;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class DummyHostNameVerifierCase1 implements HostnameVerifier {</code>
      <code lineNo="7" finding="false">    public boolean verify(String s, SSLSession sslSession) {</code>
      <code lineNo="8" finding="true">        return true;</code>
      <code lineNo="9" finding="false">    }</code>
      <code lineNo="10" finding="false">}</code>
    </node>
  </finding>


  <finding id="69omz0s5u080bogq1i6o34km8" kind="GENERIC">
    <problemType>FindSecBugs: MD2, MD4 and MD5 are weak hash functions</problemType>
    <problemTypeId>WEAK_MESSAGE_DIGEST_MD5</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase2</class>
    <file>BrokenHashABPSCase2.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This API MD5 (MDX) is not a recommended cryptographic hash function

- In method org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2.main(String[])
- Value MD5

]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase2.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase2 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="5jq69z8ssl4iion4lziwxeezk" kind="GENERIC">
    <problemType>FindSecBugs: MD2, MD4 and MD5 are weak hash functions</problemType>
    <problemTypeId>WEAK_MESSAGE_DIGEST_MD5</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase3</class>
    <file>BrokenHashABPSCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This API MD4 (MDX) is not a recommended cryptographic hash function

- In method org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3.main(String[])
- Value MD4

]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase3.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase3 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4tma8sbk2k7u9dhvh9rhq0aqp" kind="GENERIC">
    <problemType>FindSecBugs: MD2, MD4 and MD5 are weak hash functions</problemType>
    <problemTypeId>WEAK_MESSAGE_DIGEST_MD5</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase4</class>
    <file>BrokenHashABPSCase4.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This API MD2 (MDX) is not a recommended cryptographic hash function

- In method org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4.main(String[])
- Value MD2

]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase4.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase4 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3u29yck9ujkr7hf0phzo943mp" kind="GENERIC">
    <problemType>FindSecBugs: MD2, MD4 and MD5 are weak hash functions</problemType>
    <problemTypeId>WEAK_MESSAGE_DIGEST_MD5</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase2</class>
    <file>BrokenHashBBCase2.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This API MD5 (MDX) is not a recommended cryptographic hash function

- In method org.cryptoapi.bench.brokenhash.BrokenHashBBCase2.main(String[])
- Value MD5

]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase2.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase2 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD5");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="5uz9jkfvljpzggkqw359u6li9" kind="GENERIC">
    <problemType>FindSecBugs: MD2, MD4 and MD5 are weak hash functions</problemType>
    <problemTypeId>WEAK_MESSAGE_DIGEST_MD5</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase3</class>
    <file>BrokenHashBBCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This API MD4 (MDX) is not a recommended cryptographic hash function

- In method org.cryptoapi.bench.brokenhash.BrokenHashBBCase3.main(String[])
- Value MD4

]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase3.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase3 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD4");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="6oxpaep6d3ves8qcqfbpzql41" kind="GENERIC">
    <problemType>FindSecBugs: MD2, MD4 and MD5 are weak hash functions</problemType>
    <problemTypeId>WEAK_MESSAGE_DIGEST_MD5</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase4</class>
    <file>BrokenHashBBCase4.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This API MD2 (MDX) is not a recommended cryptographic hash function

- In method org.cryptoapi.bench.brokenhash.BrokenHashBBCase4.main(String[])
- Value MD2

]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase4.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase4 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("MD2");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="6jtkia0vk5mhovsq7utsmvbz4" kind="GENERIC">
    <problemType>FindSecBugs: SHA-1 is a weak hash function</problemType>
    <problemTypeId>WEAK_MESSAGE_DIGEST_SHA1</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashABPSCase1</class>
    <file>BrokenHashABPSCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This API SHA1 (SHA-1) is not a recommended cryptographic hash function

- In method org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1.main(String[])
- Value SHA1

]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashABPSCase1.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class BrokenHashABPSCase1 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="7" finding="false">        String name = "abcdef";</code>
      <code lineNo="8" finding="false">        int choice = 2;</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="12" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="13" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="14" finding="false">    }</code>
    </node>
  </finding>


  <finding id="3gqzfjwjphy27wt3sclyii89t" kind="GENERIC">
    <problemType>FindSecBugs: SHA-1 is a weak hash function</problemType>
    <problemTypeId>WEAK_MESSAGE_DIGEST_SHA1</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashBBCase1</class>
    <file>BrokenHashBBCase1.java</file>
    <line>9</line>
    <cweNumber>CWE-328</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This API SHA1 (SHA-1) is not a recommended cryptographic hash function

- In method org.cryptoapi.bench.brokenhash.BrokenHashBBCase1.main(String[])
- Value SHA1

]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashBBCase1.java">
      <code lineNo="4" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class BrokenHashBBCase1 {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) throws NoSuchAlgorithmException {</code>
      <code lineNo="8" finding="false">        String name = "abcdef";</code>
      <code lineNo="9" finding="true">        MessageDigest md = MessageDigest.getInstance("SHA1");</code>
      <code lineNo="10" finding="false">        md.update(name.getBytes());</code>
      <code lineNo="11" finding="false">        System.out.println(md.digest());</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="1rb00eqnevc6quig0z855qee9" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>CryptoStaticIV1</class>
    <file>CryptoStaticIV1.java</file>
    <line>32</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1.method1(byte[])

]]></description>
    <node lineNo="32" classFQN="org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABSCase1.java">
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    public void method1(byte[] passedIV) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        passedIV = defIV;</code>
      <code lineNo="32" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(passedIV);</code>
      <code lineNo="33" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="34" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="35" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="36" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="37" finding="false"></code>
    </node>
  </finding>


  <finding id="zibg6fun27lcr0ykuvlxgi1t" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase1</class>
    <file>StaticInitializationVectorABHCase1.java</file>
    <line>21</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1.go()

]]></description>
    <node lineNo="21" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase1.java">
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        byte [] bytes = "abcde".getBytes("UTF-8");</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {</code>
    </node>
  </finding>


  <finding id="3zmefr9jpkon4ezhd8xqvmq1t" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase2</class>
    <file>StaticInitializationVectorABHCase2.java</file>
    <line>31</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2.go()

]]></description>
    <node lineNo="31" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase2.java">
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">        String str = hm.get("aaa");</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">        byte [] bytes = str.getBytes();</code>
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="32" finding="false"></code>
      <code lineNo="33" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false"></code>
      <code lineNo="36" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="7keyzxxuxmlktemkhygxe9ra9" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase1</class>
    <file>StaticInitializationVectorABICase1.java</file>
    <line>12</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1.go(byte[])

]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase1.java">
      <code lineNo="7" finding="false">import javax.crypto.spec.IvParameterSpec;</code>
      <code lineNo="8" finding="false">import java.security.*;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
    </node>
  </finding>


  <finding id="2frfea6kt25pssqgrvilulcgx" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase2</class>
    <file>StaticInitializationVectorABICase2.java</file>
    <line>17</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2.go()

]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase2.java">
      <code lineNo="12" finding="false">public class StaticInitializationVectorABICase2 {</code>
      <code lineNo="13" finding="false">    public static final String DEFAULT_INITIALIZATION = "abcde";</code>
      <code lineNo="14" finding="false">    private static char[] INITIALIZATION;</code>
      <code lineNo="15" finding="false">    private static char[] initialization;</code>
      <code lineNo="16" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="17" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(new byte[]{Byte.parseByte(String.valueOf(initialization))});</code>
      <code lineNo="18" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="19" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="20" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
    </node>
  </finding>


  <finding id="71rmbics8fqohr1xgmk0ctmqp" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase3</class>
    <file>StaticInitializationVectorABICase3.java</file>
    <line>12</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3.method2(byte[])

]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase3.java">
      <code lineNo="7" finding="false">import javax.crypto.spec.IvParameterSpec;</code>
      <code lineNo="8" finding="false">import java.security.*;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase3 {</code>
      <code lineNo="11" finding="false">    public static void method2(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
    </node>
  </finding>


  <finding id="23s2itabuyhz0ou5zzkf9v2ox" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABMC1</class>
    <file>StaticInitializationVectorABMC1.java</file>
    <line>14</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1.go(byte[])

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABMC1.java">
      <code lineNo="9" finding="false">import java.security.InvalidKeyException;</code>
      <code lineNo="10" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">public class StaticInitializationVectorABMC1 {</code>
      <code lineNo="13" finding="false">    public void go(byte [] bytes) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {</code>
      <code lineNo="14" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
    </node>
  </finding>


  <finding id="3h8xgj452skswvht87ua3ydlt" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABPSCase1</class>
    <file>StaticInitializationVectorABPSCase1.java</file>
    <line>24</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1.go(int)

]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java">
      <code lineNo="19" finding="false">        if(choice&gt;1){</code>
      <code lineNo="20" finding="false">            bytes = new byte[16];</code>
      <code lineNo="21" finding="false">            sr.nextBytes(bytes);</code>
      <code lineNo="22" finding="false">        }</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="7blni9waxd1m90cryu9d0b8m9" kind="GENERIC">
    <problemType>FindSecBugs: Static IV</problemType>
    <problemTypeId>STATIC_IV</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorBBCase1</class>
    <file>StaticInitializationVectorBBCase1.java</file>
    <line>18</line>
    <cweNumber>CWE-329</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The initialization vector (IV) is not properly generated

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1.go()

]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorBBCase1.java">
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="true">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="4yfsyb4h7ucg0pr77vbrqwqjl" kind="GENERIC">
    <problemType>FindSecBugs: TrustManager that accept any certificates</problemType>
    <problemTypeId>WEAK_TRUST_MANAGER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase1</class>
    <file>DummyCertValidationCase1.java</file>
    <line>19</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
TrustManager that accept any certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1.checkServerTrusted(X509Certificate[], String)

]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase1.java">
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    @Override</code>
      <code lineNo="16" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="17" finding="false">        //Trust any remote server (no certificate validation)</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="true">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    @Override</code>
      <code lineNo="22" finding="false">    public X509Certificate[] getAcceptedIssuers() {</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">        //return null;</code>
    </node>
  </finding>


  <finding id="5ml2bg126jn4k53xkr9vhu8o1" kind="GENERIC">
    <problemType>FindSecBugs: TrustManager that accept any certificates</problemType>
    <problemTypeId>WEAK_TRUST_MANAGER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase1</class>
    <file>DummyCertValidationCase1.java</file>
    <line>25</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
TrustManager that accept any certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1.getAcceptedIssuers()

]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase1.java">
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    @Override</code>
      <code lineNo="22" finding="false">    public X509Certificate[] getAcceptedIssuers() {</code>
      <code lineNo="23" finding="false"></code>
      <code lineNo="24" finding="false">        //return null;</code>
      <code lineNo="25" finding="true">        return new X509Certificate[0];</code>
      <code lineNo="26" finding="false">    }</code>
      <code lineNo="27" finding="false">}</code>
    </node>
  </finding>


  <finding id="2ui2o3en8xxetdavq79aviich" kind="GENERIC">
    <problemType>FindSecBugs: TrustManager that accept any certificates</problemType>
    <problemTypeId>WEAK_TRUST_MANAGER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase2</class>
    <file>DummyCertValidationCase2.java</file>
    <line>12</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
TrustManager that accept any certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2.checkClientTrusted(X509Certificate[], String)

]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase2.java">
      <code lineNo="7" finding="false">public class DummyCertValidationCase2 implements X509TrustManager {</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">    @Override</code>
      <code lineNo="10" finding="false">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="true">    }</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">    @Override</code>
      <code lineNo="15" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
    </node>
  </finding>


  <finding id="3ha9bm8qxynjszz8tuq1dg31d" kind="GENERIC">
    <problemType>FindSecBugs: TrustManager that accept any certificates</problemType>
    <problemTypeId>WEAK_TRUST_MANAGER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase2</class>
    <file>DummyCertValidationCase2.java</file>
    <line>16</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
TrustManager that accept any certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2.checkServerTrusted(X509Certificate[], String)

]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase2.java">
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">    @Override</code>
      <code lineNo="15" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="16" finding="true">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    @Override</code>
      <code lineNo="19" finding="false">    public X509Certificate[] getAcceptedIssuers() {</code>
      <code lineNo="20" finding="false">        return new X509Certificate[0];</code>
      <code lineNo="21" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4qyept40dcabyc2hxq5up0w9t" kind="GENERIC">
    <problemType>FindSecBugs: TrustManager that accept any certificates</problemType>
    <problemTypeId>WEAK_TRUST_MANAGER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase2</class>
    <file>DummyCertValidationCase2.java</file>
    <line>20</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
TrustManager that accept any certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2.getAcceptedIssuers()

]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase2.java">
      <code lineNo="15" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    @Override</code>
      <code lineNo="19" finding="false">    public X509Certificate[] getAcceptedIssuers() {</code>
      <code lineNo="20" finding="true">        return new X509Certificate[0];</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="gn7rm5u4n37e5qkbbtkkohup" kind="GENERIC">
    <problemType>FindSecBugs: TrustManager that accept any certificates</problemType>
    <problemTypeId>WEAK_TRUST_MANAGER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase3</class>
    <file>DummyCertValidationCase3.java</file>
    <line>11</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
TrustManager that accept any certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3.checkClientTrusted(X509Certificate[], String)

]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase3.java">
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class DummyCertValidationCase3 implements X509TrustManager {</code>
      <code lineNo="8" finding="false">    @Override</code>
      <code lineNo="9" finding="false">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="true">    }</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    @Override</code>
      <code lineNo="14" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6z0ywjbl9ltif5icdp9e5u5i9" kind="GENERIC">
    <problemType>FindSecBugs: TrustManager that accept any certificates</problemType>
    <problemTypeId>WEAK_TRUST_MANAGER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase3</class>
    <file>DummyCertValidationCase3.java</file>
    <line>16</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
TrustManager that accept any certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3.checkServerTrusted(X509Certificate[], String)

]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase3.java">
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    @Override</code>
      <code lineNo="14" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="true">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    @Override</code>
      <code lineNo="19" finding="false">    public X509Certificate[] getAcceptedIssuers() {</code>
      <code lineNo="20" finding="false">        return null;</code>
      <code lineNo="21" finding="false">    }</code>
    </node>
  </finding>


  <finding id="576dmz04kf0mm1jwwz3qyaezl" kind="GENERIC">
    <problemType>FindSecBugs: TrustManager that accept any certificates</problemType>
    <problemTypeId>WEAK_TRUST_MANAGER</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase3</class>
    <file>DummyCertValidationCase3.java</file>
    <line>20</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
TrustManager that accept any certificates makes communication vulnerable to a MITM attack

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3.getAcceptedIssuers()

]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase3.java">
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    @Override</code>
      <code lineNo="19" finding="false">    public X509Certificate[] getAcceptedIssuers() {</code>
      <code lineNo="20" finding="true">        return null;</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false">}</code>
    </node>
  </finding>


  <finding id="2p4fkctum4otoc4nj5k5ca15s" kind="PATH">
    <problemType>Hard-Coded Credentials: Cryptographic Key as Method Parameter</problemType>
    <problemTypeId>hcc:Hard-CodedCredentials:CryptographicKeyAsMethodParameter</problemTypeId>
    <producer>BuiltIn:TAINTPATHS</producer>
    <language>Java</language>
    <category>Taint Paths</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordBBCase1</class>
    <file>PredictablePBEPasswordBBCase1.java</file>
    <line>22</line>
    <cweNumber>CWE-321</cweNumber>
    <description><![CDATA[
An identified taint path for the problem type 'Hard-Coded Credentials: Cryptographic Key as Method Parameter'

Matching pattern in taint source kind 'Hard-Coded Cryptographic Key':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, int)

Matching pattern in taint sink kind 'Hard-Coded Cryptographic Key':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, int)
]]></description>
    <startNode lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false"></code>
      <code lineNo="25" finding="false">}</code>
    </startNode>
    <endNode lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey.toCharArray(),salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false"></code>
      <code lineNo="25" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1" lineNo="22" fact="Data flow in from Taint Source: javax.crypto.spec.PBEKeySpec(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1" lineNo="22" fact="Taint value ID 12 (type: char[])" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1" lineNo="22" fact="Data flow reached Taint Sink: javax.crypto.spec.PBEKeySpec(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase1.java"></node>
    </Path>
  </finding>


  <finding id="6xyx4kf4rgwio1ckbq94f4okg" kind="PATH">
    <problemType>Hard-Coded Credentials: Cryptographic Key as Method Parameter</problemType>
    <problemTypeId>hcc:Hard-CodedCredentials:CryptographicKeyAsMethodParameter</problemTypeId>
    <producer>BuiltIn:TAINTPATHS</producer>
    <language>Java</language>
    <category>Taint Paths</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordBBCase2</class>
    <file>PredictablePBEPasswordBBCase2.java</file>
    <line>22</line>
    <cweNumber>CWE-321</cweNumber>
    <description><![CDATA[
An identified taint path for the problem type 'Hard-Coded Credentials: Cryptographic Key as Method Parameter'

Matching pattern in taint source kind 'Hard-Coded Cryptographic Key':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, int)

Matching pattern in taint sink kind 'Hard-Coded Cryptographic Key':
javax.crypto.spec.PBEKeySpec(char[], byte[], int, int)
]]></description>
    <startNode lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase2.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey,salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </startNode>
    <endNode lineNo="22" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase2.java">
      <code lineNo="17" finding="false">        byte [] salt = new byte[16];</code>
      <code lineNo="18" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="19" finding="false">        sr.nextBytes(salt);</code>
      <code lineNo="20" finding="false">        int iterationCount = 11010;</code>
      <code lineNo="21" finding="false">        int keyLength = 16;</code>
      <code lineNo="22" finding="true">        pbeKeySpec = new PBEKeySpec(defaultKey,salt,iterationCount,keyLength);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2" lineNo="22" fact="Data flow in from Taint Source: javax.crypto.spec.PBEKeySpec(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase2.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2" lineNo="22" fact="Taint value ID 4 (type: char[]) 'defaultKey'" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase2.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2" lineNo="22" fact="Data flow reached Taint Sink: javax.crypto.spec.PBEKeySpec(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordBBCase2.java"></node>
    </Path>
  </finding>


  <finding id="2fkkmn1oobfqixzi5zvo5o50h" kind="SPECIAL">
    <problemType>SSL/TLS Validation: Suspicious Implementation</problemType>
    <problemTypeId>ssl:SpecialMethodOverwriting:SSL/TLSValidation</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>4.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase1</class>
    <file>DummyCertValidationCase1.java</file>
    <line>10</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
An identified location for problem type 'SSL/TLS Validation: Suspicious Implementation'.

Matching pattern in special code kind 'SSL/TLS Validation: Suspicious Implementation':
void javax.net.ssl.X509TrustManager.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)
]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase1.java">
      <code lineNo="5" finding="false">import java.security.cert.X509Certificate;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class DummyCertValidationCase1 implements X509TrustManager {</code>
      <code lineNo="8" finding="false">    private X509TrustManager trustManager;</code>
      <code lineNo="9" finding="false">    @Override</code>
      <code lineNo="10" finding="true">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="11" finding="false">        //Trust any client connecting (no certificate validation)</code>
      <code lineNo="12" finding="false">        trustManager.checkClientTrusted(x509Certificates,s);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    @Override</code>
    </node>
  </finding>


  <finding id="5pohs3emz6x90a3f8c7sdeu9" kind="SPECIAL">
    <problemType>SSL/TLS Validation: Suspicious Implementation</problemType>
    <problemTypeId>ssl:SpecialMethodOverwriting:SSL/TLSValidation</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>4.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase1</class>
    <file>DummyCertValidationCase1.java</file>
    <line>16</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
An identified location for problem type 'SSL/TLS Validation: Suspicious Implementation'.

Matching pattern in special code kind 'SSL/TLS Validation: Suspicious Implementation':
void javax.net.ssl.X509TrustManager.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase1.java">
      <code lineNo="11" finding="false">        //Trust any client connecting (no certificate validation)</code>
      <code lineNo="12" finding="false">        trustManager.checkClientTrusted(x509Certificates,s);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    @Override</code>
      <code lineNo="16" finding="true">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="17" finding="false">        //Trust any remote server (no certificate validation)</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    @Override</code>
    </node>
  </finding>


  <finding id="65jkp8thkmj9wenfg2ugt7rkx" kind="SPECIAL">
    <problemType>SSL/TLS Validation: Suspicious Implementation</problemType>
    <problemTypeId>ssl:SpecialMethodOverwriting:SSL/TLSValidation</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>4.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase2</class>
    <file>DummyCertValidationCase2.java</file>
    <line>10</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
An identified location for problem type 'SSL/TLS Validation: Suspicious Implementation'.

Matching pattern in special code kind 'SSL/TLS Validation: Suspicious Implementation':
void javax.net.ssl.X509TrustManager.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)
]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase2.java">
      <code lineNo="5" finding="false">import java.security.cert.X509Certificate;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class DummyCertValidationCase2 implements X509TrustManager {</code>
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">    @Override</code>
      <code lineNo="10" finding="true">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">    @Override</code>
      <code lineNo="15" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
    </node>
  </finding>


  <finding id="3humj5j4111g0bx8lqjwyp17l" kind="SPECIAL">
    <problemType>SSL/TLS Validation: Suspicious Implementation</problemType>
    <problemTypeId>ssl:SpecialMethodOverwriting:SSL/TLSValidation</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>4.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase2</class>
    <file>DummyCertValidationCase2.java</file>
    <line>15</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
An identified location for problem type 'SSL/TLS Validation: Suspicious Implementation'.

Matching pattern in special code kind 'SSL/TLS Validation: Suspicious Implementation':
void javax.net.ssl.X509TrustManager.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)
]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase2.java">
      <code lineNo="10" finding="false">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">    @Override</code>
      <code lineNo="15" finding="true">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    @Override</code>
      <code lineNo="19" finding="false">    public X509Certificate[] getAcceptedIssuers() {</code>
      <code lineNo="20" finding="false">        return new X509Certificate[0];</code>
    </node>
  </finding>


  <finding id="77ex0imz99heys3x72d6bk40x" kind="SPECIAL">
    <problemType>SSL/TLS Validation: Suspicious Implementation</problemType>
    <problemTypeId>ssl:SpecialMethodOverwriting:SSL/TLSValidation</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>4.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase3</class>
    <file>DummyCertValidationCase3.java</file>
    <line>9</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
An identified location for problem type 'SSL/TLS Validation: Suspicious Implementation'.

Matching pattern in special code kind 'SSL/TLS Validation: Suspicious Implementation':
void javax.net.ssl.X509TrustManager.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase3.java">
      <code lineNo="4" finding="false">import java.security.cert.CertificateException;</code>
      <code lineNo="5" finding="false">import java.security.cert.X509Certificate;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class DummyCertValidationCase3 implements X509TrustManager {</code>
      <code lineNo="8" finding="false">    @Override</code>
      <code lineNo="9" finding="true">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    @Override</code>
      <code lineNo="14" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
    </node>
  </finding>


  <finding id="4gwfr2nte17ruomd4y3s9csip" kind="SPECIAL">
    <problemType>SSL/TLS Validation: Suspicious Implementation</problemType>
    <problemTypeId>ssl:SpecialMethodOverwriting:SSL/TLSValidation</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>4.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase3</class>
    <file>DummyCertValidationCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
An identified location for problem type 'SSL/TLS Validation: Suspicious Implementation'.

Matching pattern in special code kind 'SSL/TLS Validation: Suspicious Implementation':
void javax.net.ssl.X509TrustManager.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase3.java">
      <code lineNo="9" finding="false">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    @Override</code>
      <code lineNo="14" finding="true">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    @Override</code>
      <code lineNo="19" finding="false">    public X509Certificate[] getAcceptedIssuers() {</code>
    </node>
  </finding>


  <finding id="e2ww88ybijjpwmk9ylzu60yp" kind="SPECIAL">
    <problemType>SSL/TLS Validation: Suspicious Implementation</problemType>
    <problemTypeId>ssl:SpecialMethodOverwriting:SSL/TLSValidation</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>4.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummyhostnameverifier</package>
    <class>DummyHostNameVerifierCase1</class>
    <file>DummyHostNameVerifierCase1.java</file>
    <line>7</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
An identified location for problem type 'SSL/TLS Validation: Suspicious Implementation'.

Matching pattern in special code kind 'SSL/TLS Validation: Suspicious Implementation':
boolean javax.net.ssl.HostnameVerifier.verify(java.lang.String, javax.net.ssl.SSLSession)
]]></description>
    <node lineNo="7" classFQN="org.cryptoapi.bench.dummyhostnameverifier.DummyHostNameVerifierCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummyhostnameverifier/DummyHostNameVerifierCase1.java">
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">import javax.net.ssl.HostnameVerifier;</code>
      <code lineNo="4" finding="false">import javax.net.ssl.SSLSession;</code>
      <code lineNo="5" finding="false"></code>
      <code lineNo="6" finding="false">public class DummyHostNameVerifierCase1 implements HostnameVerifier {</code>
      <code lineNo="7" finding="true">    public boolean verify(String s, SSLSession sslSession) {</code>
      <code lineNo="8" finding="false">        return true;</code>
      <code lineNo="9" finding="false">    }</code>
      <code lineNo="10" finding="false">}</code>
    </node>
  </finding>


  <finding id="2g5hujv33g1m5d59xe5owbckh" kind="SPECIAL">
    <problemType>SSL/TLS Validation: Suspicious Implementation</problemType>
    <problemTypeId>ssl:SpecialMethodOverwriting:SSL/TLSValidation</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>4.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummyhostnameverifier</package>
    <class>DummyHostNameVerifierCorrected</class>
    <file>DummyHostNameVerifierCorrected.java</file>
    <line>8</line>
    <cweNumber>CWE-295</cweNumber>
    <description><![CDATA[
An identified location for problem type 'SSL/TLS Validation: Suspicious Implementation'.

Matching pattern in special code kind 'SSL/TLS Validation: Suspicious Implementation':
boolean javax.net.ssl.HostnameVerifier.verify(java.lang.String, javax.net.ssl.SSLSession)
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.dummyhostnameverifier.DummyHostNameVerifierCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummyhostnameverifier/DummyHostNameVerifierCorrected.java">
      <code lineNo="3" finding="false">import javax.net.ssl.HostnameVerifier;</code>
      <code lineNo="4" finding="false">import javax.net.ssl.HttpsURLConnection;</code>
      <code lineNo="5" finding="false">import javax.net.ssl.SSLSession;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class DummyHostNameVerifierCorrected implements HostnameVerifier {</code>
      <code lineNo="8" finding="true">    public boolean verify(String hostname, SSLSession sslSession) {</code>
      <code lineNo="9" finding="false">        if ("192.168.0.10".equals(hostname)) {</code>
      <code lineNo="10" finding="false">            return true;</code>
      <code lineNo="11" finding="false">        } else {</code>
      <code lineNo="12" finding="false">            HostnameVerifier hv = HttpsURLConnection.getDefaultHostnameVerifier();</code>
      <code lineNo="13" finding="false">            return hv.verify(hostname, sslSession);</code>
    </node>
  </finding>


  <finding id="9on0c9dy5a2zclwn2hzq1hem" kind="SPECIAL">
    <problemType>Usage: PrintStackTrace</problemType>
    <problemTypeId>SpecialMethodCall:PrintStackTrace</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokenhash</package>
    <class>BrokenHashCorrected</class>
    <file>BrokenHashCorrected.java</file>
    <line>11</line>
    <cweNumber>CWE-497</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Usage: PrintStackTrace'.
Declared in: java.security.NoSuchAlgorithmException

Matching pattern in special code kind 'Usage: PrintStackTrace':
public void java.lang.Throwable.printStackTrace()
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.brokenhash.BrokenHashCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokenhash/BrokenHashCorrected.java">
      <code lineNo="6" finding="false">public class BrokenHashCorrected {</code>
      <code lineNo="7" finding="false">    public static void main (String [] args) {</code>
      <code lineNo="8" finding="false">        try {</code>
      <code lineNo="9" finding="false">            MessageDigest md = MessageDigest.getInstance("SHA-256");</code>
      <code lineNo="10" finding="false">        } catch (NoSuchAlgorithmException e) {</code>
      <code lineNo="11" finding="true">            e.printStackTrace();</code>
      <code lineNo="12" finding="false">        }</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false">}</code>
    </node>
  </finding>


  <finding id="27troh5bnnx6x13iqtkal378g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Basic Protocol Violations for RSA Encryption and Decryption</problemType>
    <problemTypeId>protocolCheckProblemType:RSA_BothEncryptionAndDecryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase1</class>
    <file>InsecureAsymmetricCipherABICase1.java</file>
    <line>13</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Basic Protocol Violations for RSA Encryption and Decryption'.
The protocol check detected something wrong when encountering symbol 'InitKeySizeOnly_Wrong': 
The key size must be at least 2000.

Violated protocol: Generation of an RSA Key Pair
Protocol description: 
An RSA key pair contains a public and an associated private key.

Matching pattern in protocol check kind 'InitKeySizeOnly_Wrong':
void java.security.KeyPairGenerator.initialize(int)
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase1.java">
      <code lineNo="8" finding="false">import java.security.NoSuchAlgorithmException;</code>
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class InsecureAsymmetricCipherABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(int keySize) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="12" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="13" finding="true">        kgp.initialize(keySize);</code>
      <code lineNo="14" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="309wg4klbsvomfo453wqzgti8" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Basic Protocol Violations for RSA Encryption and Decryption</problemType>
    <problemTypeId>protocolCheckProblemType:RSA_BothEncryptionAndDecryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase2</class>
    <file>InsecureAsymmetricCipherABICase2.java</file>
    <line>42</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Basic Protocol Violations for RSA Encryption and Decryption'.
The protocol check detected something wrong when encountering symbol 'InitKeySizeOnly_Wrong': 
The key size must be at least 2000.

Violated protocol: Generation of an RSA Key Pair
Protocol description: 
An RSA key pair contains a public and an associated private key.

Matching pattern in protocol check kind 'InitKeySizeOnly_Wrong':
void java.security.KeyPairGenerator.initialize(int)
]]></description>
    <node lineNo="42" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase2.java">
      <code lineNo="37" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="38" finding="false">        InsecureAsymmetricCipherABICase2 bc = new InsecureAsymmetricCipherABICase2();</code>
      <code lineNo="39" finding="false">        go2();</code>
      <code lineNo="40" finding="false">        go3();</code>
      <code lineNo="41" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="42" finding="true">        kgp.initialize(keysize);</code>
      <code lineNo="43" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="44" finding="false">        bc.go(kgp,kp);</code>
      <code lineNo="45" finding="false">    }</code>
      <code lineNo="46" finding="false"></code>
      <code lineNo="47" finding="false">}</code>
    </node>
  </finding>


  <finding id="2nbb02sdgv9jbm6fa2zizo3ts" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Basic Protocol Violations for RSA Encryption and Decryption</problemType>
    <problemTypeId>protocolCheckProblemType:RSA_BothEncryptionAndDecryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABICase3</class>
    <file>InsecureAsymmetricCipherABICase3.java</file>
    <line>19</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Basic Protocol Violations for RSA Encryption and Decryption'.
The protocol check detected something wrong when encountering symbol 'InitKeySizeOnly_Wrong': 
The key size must be at least 2000.

Violated protocol: Generation of an RSA Key Pair
Protocol description: 
An RSA key pair contains a public and an associated private key.

Matching pattern in protocol check kind 'InitKeySizeOnly_Wrong':
void java.security.KeyPairGenerator.initialize(int)
]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABICase3.java">
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false">    public static void method1(int key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="19" finding="true">        kgp.initialize(key);</code>
      <code lineNo="20" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="24" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
    </node>
  </finding>


  <finding id="6stca6notvqlctxrsir7fziow" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Basic Protocol Violations for RSA Encryption and Decryption</problemType>
    <problemTypeId>protocolCheckProblemType:RSA_BothEncryptionAndDecryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABMC1</class>
    <file>InsecureAsymmetricCipherABMC1.java</file>
    <line>14</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Basic Protocol Violations for RSA Encryption and Decryption'.
The protocol check detected something wrong when encountering symbol 'InitKeySizeOnly_Wrong': 
The key size must be at least 2000.

Violated protocol: Generation of an RSA Key Pair
Protocol description: 
An RSA key pair contains a public and an associated private key.

Matching pattern in protocol check kind 'InitKeySizeOnly_Wrong':
void java.security.KeyPairGenerator.initialize(int)
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABMC1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class InsecureAsymmetricCipherABMC1 {</code>
      <code lineNo="11" finding="false">    public void go(int keySize) throws IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException {</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="14" finding="true">        kgp.initialize(keySize);</code>
      <code lineNo="15" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="16" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="17" finding="false">        Cipher dec = Cipher.getInstance("RSA");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
    </node>
  </finding>


  <finding id="2lw2xh7htiifye4qnqlhan1b4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Basic Protocol Violations for RSA Encryption and Decryption</problemType>
    <problemTypeId>protocolCheckProblemType:RSA_BothEncryptionAndDecryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherABPSCase1</class>
    <file>InsecureAsymmetricCipherABPSCase1.java</file>
    <line>16</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Basic Protocol Violations for RSA Encryption and Decryption'.
The protocol check detected something wrong when encountering symbol 'InitKeySizeOnly_Wrong': 
The key size must be at least 2000.

Violated protocol: Generation of an RSA Key Pair
Protocol description: 
An RSA key pair contains a public and an associated private key.

Matching pattern in protocol check kind 'InitKeySizeOnly_Wrong':
void java.security.KeyPairGenerator.initialize(int)
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherABPSCase1.java">
      <code lineNo="11" finding="false">        if (choice&gt;1)</code>
      <code lineNo="12" finding="false">            keysize = 2048;</code>
      <code lineNo="13" finding="false">        else</code>
      <code lineNo="14" finding="false">            keysize = 1024;</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="true">        kgp.initialize(keysize);</code>
      <code lineNo="17" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="21" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
    </node>
  </finding>


  <finding id="4owhsndlvvpel5ws2rruo5468" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Basic Protocol Violations for RSA Encryption and Decryption</problemType>
    <problemTypeId>protocolCheckProblemType:RSA_BothEncryptionAndDecryption</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.insecureasymmetriccrypto</package>
    <class>InsecureAsymmetricCipherBBCase1</class>
    <file>InsecureAsymmetricCipherBBCase1.java</file>
    <line>11</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Basic Protocol Violations for RSA Encryption and Decryption'.
The protocol check detected something wrong when encountering symbol 'InitKeySizeOnly_Wrong': 
The key size must be at least 2000.

Violated protocol: Generation of an RSA Key Pair
Protocol description: 
An RSA key pair contains a public and an associated private key.

Matching pattern in protocol check kind 'InitKeySizeOnly_Wrong':
void java.security.KeyPairGenerator.initialize(int)
]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/insecureasymmetriccrypto/InsecureAsymmetricCipherBBCase1.java">
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class InsecureAsymmetricCipherBBCase1 {</code>
      <code lineNo="8" finding="false">    public void go() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException {</code>
      <code lineNo="9" finding="false">        KeyPairGenerator kgp = KeyPairGenerator.getInstance("RSA");</code>
      <code lineNo="10" finding="false">        int keysize = 1024;</code>
      <code lineNo="11" finding="true">        kgp.initialize(keysize);</code>
      <code lineNo="12" finding="false">        KeyPair kp = kgp.generateKeyPair();</code>
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">        Cipher cipher = Cipher.getInstance("RSA");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, kp.getPublic());</code>
    </node>
  </finding>


  <finding id="7hjm3wppakudwn9lmtgda0qjk" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABHCase2</class>
    <file>PredictableSeedsABHCase2.java</file>
    <line>19</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'SetStronglyRandomSeed':
void java.security.SecureRandom.setSeed(byte[])
]]></description>
    <node lineNo="19" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABHCase2.java">
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">        byte b = hm.get("aaa");</code>
      <code lineNo="16" finding="false">        byte [] seed = {b,b};</code>
      <code lineNo="17" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="true">        sr.setSeed(seed);</code>
      <code lineNo="20" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="21" finding="false">        System.out.println(v);</code>
      <code lineNo="22" finding="false">    }</code>
      <code lineNo="23" finding="false">}</code>
    </node>
  </finding>


  <finding id="3a49r2a0ilphodt1g5vh84m00" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABHCase4</class>
    <file>PredictableSeedsABHCase4.java</file>
    <line>22</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'Constructor':
java.security.SecureRandom(byte[])
]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABHCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABHCase4.java">
      <code lineNo="17" finding="false">        hm.put("ccc", new Byte((byte) 300));</code>
      <code lineNo="18" finding="false">        hm.put("ddd", new Byte((byte) 400));</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        byte b = hm.get("aaa");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="true">        SecureRandom sr = new SecureRandom(new byte[]{b});</code>
      <code lineNo="23" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="24" finding="false">        System.out.println(v);</code>
      <code lineNo="25" finding="false">    }</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">}</code>
    </node>
  </finding>


  <finding id="5hklp1gvdt3zjeadkkut5850g" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABICase1</class>
    <file>PredictableSeedsABICase1.java</file>
    <line>13</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'SetStronglyRandomSeed':
void java.security.SecureRandom.setSeed(byte[])
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase1.java">
      <code lineNo="8" finding="false">        byte [] seed = {(byte) 100, (byte) 200};</code>
      <code lineNo="9" finding="false">        go(seed);</code>
      <code lineNo="10" finding="false">    }</code>
      <code lineNo="11" finding="false">    private static void go(byte [] seed) {</code>
      <code lineNo="12" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="13" finding="true">        sr.setSeed(seed);</code>
      <code lineNo="14" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="15" finding="false">        System.out.println(v);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="2gukc2clh1f52rj227qmx8nz4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABICase2</class>
    <file>PredictableSeedsABICase2.java</file>
    <line>12</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'Constructor':
java.security.SecureRandom(byte[])
]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase2.java">
      <code lineNo="7" finding="false">        byte seed = 100;</code>
      <code lineNo="8" finding="false">        go(seed);</code>
      <code lineNo="9" finding="false">    }</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    private static void go(byte seed) {</code>
      <code lineNo="12" finding="true">        SecureRandom sr = new SecureRandom(new byte[]{seed});</code>
      <code lineNo="13" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="14" finding="false">        System.out.println(v);</code>
      <code lineNo="15" finding="false">    }</code>
      <code lineNo="16" finding="false">}</code>
    </node>
  </finding>


  <finding id="lmhz3kj01drvfxs59i41f7fk" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABICase3</class>
    <file>PredictableSeedsABICase3.java</file>
    <line>25</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'SetStronglyRandomSeed':
void java.security.SecureRandom.setSeed(byte[])
]]></description>
    <node lineNo="25" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase3.java">
      <code lineNo="20" finding="false">        seed = SEED;</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    private static void go() {</code>
      <code lineNo="24" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="25" finding="true">        sr.setSeed(seed);</code>
      <code lineNo="26" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="27" finding="false">        System.out.println(v);</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </node>
  </finding>


  <finding id="1urlmldinjvun2e847wggtylc" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABICase4</class>
    <file>PredictableSeedsABICase4.java</file>
    <line>24</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'Constructor':
java.security.SecureRandom(byte[])
]]></description>
    <node lineNo="24" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase4.java">
      <code lineNo="19" finding="false">    private static void go3(){</code>
      <code lineNo="20" finding="false">        seed = SEED;</code>
      <code lineNo="21" finding="false">    }</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    private static void go() {</code>
      <code lineNo="24" finding="true">        SecureRandom sr = new SecureRandom(new byte[]{Byte.parseByte(seed.toString())});</code>
      <code lineNo="25" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="26" finding="false">        System.out.println(v);</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false">}</code>
    </node>
  </finding>


  <finding id="4r41tan9ra80gc10hqxzl0a5c" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABICase5</class>
    <file>PredictableSeedsABICase5.java</file>
    <line>17</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'SetStronglyRandomSeed':
void java.security.SecureRandom.setSeed(byte[])
]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase5.java">
      <code lineNo="12" finding="false">        byte [] seed2 = s;</code>
      <code lineNo="13" finding="false">        method2(seed2);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">    private static void method2(byte [] seed) {</code>
      <code lineNo="16" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="17" finding="true">        sr.setSeed(seed);</code>
      <code lineNo="18" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="19" finding="false">        System.out.println(v);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false">}</code>
    </node>
  </finding>


  <finding id="4l19pgg4w5xz3gjftog3fqqn4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABICase6</class>
    <file>PredictableSeedsABICase6.java</file>
    <line>16</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'Constructor':
java.security.SecureRandom(byte[])
]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase6" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase6.java">
      <code lineNo="11" finding="false">        byte seed2 = s;</code>
      <code lineNo="12" finding="false">        method2(seed2);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    private static void method2(byte seed) {</code>
      <code lineNo="16" finding="true">        SecureRandom sr = new SecureRandom(new byte[]{seed});</code>
      <code lineNo="17" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="18" finding="false">        System.out.println(v);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false">}</code>
    </node>
  </finding>


  <finding id="4iowmi4yrqiap6e9ayumogm74" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABMC1</class>
    <file>PredictableSeedsABMC1.java</file>
    <line>8</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'SetStronglyRandomSeed':
void java.security.SecureRandom.setSeed(byte[])
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABMC1.java">
      <code lineNo="3" finding="false">import java.security.SecureRandom;</code>
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class PredictableSeedsABMC1 {</code>
      <code lineNo="6" finding="false">    public void go(byte[] seed) {</code>
      <code lineNo="7" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="8" finding="true">        sr.setSeed(seed);</code>
      <code lineNo="9" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="10" finding="false">        System.out.println(v);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="pki0dbr3mxoxheor42n63vj4" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABMC2</class>
    <file>PredictableSeedsABMC2.java</file>
    <line>7</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'Constructor':
java.security.SecureRandom(byte[])
]]></description>
    <node lineNo="7" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABMC2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABMC2.java">
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">import java.security.SecureRandom;</code>
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class PredictableSeedsABMC2 {</code>
      <code lineNo="6" finding="false">    public void go(byte seed) {</code>
      <code lineNo="7" finding="true">        SecureRandom sr = new SecureRandom(new byte[]{seed});</code>
      <code lineNo="8" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="9" finding="false">        System.out.println(v);</code>
      <code lineNo="10" finding="false">    }</code>
      <code lineNo="11" finding="false">}</code>
    </node>
  </finding>


  <finding id="hbl3thgzhj8nf4d6a1uj7yao" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABPSCase1</class>
    <file>PredictableSeedsABPSCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'SetStronglyRandomSeed':
void java.security.SecureRandom.setSeed(byte[])
]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABPSCase1.java">
      <code lineNo="8" finding="false">        int choice=2;</code>
      <code lineNo="9" finding="false">        byte [] bytes = {(byte) 100, (byte) 200};</code>
      <code lineNo="10" finding="false">        if(choice&gt;1)</code>
      <code lineNo="11" finding="false">            sr.nextBytes(bytes);</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="true">        sr.setSeed(bytes);</code>
      <code lineNo="14" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="15" finding="false">        System.out.println(v);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false">}</code>
    </node>
  </finding>


  <finding id="12bqbfj9epzj3kt9b6xsvzo80" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABPSCase2</class>
    <file>PredictableSeedsABPSCase2.java</file>
    <line>14</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'Constructor':
java.security.SecureRandom(byte[])
]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABPSCase2.java">
      <code lineNo="9" finding="false">        if(choice&gt;1)</code>
      <code lineNo="10" finding="false">            sr2.nextBytes(seed);</code>
      <code lineNo="11" finding="false"></code>
      <code lineNo="12" finding="false">        //byte seed = 100;</code>
      <code lineNo="13" finding="false">        //SecureRandom sr = new SecureRandom(new byte[]{seed});</code>
      <code lineNo="14" finding="true">        SecureRandom sr = new SecureRandom(seed);</code>
      <code lineNo="15" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="16" finding="false">        System.out.println(v);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false">}</code>
    </node>
  </finding>


  <finding id="3vfsn67tlu6qar9wo4ywrdqw0" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsBBCase1</class>
    <file>PredictableSeedsBBCase1.java</file>
    <line>10</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'SetStronglyRandomSeed':
void java.security.SecureRandom.setSeed(byte[])
]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsBBCase1.java">
      <code lineNo="5" finding="false">public class PredictableSeedsBBCase1 {</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">    public static void main (String [] args){</code>
      <code lineNo="8" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="9" finding="false">        byte [] bytes = {(byte) 100, (byte) 200};</code>
      <code lineNo="10" finding="true">        sr.setSeed(bytes);</code>
      <code lineNo="11" finding="false">        //sr.setSeed(456789L); // Noncompliant</code>
      <code lineNo="12" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="13" finding="false">        System.out.println(v);</code>
      <code lineNo="14" finding="false">    }</code>
      <code lineNo="15" finding="false">}</code>
    </node>
  </finding>


  <finding id="65dyrfr7bstixv0exosiv6hcw" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsBBCase2</class>
    <file>PredictableSeedsBBCase2.java</file>
    <line>8</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'Constructor':
java.security.SecureRandom(byte[])
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsBBCase2.java">
      <code lineNo="3" finding="false">import java.security.SecureRandom;</code>
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class PredictableSeedsBBCase2 {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args){</code>
      <code lineNo="7" finding="false">        byte seed = 100;</code>
      <code lineNo="8" finding="true">        SecureRandom sr = new SecureRandom(new byte[]{seed});</code>
      <code lineNo="9" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="10" finding="false">        System.out.println(v);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </node>
  </finding>


  <finding id="5pistxa1lz4rq68zkw9fcnf4w" kind="PROTOCOL_CHECK">
    <problemType>Cryptography: Construction of Secure Random Number Generator</problemType>
    <problemTypeId>protocolCheckProblemType:SecureRandomNumberGeneratorConstruction</problemTypeId>
    <producer>BuiltIn:PROTOCOL_CHECK</producer>
    <language>Java</language>
    <category>Protocol Check Findings</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsCorrected</class>
    <file>PredictableSeedsCorrected.java</file>
    <line>9</line>
    <cweNumber>CWE-310</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Cryptography: Construction of Secure Random Number Generator'.
The seed data being used is not guaranteed to be strongly random.

Violated protocol: Construction of a Strong Random Number Generator
Protocol description: 
Constructing a strong random number generator.

Matching pattern in protocol check kind 'SetStronglyRandomSeed':
void java.security.SecureRandom.setSeed(long)
]]></description>
    <node lineNo="9" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsCorrected.java">
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class PredictableSeedsCorrected {</code>
      <code lineNo="6" finding="false">    public static void main (String [] args){</code>
      <code lineNo="7" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="8" finding="false">        long l = sr.nextLong();</code>
      <code lineNo="9" finding="true">        sr.setSeed(l);</code>
      <code lineNo="10" finding="false">        int v = sr.nextInt();</code>
      <code lineNo="11" finding="false">        System.out.println(v);</code>
      <code lineNo="12" finding="false">    }</code>
      <code lineNo="13" finding="false">}</code>
    </node>
  </finding>


  <finding id="5q5am7gsftp6kvoz4duuidnxc" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1.go(int)

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="4rxy6un1eq1zt9z6bgrzzmusg" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase1</class>
    <file>BrokenCryptoABPSCase1.java</file>
    <line>16</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1.go(int)

]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase1.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="473ov9seroat6hzve4n0ic4m8" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>13</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2.go(int)

]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase2 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="6uks1qkrrtlgf7vbun520ny3k" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase2</class>
    <file>BrokenCryptoABPSCase2.java</file>
    <line>15</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2.go(int)

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase2.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="3hqzjw7za4hntdfb9u75z4jts" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3.go(int)

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase3 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="1lfs7c1xenwqfps2z8b2cxjds" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase3</class>
    <file>BrokenCryptoABPSCase3.java</file>
    <line>16</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3.go(int)

]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase3.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="3q62xih3r7cg019b1t3hp8wo0" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4.go(int)

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoABPSCase4 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
    </node>
  </finding>


  <finding id="rai0sombo3s486m0o3w9ibmo" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase4</class>
    <file>BrokenCryptoABPSCase4.java</file>
    <line>16</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4.go(int)

]]></description>
    <node lineNo="16" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase4.java">
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="false">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="16" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="19" finding="false">    }</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="1cskbrpu6c570jvb9wbo861cw" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>13</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5.go(int)

]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class BrokenCryptoABPSCase5 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
    </node>
  </finding>


  <finding id="577lerg8fy1flr7r61pr4t65c" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoABPSCase5</class>
    <file>BrokenCryptoABPSCase5.java</file>
    <line>15</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5.go(int)

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoABPSCase5.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="14" finding="false">        if (choice &gt; 1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
    </node>
  </finding>


  <finding id="585x6z2m35hvt9cs776fox3kw" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase1</class>
    <file>BrokenCryptoBBCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1.go()

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase1.java">
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">public class BrokenCryptoBBCase1 {</code>
      <code lineNo="12" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("DES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="7dcrjp1zthflwid7oj95vznfk" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase2</class>
    <file>BrokenCryptoBBCase2.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase2.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase2 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("Blowfish");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase2 bc = new BrokenCryptoBBCase2();</code>
    </node>
  </finding>


  <finding id="18w6729wtk914i5rfuhmxth0g" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase3</class>
    <file>BrokenCryptoBBCase3.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase3.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase3 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("RC4");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC4");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase3 bc = new BrokenCryptoBBCase3();</code>
    </node>
  </finding>


  <finding id="49mfhntbhxi7jrvy1k8q0mt0g" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase4</class>
    <file>BrokenCryptoBBCase4.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase4.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase4 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("RC2");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("RC2");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase4 bc = new BrokenCryptoBBCase4();</code>
    </node>
  </finding>


  <finding id="750p9nkq2kzqalmztaf2s9x7k" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoBBCase5</class>
    <file>BrokenCryptoBBCase5.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoBBCase5.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoBBCase5 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("IDEA");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("IDEA");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase5 bc = new BrokenCryptoBBCase5();</code>
    </node>
  </finding>


  <finding id="5747lhsp03i2019qrqxwto09s" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.brokencrypto</package>
    <class>BrokenCryptoCorrected</class>
    <file>BrokenCryptoCorrected.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/brokencrypto/BrokenCryptoCorrected.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class BrokenCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        BrokenCryptoBBCase1 bc = new BrokenCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="mncnevwbb3rq13x6bzlsn0wx" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>Crypto</class>
    <file>Crypto.java</file>
    <line>40</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method new org.cryptoapi.bench.predictablecryptographickey.Crypto(String)

]]></description>
    <node lineNo="40" classFQN="org.cryptoapi.bench.predictablecryptographickey.Crypto" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyABSCase1.java">
      <code lineNo="35" finding="false">    Cipher cipher;</code>
      <code lineNo="36" finding="false">    String algoSpec = "AES/CBC/PKCS5Padding";</code>
      <code lineNo="37" finding="false">    String algo = "AES";</code>
      <code lineNo="38" finding="false">    String defaultKey;</code>
      <code lineNo="39" finding="false">    public Crypto(String defkey) throws NoSuchPaddingException, NoSuchAlgorithmException {</code>
      <code lineNo="40" finding="true">        cipher = Cipher.getInstance(algoSpec);</code>
      <code lineNo="41" finding="false">        defaultKey = defkey;</code>
      <code lineNo="42" finding="false">    }</code>
      <code lineNo="43" finding="false"></code>
      <code lineNo="44" finding="false">    public byte[] method1(String txt, String key) throws UnsupportedEncodingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {</code>
      <code lineNo="45" finding="false">        if(key.isEmpty()){</code>
    </node>
  </finding>


  <finding id="4nvgttdgyxx4qq6y4wrdxnckh" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>CryptoStaticIV1</class>
    <file>CryptoStaticIV1.java</file>
    <line>35</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1.method1(byte[])

]]></description>
    <node lineNo="35" classFQN="org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABSCase1.java">
      <code lineNo="30" finding="false"></code>
      <code lineNo="31" finding="false">        passedIV = defIV;</code>
      <code lineNo="32" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(passedIV);</code>
      <code lineNo="33" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="34" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="35" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="36" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="37" finding="false"></code>
      <code lineNo="38" finding="false">    }</code>
      <code lineNo="39" finding="false">}</code>
      <code lineNo="40" finding="false"></code>
    </node>
  </finding>


  <finding id="57r07dipwnh33nt7fcsvo9e8x" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>13</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1.go(int)

]]></description>
    <node lineNo="13" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="8" finding="false"></code>
      <code lineNo="9" finding="false">public class EcbInSymmCryptoABPSCase1 {</code>
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="false">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
    </node>
  </finding>


  <finding id="579ig8r8gy84qwprltb4xa0yp" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoABPSCase1</class>
    <file>EcbInSymmCryptoABPSCase1.java</file>
    <line>15</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1.go(int)

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoABPSCase1.java">
      <code lineNo="10" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="11" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="12" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="13" finding="false">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="14" finding="false">        if(choice&gt;1)</code>
      <code lineNo="15" finding="true">            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="17" finding="false">    }</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="20" finding="false">        EcbInSymmCryptoABPSCase1 bc = new EcbInSymmCryptoABPSCase1();</code>
    </node>
  </finding>


  <finding id="2nvlu84edax1uuk3945ncp00x" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoBBCase1</class>
    <file>EcbInSymmCryptoBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoBBCase1.java">
      <code lineNo="9" finding="false">public class EcbInSymmCryptoBBCase1 {</code>
      <code lineNo="10" finding="false"></code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="2306ufgch5an5bz5pby7gtgf5" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.ecbcrypto</package>
    <class>EcbInSymmCryptoCorrected</class>
    <file>EcbInSymmCryptoCorrected.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/ecbcrypto/EcbInSymmCryptoCorrected.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class EcbInSymmCryptoCorrected {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, key);</code>
      <code lineNo="16" finding="false">    }</code>
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</code>
      <code lineNo="19" finding="false">        EcbInSymmCryptoBBCase1 bc = new EcbInSymmCryptoBBCase1();</code>
    </node>
  </finding>


  <finding id="410eu7h8wcunl47m1uovnjrdt" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablecryptographickey</package>
    <class>PredictableCryptographicKeyCorrected</class>
    <file>PredictableCryptographicKeyCorrected.java</file>
    <line>22</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected.main(String[])

]]></description>
    <node lineNo="22" classFQN="org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablecryptographickey/PredictableCryptographicKeyCorrected.java">
      <code lineNo="17" finding="false">        String originalString = "Testing";</code>
      <code lineNo="18" finding="false">        byte[] keyBytes = defaultKey.getBytes();</code>
      <code lineNo="19" finding="false">        keyBytes = Arrays.copyOf(keyBytes,16);</code>
      <code lineNo="20" finding="false">        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");</code>
      <code lineNo="23" finding="false">        cipher.init(Cipher.ENCRYPT_MODE, keySpec);</code>
      <code lineNo="24" finding="false">        String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")));</code>
      <code lineNo="25" finding="false">        System.out.println(encrypt);</code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">    }</code>
    </node>
  </finding>


  <finding id="nujunr075dnr9rlqvcyt88yp" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase1</class>
    <file>StaticInitializationVectorABHCase1.java</file>
    <line>17</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1.go()

]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">public class StaticInitializationVectorABHCase1 {</code>
      <code lineNo="14" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException, UnsupportedEncodingException {</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        byte [] bytes = "abcde".getBytes("UTF-8");</code>
      <code lineNo="20" finding="false"></code>
      <code lineNo="21" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="22" finding="false"></code>
    </node>
  </finding>


  <finding id="63q5jigkhv3r04jq99c2h67hd" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABHCase2</class>
    <file>StaticInitializationVectorABHCase2.java</file>
    <line>18</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2.go()

]]></description>
    <node lineNo="18" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABHCase2.java">
      <code lineNo="13" finding="false"></code>
      <code lineNo="14" finding="false">public class StaticInitializationVectorABHCase2 {</code>
      <code lineNo="15" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="16" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="17" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="18" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">        String name = "abcdef";</code>
      <code lineNo="21" finding="false">        Map&lt;String,String&gt; hm = new HashMap&lt;String, String&gt;();</code>
      <code lineNo="22" finding="false">        hm.put("aaa", "abcde");</code>
      <code lineNo="23" finding="false">        hm.put("bbb", "fghij");</code>
    </node>
  </finding>


  <finding id="1s6ckjx6ztxqjhh2hf63pzzoh" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase1</class>
    <file>StaticInitializationVectorABICase1.java</file>
    <line>15</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1.go(byte[])

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase1.java">
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase1 {</code>
      <code lineNo="11" finding="false">    public void go(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false"></code>
      <code lineNo="20" finding="false">    public static void main (String [] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
    </node>
  </finding>


  <finding id="283oj5b741q92841dlnybz4gx" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase2</class>
    <file>StaticInitializationVectorABICase2.java</file>
    <line>20</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2.go()

]]></description>
    <node lineNo="20" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase2.java">
      <code lineNo="15" finding="false">    private static char[] initialization;</code>
      <code lineNo="16" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="17" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(new byte[]{Byte.parseByte(String.valueOf(initialization))});</code>
      <code lineNo="18" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="19" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="20" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="21" finding="false"></code>
      <code lineNo="22" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">    private static void go2(){</code>
      <code lineNo="25" finding="false">        INITIALIZATION = DEFAULT_INITIALIZATION.toCharArray();</code>
    </node>
  </finding>


  <finding id="636r70g2v122cnrb5k74pnext" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABICase3</class>
    <file>StaticInitializationVectorABICase3.java</file>
    <line>15</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3.method2(byte[])

]]></description>
    <node lineNo="15" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABICase3.java">
      <code lineNo="10" finding="false">public class StaticInitializationVectorABICase3 {</code>
      <code lineNo="11" finding="false">    public static void method2(byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="13" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="14" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="15" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">    public static void method1 (byte[] bytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="20" finding="false"></code>
    </node>
  </finding>


  <finding id="1qu2vc2ynb16l9dakj42zv1i9" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABMC1</class>
    <file>StaticInitializationVectorABMC1.java</file>
    <line>17</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1.go(byte[])

]]></description>
    <node lineNo="17" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABMC1.java">
      <code lineNo="12" finding="false">public class StaticInitializationVectorABMC1 {</code>
      <code lineNo="13" finding="false">    public void go(byte [] bytes) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {</code>
      <code lineNo="14" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="15" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="16" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="17" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);</code>
      <code lineNo="20" finding="false">    }</code>
      <code lineNo="21" finding="false">}</code>
    </node>
  </finding>


  <finding id="1wnqlpsb5cc56az5lxfzb5ffl" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorABPSCase1</class>
    <file>StaticInitializationVectorABPSCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1.go(int)

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorABPSCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorABPSCase1 {</code>
      <code lineNo="11" finding="false">    public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="false"></code>
      <code lineNo="19" finding="false">        if(choice&gt;1){</code>
    </node>
  </finding>


  <finding id="6p5dtxveuoh8z2nfulzd9jm8x" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorBBCase1</class>
    <file>StaticInitializationVectorBBCase1.java</file>
    <line>14</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1.go()

]]></description>
    <node lineNo="14" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorBBCase1.java">
      <code lineNo="9" finding="false"></code>
      <code lineNo="10" finding="false">public class StaticInitializationVectorBBCase1 {</code>
      <code lineNo="11" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="12" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="13" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="14" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="15" finding="false"></code>
      <code lineNo="16" finding="false"></code>
      <code lineNo="17" finding="false">        byte [] bytes = "abcde".getBytes();</code>
      <code lineNo="18" finding="false">        IvParameterSpec ivSpec = new IvParameterSpec(bytes);</code>
      <code lineNo="19" finding="false"></code>
    </node>
  </finding>


  <finding id="3kgkrz6oni8zr9fz3kjhvdsgx" kind="GENERIC">
    <problemType>FindSecBugs: Cipher with no integrity</problemType>
    <problemTypeId>CIPHER_INTEGRITY</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.staticinitializationvector</package>
    <class>StaticInitializationVectorCorrected</class>
    <file>StaticInitializationVectorCorrected.java</file>
    <line>41</line>
    <cweNumber>CWE-353</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
The cipher does not provide data integrity

- In method org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected.go()

]]></description>
    <node lineNo="41" classFQN="org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/staticinitializationvector/StaticInitializationVectorCorrected.java">
      <code lineNo="36" finding="false"></code>
      <code lineNo="37" finding="false">public class StaticInitializationVectorCorrected {</code>
      <code lineNo="38" finding="false">    public void go() throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException {</code>
      <code lineNo="39" finding="false">        KeyGenerator keyGen = KeyGenerator.getInstance("AES");</code>
      <code lineNo="40" finding="false">        SecretKey key = keyGen.generateKey();</code>
      <code lineNo="41" finding="true">        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");</code>
      <code lineNo="42" finding="false"></code>
      <code lineNo="43" finding="false">        SecureRandom sr = new SecureRandom();</code>
      <code lineNo="44" finding="false"></code>
      <code lineNo="45" finding="false">        byte [] bytes = new byte[16];</code>
      <code lineNo="46" finding="false">        sr.nextBytes(bytes);</code>
    </node>
  </finding>


  <finding id="60nk9h40sz11r7zsjwxemkeht" kind="GENERIC">
    <problemType>FindSecBugs: Predictable pseudorandom number generator</problemType>
    <problemTypeId>PREDICTABLE_RANDOM</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Security Issues</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.untrustedprng</package>
    <class>UntrustedPRNGCase1</class>
    <file>UntrustedPRNGCase1.java</file>
    <line>8</line>
    <cweNumber>CWE-330</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
This random generator (java.util.Random) is predictable

- In method org.cryptoapi.bench.untrustedprng.UntrustedPRNGCase1.main(String[])
- Value java.util.Random

]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.untrustedprng.UntrustedPRNGCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/untrustedprng/UntrustedPRNGCase1.java">
      <code lineNo="3" finding="false">import java.util.Random;</code>
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class UntrustedPRNGCase1 {</code>
      <code lineNo="6" finding="false">    public static void main(String [] args)</code>
      <code lineNo="7" finding="false">    {</code>
      <code lineNo="8" finding="true">        Random randomGenerator = new Random();</code>
      <code lineNo="9" finding="false">        int x = randomGenerator.nextInt();</code>
      <code lineNo="10" finding="false">        System.out.println(x);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false"></code>
    </node>
  </finding>


  <finding id="5uvgcepul3y6xs77y7w75tilc" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase1</class>
    <file>PredictableKeyStorePasswordABICase1.java</file>
    <line>22</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="22" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java">
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </startNode>
    <endNode lineNo="22" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java">
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" lineNo="22" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" lineNo="22" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" lineNo="22" fact="Uncaught java.lang.Throwable: Local value 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" lineNo="22" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java"></node>
    </Path>
  </finding>


  <finding id="6hqyfp6z55uhdyl1gmgl0u44g" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase1</class>
    <file>PredictableKeyStorePasswordABICase1.java</file>
    <line>23</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="22" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java">
      <code lineNo="17" finding="false"></code>
      <code lineNo="18" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="23" finding="false">    }</code>
      <code lineNo="24" finding="false">}</code>
    </startNode>
    <endNode lineNo="23" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java">
      <code lineNo="18" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="23" finding="true">    }</code>
      <code lineNo="24" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" lineNo="22" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" lineNo="22" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" lineNo="23" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1" lineNo="23" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase1.java"></node>
    </Path>
  </finding>


  <finding id="45tt8dol15qh1tblkt42yttgg" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase2</class>
    <file>PredictableKeyStorePasswordABICase2.java</file>
    <line>33</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="33" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java">
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    private void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="30" finding="false">        String type = "JKS";</code>
      <code lineNo="31" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="32" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="33" finding="true">        ks.load(cacerts.openStream(), encryptKey);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false">}</code>
    </startNode>
    <endNode lineNo="33" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java">
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    private void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="30" finding="false">        String type = "JKS";</code>
      <code lineNo="31" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="32" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="33" finding="true">        ks.load(cacerts.openStream(), encryptKey);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" lineNo="33" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" lineNo="33" fact="Taint value ID 11 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" lineNo="33" fact="Uncaught java.lang.Throwable: Local value 11 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" lineNo="33" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java"></node>
    </Path>
  </finding>


  <finding id="6olq0r74xsqqwoxu6lncdqgrk" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase2</class>
    <file>PredictableKeyStorePasswordABICase2.java</file>
    <line>34</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="33" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java">
      <code lineNo="28" finding="false"></code>
      <code lineNo="29" finding="false">    private void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="30" finding="false">        String type = "JKS";</code>
      <code lineNo="31" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="32" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="33" finding="true">        ks.load(cacerts.openStream(), encryptKey);</code>
      <code lineNo="34" finding="false">    }</code>
      <code lineNo="35" finding="false">}</code>
    </startNode>
    <endNode lineNo="34" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java">
      <code lineNo="29" finding="false">    private void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="30" finding="false">        String type = "JKS";</code>
      <code lineNo="31" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="32" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="33" finding="false">        ks.load(cacerts.openStream(), encryptKey);</code>
      <code lineNo="34" finding="true">    }</code>
      <code lineNo="35" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" lineNo="33" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" lineNo="33" fact="Taint value ID 11 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" lineNo="34" fact="Taint value ID 11 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2" lineNo="34" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase2.java"></node>
    </Path>
  </finding>


  <finding id="3m83077ysnykeco9wxflo0x9c" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase3</class>
    <file>PredictableKeyStorePasswordABICase3.java</file>
    <line>27</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="27" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java">
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public void method2(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="24" finding="false">        String type = "JKS";</code>
      <code lineNo="25" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="26" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="27" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </startNode>
    <endNode lineNo="27" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java">
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public void method2(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="24" finding="false">        String type = "JKS";</code>
      <code lineNo="25" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="26" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="27" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" lineNo="27" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" lineNo="27" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" lineNo="27" fact="Uncaught java.lang.Throwable: Local value 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" lineNo="27" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java"></node>
    </Path>
  </finding>


  <finding id="6fljc2omb0f15bwxppax9ui5c" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABICase3</class>
    <file>PredictableKeyStorePasswordABICase3.java</file>
    <line>28</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="27" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java">
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">    public void method2(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="24" finding="false">        String type = "JKS";</code>
      <code lineNo="25" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="26" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="27" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="28" finding="false">    }</code>
      <code lineNo="29" finding="false">}</code>
    </startNode>
    <endNode lineNo="28" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java">
      <code lineNo="23" finding="false">    public void method2(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="24" finding="false">        String type = "JKS";</code>
      <code lineNo="25" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="26" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="27" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="28" finding="true">    }</code>
      <code lineNo="29" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" lineNo="27" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" lineNo="27" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" lineNo="28" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3" lineNo="28" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABICase3.java"></node>
    </Path>
  </finding>


  <finding id="n0dtgd7w35bxki2921irr4v4" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABMC1</class>
    <file>PredictableKeyStorePasswordABMC1.java</file>
    <line>17</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="17" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java">
      <code lineNo="12" finding="false">    URL cacerts;</code>
      <code lineNo="13" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="14" finding="false">        String type = "JKS";</code>
      <code lineNo="15" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="16" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="17" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </startNode>
    <endNode lineNo="17" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java">
      <code lineNo="12" finding="false">    URL cacerts;</code>
      <code lineNo="13" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="14" finding="false">        String type = "JKS";</code>
      <code lineNo="15" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="16" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="17" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" lineNo="17" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" lineNo="17" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" lineNo="17" fact="Uncaught java.lang.Throwable: Local value 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" lineNo="17" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java"></node>
    </Path>
  </finding>


  <finding id="y1kln6zlp7b56d5me20pqr1c" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABMC1</class>
    <file>PredictableKeyStorePasswordABMC1.java</file>
    <line>18</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="17" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java">
      <code lineNo="12" finding="false">    URL cacerts;</code>
      <code lineNo="13" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="14" finding="false">        String type = "JKS";</code>
      <code lineNo="15" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="16" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="17" finding="true">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </startNode>
    <endNode lineNo="18" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java">
      <code lineNo="13" finding="false">    public void go(String key) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="14" finding="false">        String type = "JKS";</code>
      <code lineNo="15" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="16" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="17" finding="false">        ks.load(cacerts.openStream(), key.toCharArray());</code>
      <code lineNo="18" finding="true">    }</code>
      <code lineNo="19" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" lineNo="17" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" lineNo="17" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" lineNo="18" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1" lineNo="18" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABMC1.java"></node>
    </Path>
  </finding>


  <finding id="4gq1xufkkz357lmloq9xt9rhc" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABPSCase1</class>
    <file>PredictableKeyStorePasswordABPSCase1.java</file>
    <line>29</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="28" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java">
      <code lineNo="23" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="24" finding="false">        if(choice&gt;1){</code>
      <code lineNo="25" finding="false">            SecureRandom random = new SecureRandom();</code>
      <code lineNo="26" finding="false">            defaultKey = String.valueOf(random.ints());</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="true">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </startNode>
    <endNode lineNo="29" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java">
      <code lineNo="24" finding="false">        if(choice&gt;1){</code>
      <code lineNo="25" finding="false">            SecureRandom random = new SecureRandom();</code>
      <code lineNo="26" finding="false">            defaultKey = String.valueOf(random.ints());</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="false">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="29" finding="true">    }</code>
      <code lineNo="30" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" lineNo="28" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" lineNo="28" fact="Taint value ID 21 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" lineNo="29" fact="Taint value ID 21 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" lineNo="29" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java"></node>
    </Path>
  </finding>


  <finding id="57eeosl8kjec6dd0wiigj3luo" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordABPSCase1</class>
    <file>PredictableKeyStorePasswordABPSCase1.java</file>
    <line>28</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="28" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java">
      <code lineNo="23" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="24" finding="false">        if(choice&gt;1){</code>
      <code lineNo="25" finding="false">            SecureRandom random = new SecureRandom();</code>
      <code lineNo="26" finding="false">            defaultKey = String.valueOf(random.ints());</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="true">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </startNode>
    <endNode lineNo="28" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java">
      <code lineNo="23" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="24" finding="false">        if(choice&gt;1){</code>
      <code lineNo="25" finding="false">            SecureRandom random = new SecureRandom();</code>
      <code lineNo="26" finding="false">            defaultKey = String.valueOf(random.ints());</code>
      <code lineNo="27" finding="false">        }</code>
      <code lineNo="28" finding="true">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" lineNo="28" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" lineNo="28" fact="Taint value ID 21 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" lineNo="28" fact="Uncaught java.lang.Throwable: Local value 21 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1" lineNo="28" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordABPSCase1.java"></node>
    </Path>
  </finding>


  <finding id="5bs4m06bgmjeuny88srqg9t9c" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordBBCase1</class>
    <file>PredictableKeyStorePasswordBBCase1.java</file>
    <line>24</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="23" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java">
      <code lineNo="18" finding="false">    public void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="23" finding="true">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">}</code>
    </startNode>
    <endNode lineNo="24" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java">
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="23" finding="false">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="24" finding="true">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" lineNo="23" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" lineNo="23" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" lineNo="24" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" lineNo="24" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java"></node>
    </Path>
  </finding>


  <finding id="7e1rva4pkkr3cg3zoffot1j6o" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordBBCase1</class>
    <file>PredictableKeyStorePasswordBBCase1.java</file>
    <line>23</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="23" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java">
      <code lineNo="18" finding="false">    public void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="23" finding="true">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">}</code>
    </startNode>
    <endNode lineNo="23" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java">
      <code lineNo="18" finding="false">    public void go() throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {</code>
      <code lineNo="19" finding="false">        String type = "JKS";</code>
      <code lineNo="20" finding="false">        KeyStore ks = KeyStore.getInstance(type);</code>
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false">        String defaultKey = "changeit";</code>
      <code lineNo="23" finding="true">        ks.load(cacerts.openStream(), defaultKey.toCharArray());</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false"></code>
      <code lineNo="27" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" lineNo="23" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" lineNo="23" fact="Taint value ID 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" lineNo="23" fact="Uncaught java.lang.Throwable: Local value 12 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1" lineNo="23" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordBBCase1.java"></node>
    </Path>
  </finding>


  <finding id="3trzblg66dll1fvttnqj8gleo" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordCorrected</class>
    <file>PredictableKeyStorePasswordCorrected.java</file>
    <line>27</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="26" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java">
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="24" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="true">        ks.load(cacerts.openStream(), password.toCharArray());</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false">}</code>
    </startNode>
    <endNode lineNo="27" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java">
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="24" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">        ks.load(cacerts.openStream(), password.toCharArray());</code>
      <code lineNo="27" finding="true">    }</code>
      <code lineNo="28" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" lineNo="26" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" lineNo="26" fact="Taint value ID 17 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" lineNo="27" fact="Taint value ID 17 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" lineNo="27" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java"></node>
    </Path>
  </finding>


  <finding id="4o48menhgmaj852780eqms4m8" kind="PATH">
    <problemType>Resource Leak: IO Stream Resource Leak</problemType>
    <problemTypeId>rl:IOStreamResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablekeystorepassword</package>
    <class>PredictableKeyStorePasswordCorrected</class>
    <file>PredictableKeyStorePasswordCorrected.java</file>
    <line>26</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: IO Stream Resource Leak

Matching pattern in open resource kind 'IO Stream Opened':
java.io.InputStream java.net.URL.openStream()
]]></description>
    <startNode lineNo="26" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java">
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="24" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="true">        ks.load(cacerts.openStream(), password.toCharArray());</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false">}</code>
    </startNode>
    <endNode lineNo="26" classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java">
      <code lineNo="21" finding="false">        cacerts = new URL("https://www.google.com");</code>
      <code lineNo="22" finding="false"></code>
      <code lineNo="23" finding="false">        SecureRandom random = new SecureRandom();</code>
      <code lineNo="24" finding="false">        String password = String.valueOf(random.ints());</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="true">        ks.load(cacerts.openStream(), password.toCharArray());</code>
      <code lineNo="27" finding="false">    }</code>
      <code lineNo="28" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" lineNo="26" fact="Data flow in from Taint Source: openStream()" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" lineNo="26" fact="Taint value ID 17 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" lineNo="26" fact="Uncaught java.lang.Throwable: Local value 17 (type: java.io.InputStream)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java"></node>
      <node classFQN="org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected" lineNo="26" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablekeystorepassword/PredictableKeyStorePasswordCorrected.java"></node>
    </Path>
  </finding>


  <finding id="4fv3ans1644ff0sp8zsuv79sw" kind="PATH">
    <problemType>Resource Leak: Socket Resource Leak</problemType>
    <problemTypeId>rl:SocketResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.impropersslsocketfactory</package>
    <class>ImproperSocketManualHostABICase1</class>
    <file>ImproperSocketManualHostABICase1.java</file>
    <line>17</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: Socket Resource Leak

Matching pattern in open resource kind 'Socket Opened':
java.net.Socket javax.net.SocketFactory.createSocket(java.lang.String, int)
]]></description>
    <startNode lineNo="17" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    private static void go(String hostname, int soc) throws IOException {</code>
      <code lineNo="16" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="17" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket(hostname,soc);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </startNode>
    <endNode lineNo="17" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    private static void go(String hostname, int soc) throws IOException {</code>
      <code lineNo="16" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="17" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket(hostname,soc);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" lineNo="17" fact="Data flow in from Taint Source: createSocket(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" lineNo="17" fact="Multi-Taint (size: 2): Local value 8 (type: java.net.Socket), Local value 9 (type: javax.net.ssl.SSLSocket)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" lineNo="17" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java"></node>
    </Path>
  </finding>


  <finding id="4v7w6yzxx1p62jp9imzn5m89s" kind="PATH">
    <problemType>Resource Leak: Socket Resource Leak</problemType>
    <problemTypeId>rl:SocketResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.impropersslsocketfactory</package>
    <class>ImproperSocketManualHostABICase1</class>
    <file>ImproperSocketManualHostABICase1.java</file>
    <line>17</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: Socket Resource Leak

Matching pattern in open resource kind 'Socket Opened':
java.net.Socket javax.net.SocketFactory.createSocket(java.lang.String, int)
]]></description>
    <startNode lineNo="17" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    private static void go(String hostname, int soc) throws IOException {</code>
      <code lineNo="16" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="17" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket(hostname,soc);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </startNode>
    <endNode lineNo="17" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java">
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    private static void go(String hostname, int soc) throws IOException {</code>
      <code lineNo="16" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="17" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket(hostname,soc);</code>
      <code lineNo="18" finding="false">    }</code>
      <code lineNo="19" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" lineNo="17" fact="Data flow in from Taint Source: createSocket(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" lineNo="17" fact="Uncaught java.lang.Throwable: Local value 8 (type: java.net.Socket)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase1" lineNo="17" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase1.java"></node>
    </Path>
  </finding>


  <finding id="3xacv5v3feq94gidj2g67gcww" kind="PATH">
    <problemType>Resource Leak: Socket Resource Leak</problemType>
    <problemTypeId>rl:SocketResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.impropersslsocketfactory</package>
    <class>ImproperSocketManualHostABICase2</class>
    <file>ImproperSocketManualHostABICase2.java</file>
    <line>28</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: Socket Resource Leak

Matching pattern in open resource kind 'Socket Opened':
java.net.Socket javax.net.SocketFactory.createSocket(java.lang.String, int)
]]></description>
    <startNode lineNo="28" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java">
      <code lineNo="23" finding="false">        hostName = HOST_NAME;</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">    private static void go(int soc) throws IOException {</code>
      <code lineNo="27" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="28" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket(hostName.toString(),soc);</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </startNode>
    <endNode lineNo="28" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java">
      <code lineNo="23" finding="false">        hostName = HOST_NAME;</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">    private static void go(int soc) throws IOException {</code>
      <code lineNo="27" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="28" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket(hostName.toString(),soc);</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" lineNo="28" fact="Data flow in from Taint Source: createSocket(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" lineNo="28" fact="Uncaught java.lang.Throwable: Local value 10 (type: java.net.Socket)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" lineNo="28" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java"></node>
    </Path>
  </finding>


  <finding id="41lsrrudm7mgyhna0zmgwkx28" kind="PATH">
    <problemType>Resource Leak: Socket Resource Leak</problemType>
    <problemTypeId>rl:SocketResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.impropersslsocketfactory</package>
    <class>ImproperSocketManualHostABICase2</class>
    <file>ImproperSocketManualHostABICase2.java</file>
    <line>28</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: Socket Resource Leak

Matching pattern in open resource kind 'Socket Opened':
java.net.Socket javax.net.SocketFactory.createSocket(java.lang.String, int)
]]></description>
    <startNode lineNo="28" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java">
      <code lineNo="23" finding="false">        hostName = HOST_NAME;</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">    private static void go(int soc) throws IOException {</code>
      <code lineNo="27" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="28" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket(hostName.toString(),soc);</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </startNode>
    <endNode lineNo="28" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java">
      <code lineNo="23" finding="false">        hostName = HOST_NAME;</code>
      <code lineNo="24" finding="false">    }</code>
      <code lineNo="25" finding="false"></code>
      <code lineNo="26" finding="false">    private static void go(int soc) throws IOException {</code>
      <code lineNo="27" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="28" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket(hostName.toString(),soc);</code>
      <code lineNo="29" finding="false">    }</code>
      <code lineNo="30" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" lineNo="28" fact="Data flow in from Taint Source: createSocket(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" lineNo="28" fact="Multi-Taint (size: 2): Local value 10 (type: java.net.Socket), Local value 11 (type: javax.net.ssl.SSLSocket)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostABICase2" lineNo="28" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostABICase2.java"></node>
    </Path>
  </finding>


  <finding id="4w69r8it3egv6slexaesv6fs0" kind="PATH">
    <problemType>Resource Leak: Socket Resource Leak</problemType>
    <problemTypeId>rl:SocketResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.impropersslsocketfactory</package>
    <class>ImproperSocketManualHostBBCase1</class>
    <file>ImproperSocketManualHostBBCase1.java</file>
    <line>10</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: Socket Resource Leak

Matching pattern in open resource kind 'Socket Opened':
java.net.Socket javax.net.SocketFactory.createSocket(java.lang.String, int)
]]></description>
    <startNode lineNo="10" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java">
      <code lineNo="5" finding="false">import java.io.IOException;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class ImproperSocketManualHostBBCase1 {</code>
      <code lineNo="8" finding="false">    public static void main(String [] args) throws IOException {</code>
      <code lineNo="9" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="10" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket("my.host.name", 443);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </startNode>
    <endNode lineNo="10" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java">
      <code lineNo="5" finding="false">import java.io.IOException;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class ImproperSocketManualHostBBCase1 {</code>
      <code lineNo="8" finding="false">    public static void main(String [] args) throws IOException {</code>
      <code lineNo="9" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="10" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket("my.host.name", 443);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" lineNo="10" fact="Data flow in from Taint Source: createSocket(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" lineNo="10" fact="Uncaught java.lang.Throwable: Local value 9 (type: java.net.Socket)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" lineNo="10" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java"></node>
    </Path>
  </finding>


  <finding id="74e1okhi2pwecpfjwwfitvv4w" kind="PATH">
    <problemType>Resource Leak: Socket Resource Leak</problemType>
    <problemTypeId>rl:SocketResourceLeak</problemTypeId>
    <producer>BuiltIn:RESOURCE_LEAKS</producer>
    <language>Java</language>
    <category>Resource Leaks</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.impropersslsocketfactory</package>
    <class>ImproperSocketManualHostBBCase1</class>
    <file>ImproperSocketManualHostBBCase1.java</file>
    <line>10</line>
    <cweNumber>CWE-404</cweNumber>
    <description><![CDATA[
An identified Resource Leak: Socket Resource Leak

Matching pattern in open resource kind 'Socket Opened':
java.net.Socket javax.net.SocketFactory.createSocket(java.lang.String, int)
]]></description>
    <startNode lineNo="10" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java">
      <code lineNo="5" finding="false">import java.io.IOException;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class ImproperSocketManualHostBBCase1 {</code>
      <code lineNo="8" finding="false">    public static void main(String [] args) throws IOException {</code>
      <code lineNo="9" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="10" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket("my.host.name", 443);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </startNode>
    <endNode lineNo="10" classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java">
      <code lineNo="5" finding="false">import java.io.IOException;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class ImproperSocketManualHostBBCase1 {</code>
      <code lineNo="8" finding="false">    public static void main(String [] args) throws IOException {</code>
      <code lineNo="9" finding="false">        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();</code>
      <code lineNo="10" finding="true">        SSLSocket socket = (SSLSocket) ssf.createSocket("my.host.name", 443);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false">}</code>
    </endNode>
    <Path>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" lineNo="10" fact="Data flow in from Taint Source: createSocket(...)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" lineNo="10" fact="Multi-Taint (size: 2): Local value 10 (type: javax.net.ssl.SSLSocket), Local value 9 (type: java.net.Socket)" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java"></node>
      <node classFQN="org.cryptoapi.bench.impropersslsocketfactory.ImproperSocketManualHostBBCase1" lineNo="10" fact="Data flow reached last usage position w/o being closed" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/impropersslsocketfactory/ImproperSocketManualHostBBCase1.java"></node>
    </Path>
  </finding>


  <finding id="fu0e6fvokshfz5n0wsuh9gf5" kind="GENERIC">
    <problemType>SpotBugs: Field isn't final but should be</problemType>
    <problemTypeId>MS_SHOULD_BE_FINAL</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Malicious Code Vulnerabilities</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABICase2</class>
    <file>PredictablePBEPasswordABICase2.java</file>
    <line>10</line>
    <cweNumber>&lt;none&gt;</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2.KEY isn't final but should be

- Field org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2.KEY

]]></description>
    <node lineNo="10" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABICase2.java">
      <code lineNo="5" finding="false">import java.security.SecureRandom;</code>
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class PredictablePBEPasswordABICase2 {</code>
      <code lineNo="8" finding="false">    private PBEKeySpec pbeKeySpec = null;</code>
      <code lineNo="9" finding="false">    private PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="10" finding="true">    public static String KEY = "sagar";</code>
      <code lineNo="11" finding="false">    public static char [] DEFAULT_ENCRYPT_KEY = KEY.toCharArray();</code>
      <code lineNo="12" finding="false">    private static char[] ENCRYPT_KEY;</code>
      <code lineNo="13" finding="false">    private static char[] encryptKey;</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    public static void main(String [] args) {</code>
    </node>
  </finding>


  <finding id="4979gg3a67mvpcdj9x11uj2ap" kind="GENERIC">
    <problemType>SpotBugs: Field should be both final and package protected</problemType>
    <problemTypeId>MS_FINAL_PKGPROTECT</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Malicious Code Vulnerabilities</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictablepbepassword</package>
    <class>PredictablePBEPasswordABICase2</class>
    <file>PredictablePBEPasswordABICase2.java</file>
    <line>11</line>
    <cweNumber>&lt;none&gt;</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2.DEFAULT_ENCRYPT_KEY should be both final and package protected

- Field org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2.DEFAULT_ENCRYPT_KEY

]]></description>
    <node lineNo="11" classFQN="org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictablepbepassword/PredictablePBEPasswordABICase2.java">
      <code lineNo="6" finding="false"></code>
      <code lineNo="7" finding="false">public class PredictablePBEPasswordABICase2 {</code>
      <code lineNo="8" finding="false">    private PBEKeySpec pbeKeySpec = null;</code>
      <code lineNo="9" finding="false">    private PBEParameterSpec pbeParamSpec = null;</code>
      <code lineNo="10" finding="false">    public static String KEY = "sagar";</code>
      <code lineNo="11" finding="true">    public static char [] DEFAULT_ENCRYPT_KEY = KEY.toCharArray();</code>
      <code lineNo="12" finding="false">    private static char[] ENCRYPT_KEY;</code>
      <code lineNo="13" finding="false">    private static char[] encryptKey;</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    public static void main(String [] args) {</code>
      <code lineNo="16" finding="false">        PredictablePBEPasswordABICase2 pksp = new PredictablePBEPasswordABICase2();</code>
    </node>
  </finding>


  <finding id="9uo7dq0cj0dvq19sehjfo6zl" kind="GENERIC">
    <problemType>SpotBugs: Field should be package protected</problemType>
    <problemTypeId>MS_PKGPROTECT</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Malicious Code Vulnerabilities</category>
    <rating>8.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.predictableseeds</package>
    <class>PredictableSeedsABICase3</class>
    <file>PredictableSeedsABICase3.java</file>
    <line>7</line>
    <cweNumber>&lt;none&gt;</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase3.DEFAULT_SEED should be package protected

- Field org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase3.DEFAULT_SEED

]]></description>
    <node lineNo="7" classFQN="org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase3" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/predictableseeds/PredictableSeedsABICase3.java">
      <code lineNo="2" finding="false"></code>
      <code lineNo="3" finding="false">import java.security.SecureRandom;</code>
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class PredictableSeedsABICase3 {</code>
      <code lineNo="6" finding="false">    //public static final String DEFAULT_SEED = "456789";</code>
      <code lineNo="7" finding="true">    public static final byte [] DEFAULT_SEED = {(byte) 100, (byte) 200};</code>
      <code lineNo="8" finding="false">    private static byte[] SEED;</code>
      <code lineNo="9" finding="false">    private static byte[] seed;</code>
      <code lineNo="10" finding="false">    public static void main (String [] args){</code>
      <code lineNo="11" finding="false">        go2();</code>
      <code lineNo="12" finding="false">        go3();</code>
    </node>
  </finding>


  <finding id="fvoi7nthingbn2jdgnxjupnl" kind="GENERIC">
    <problemType>SpotBugs: Read of unwritten field</problemType>
    <problemTypeId>NP_UNWRITTEN_FIELD</problemTypeId>
    <producer>PlugIn:SpotBugs</producer>
    <language>Java</language>
    <category>SpotBugs Correctness</category>
    <rating>5.00</rating>
    <classification>Warning</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.dummycertvalidation</package>
    <class>DummyCertValidationCase1</class>
    <file>DummyCertValidationCase1.java</file>
    <line>12</line>
    <cweNumber>&lt;none&gt;</cweNumber>
    <description><![CDATA[
A finding identified by the external 'SpotBugs' plugin:
Read of unwritten field trustManager in org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1.checkClientTrusted(X509Certificate[], String)

- In method org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1.checkClientTrusted(X509Certificate[], String)
- Field org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1.trustManager

]]></description>
    <node lineNo="12" classFQN="org.cryptoapi.bench.dummycertvalidation.DummyCertValidationCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/dummycertvalidation/DummyCertValidationCase1.java">
      <code lineNo="7" finding="false">public class DummyCertValidationCase1 implements X509TrustManager {</code>
      <code lineNo="8" finding="false">    private X509TrustManager trustManager;</code>
      <code lineNo="9" finding="false">    @Override</code>
      <code lineNo="10" finding="false">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="11" finding="false">        //Trust any client connecting (no certificate validation)</code>
      <code lineNo="12" finding="true">        trustManager.checkClientTrusted(x509Certificates,s);</code>
      <code lineNo="13" finding="false">    }</code>
      <code lineNo="14" finding="false"></code>
      <code lineNo="15" finding="false">    @Override</code>
      <code lineNo="16" finding="false">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {</code>
      <code lineNo="17" finding="false">        //Trust any remote server (no certificate validation)</code>
    </node>
  </finding>


  <finding id="4nhurx31b9xgxvd9ihaw8qo2o" kind="SPECIAL">
    <problemType>Usage: java.util.Random</problemType>
    <problemTypeId>SpecialMethodCall:java.util.Random</problemTypeId>
    <producer>BuiltIn:SPECIAL_CODE_CHECKER</producer>
    <language>Java</language>
    <category>Special Code</category>
    <rating>5.00</rating>
    <classification>Manual Review Required</classification>
    <matchCode>NOT</matchCode>
    <reviewed>Not Reviewed</reviewed>
    <date>2021-03-04 01:01:11 - new</date>
    <package>org.cryptoapi.bench.untrustedprng</package>
    <class>UntrustedPRNGCase1</class>
    <file>UntrustedPRNGCase1.java</file>
    <line>8</line>
    <cweNumber>CWE-330</cweNumber>
    <description><![CDATA[
An identified location for problem type 'Usage: java.util.Random'.
Declared in: java.util.Random

Matching pattern in special code kind 'Usage: java.util.Random':
java.util.Random()
]]></description>
    <node lineNo="8" classFQN="org.cryptoapi.bench.untrustedprng.UntrustedPRNGCase1" relativePath="../../CryptoAPIDetect/dataset/cryptoapi-bench/src/main/java/org/cryptoapi/bench/untrustedprng/UntrustedPRNGCase1.java">
      <code lineNo="3" finding="false">import java.util.Random;</code>
      <code lineNo="4" finding="false"></code>
      <code lineNo="5" finding="false">public class UntrustedPRNGCase1 {</code>
      <code lineNo="6" finding="false">    public static void main(String [] args)</code>
      <code lineNo="7" finding="false">    {</code>
      <code lineNo="8" finding="true">        Random randomGenerator = new Random();</code>
      <code lineNo="9" finding="false">        int x = randomGenerator.nextInt();</code>
      <code lineNo="10" finding="false">        System.out.println(x);</code>
      <code lineNo="11" finding="false">    }</code>
      <code lineNo="12" finding="false"></code>
      <code lineNo="13" finding="false"></code>
    </node>
  </finding>
</XanitizerFindingsList>
