<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/streams.git/commons-validator-1.6.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>4288 lines of code analyzed,
	in 77 classes, 
	in 4 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">9</td>
<td align="right">2.10</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>9</b>
</td>
<td align="right">
<b>2.10</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">9</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>9</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^[^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]+(\\.[^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]+)*\\s*$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^[^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]+(\\.[^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]+)*\\s*$<br/>In class org.apache.commons.validator.EmailValidator<br/>In method org.apache.commons.validator.EmailValidator.&lt;static initializer for EmailValidator&gt;()<br/>At EmailValidator.java:[line 59]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65609');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^\\s*(([^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]|')+|("[^"]*"))(\\.(([^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]|')+|("[^"]*")))*$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65609" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^\\s*(([^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]|')+|("[^"]*"))(\\.(([^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]|')+|("[^"]*")))*$<br/>In class org.apache.commons.validator.EmailValidator<br/>In method org.apache.commons.validator.EmailValidator.&lt;static initializer for EmailValidator&gt;()<br/>At EmailValidator.java:[line 58]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65841');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^\\s*(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]|')+|("(\\\\"|[^"])*"))(\\.(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]|')+|("(\\\\"|[^"])*")))*$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65841" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^\\s*(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]|')+|("(\\\\"|[^"])*"))(\\.(((\\\\.)|[^\\s\\p{Cntrl}\\(\\)&lt;&gt;@,;:'\\\\\\"\\.\\[\\]]|')+|("(\\\\"|[^"])*")))*$<br/>In class org.apache.commons.validator.routines.EmailValidator<br/>In method org.apache.commons.validator.routines.EmailValidator.&lt;static initializer for EmailValidator&gt;()<br/>At EmailValidator.java:[line 51]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65899');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(?:\\[([0-9a-fA-F:]+)\\]|(?:(?:[a-zA-Z0-9%-._~!$&amp;'()*+,;=]+(?::[a-zA-Z0-9%-._~!$&amp;'()*+,;=]*)?@)?([\\p{Alnum}\\-\\.]*)))(?::(\\d*))?(.*)?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65899" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (?:\\[([0-9a-fA-F:]+)\\]|(?:(?:[a-zA-Z0-9%-._~!$&amp;'()*+,;=]+(?::[a-zA-Z0-9%-._~!$&amp;'()*+,;=]*)?@)?([\\p{Alnum}\\-\\.]*)))(?::(\\d*))?(.*)?<br/>In class org.apache.commons.validator.routines.UrlValidator<br/>In method org.apache.commons.validator.routines.UrlValidator.&lt;static initializer for UrlValidator&gt;()<br/>At UrlValidator.java:[line 155]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65957');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65957" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?<br/>In class org.apache.commons.validator.routines.UrlValidator<br/>In method org.apache.commons.validator.routines.UrlValidator.&lt;static initializer for UrlValidator&gt;()<br/>At UrlValidator.java:[line 113]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66015');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^(/[-\\w:@&amp;?=+,.!/~*'%$_;\\(\\)]*)?$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66015" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^(/[-\\w:@&amp;?=+,.!/~*'%$_;\\(\\)]*)?$<br/>In class org.apache.commons.validator.routines.UrlValidator<br/>In method org.apache.commons.validator.routines.UrlValidator.&lt;static initializer for UrlValidator&gt;()<br/>At UrlValidator.java:[line 169]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65667');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65667" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?<br/>In class org.apache.commons.validator.UrlValidator<br/>In method org.apache.commons.validator.UrlValidator.&lt;static initializer for UrlValidator&gt;()<br/>At UrlValidator.java:[line 119]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65725');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^(/[-\\w:@&amp;?=+,.!/~*'%$_;]*)?$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65725" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^(/[-\\w:@&amp;?=+,.!/~*'%$_;]*)?$<br/>In class org.apache.commons.validator.UrlValidator<br/>In method org.apache.commons.validator.UrlValidator.&lt;static initializer for UrlValidator&gt;()<br/>At UrlValidator.java:[line 156]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65783');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^[^\\s;/@&amp;=,.?:+$]+(\\.[^\\s;/@&amp;=,.?:+$]+)*$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65783" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^[^\\s;/@&amp;=,.?:+$]+(\\.[^\\s;/@&amp;=,.?:+$]+)*$<br/>In class org.apache.commons.validator.UrlValidator<br/>In method org.apache.commons.validator.UrlValidator.&lt;static initializer for UrlValidator&gt;()<br/>At UrlValidator.java:[line 162]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
</h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        </body>
</html>
