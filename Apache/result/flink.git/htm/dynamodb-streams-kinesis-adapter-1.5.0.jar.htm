<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/flink.git/dynamodb-streams-kinesis-adapter-1.5.0.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>2136 lines of code analyzed,
	in 39 classes, 
	in 5 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">7</td>
<td align="right">3.28</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>7</b>
</td>
<td align="right">
<b>3.28</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">7</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>7</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65625');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65625" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.amazonaws.services.dynamodbv2.streamsadapter.DynamoDBStreamsProxy$Builder<br/>In method com.amazonaws.services.dynamodbv2.streamsadapter.DynamoDBStreamsProxy$Builder.build()<br/>At DynamoDBStreamsProxy.java:[line 638]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65683');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65683" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.amazonaws.services.dynamodbv2.streamsadapter.StreamsDeterministicShuffleShardSyncLeaderDecider<br/>In method com.amazonaws.services.dynamodbv2.streamsadapter.StreamsDeterministicShuffleShardSyncLeaderDecider.electLeaders()<br/>At StreamsDeterministicShuffleShardSyncLeaderDecider.java:[line 109]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class com.amazonaws.services.dynamodbv2.streamsadapter.DynamoDBStreamsProxy<br/>In method com.amazonaws.services.dynamodbv2.streamsadapter.DynamoDBStreamsProxy.getShard(String)<br/>At DynamoDBStreamsProxy.java:[line 200]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/dynamodbv2/streamsadapter/DynamoDBStreamsProxy.getShard(Ljava/lang/String;)Lcom/amazonaws/services/kinesis/model/Shard; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65741');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65741" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class com.amazonaws.services.dynamodbv2.streamsadapter.model.GetShardIteratorRequestAdapter<br/>In method com.amazonaws.services.dynamodbv2.streamsadapter.model.GetShardIteratorRequestAdapter.setShardIteratorType(String)<br/>At GetShardIteratorRequestAdapter.java:[line 133]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/dynamodbv2/streamsadapter/model/GetShardIteratorRequestAdapter.setShardIteratorType(Ljava/lang/String;)V parameter 0<br/>At GetShardIteratorRequestAdapter.java:[line 152]<br/>At GetShardIteratorRequestAdapter.java:[line 162]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65830');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65830" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class com.amazonaws.services.dynamodbv2.streamsadapter.model.GetShardIteratorRequestAdapter<br/>In method com.amazonaws.services.dynamodbv2.streamsadapter.model.GetShardIteratorRequestAdapter.setShardIteratorType(String)<br/>At GetShardIteratorRequestAdapter.java:[line 135]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/dynamodbv2/streamsadapter/model/GetShardIteratorRequestAdapter.setShardIteratorType(Ljava/lang/String;)V parameter 0<br/>At GetShardIteratorRequestAdapter.java:[line 152]<br/>At GetShardIteratorRequestAdapter.java:[line 162]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65919');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65919" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class com.amazonaws.services.dynamodbv2.streamsadapter.model.GetShardIteratorRequestAdapter<br/>In method com.amazonaws.services.dynamodbv2.streamsadapter.model.GetShardIteratorRequestAdapter.setShardIteratorType(String)<br/>At GetShardIteratorRequestAdapter.java:[line 137]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/dynamodbv2/streamsadapter/model/GetShardIteratorRequestAdapter.setShardIteratorType(Ljava/lang/String;)V parameter 0<br/>At GetShardIteratorRequestAdapter.java:[line 152]<br/>At GetShardIteratorRequestAdapter.java:[line 162]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66008');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66008" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class com.amazonaws.services.dynamodbv2.streamsadapter.model.GetShardIteratorRequestAdapter<br/>In method com.amazonaws.services.dynamodbv2.streamsadapter.model.GetShardIteratorRequestAdapter.setShardIteratorType(String)<br/>At GetShardIteratorRequestAdapter.java:[line 139]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/dynamodbv2/streamsadapter/model/GetShardIteratorRequestAdapter.setShardIteratorType(Ljava/lang/String;)V parameter 0<br/>At GetShardIteratorRequestAdapter.java:[line 152]<br/>At GetShardIteratorRequestAdapter.java:[line 162]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        </body>
</html>
