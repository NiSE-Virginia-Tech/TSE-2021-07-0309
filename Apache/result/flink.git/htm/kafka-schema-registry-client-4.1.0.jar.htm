<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/flink.git/kafka-schema-registry-client-4.1.0.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>1037 lines of code analyzed,
	in 39 classes, 
	in 8 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">2</td>
<td align="right">1.93</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>2</b>
</td>
<td align="right">
<b>1.93</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">2</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>2</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66255');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66255" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class io.confluent.kafka.schemaregistry.client.rest.utils.UrlList<br/>In method new io.confluent.kafka.schemaregistry.client.rest.utils.UrlList(List)<br/>At UrlList.java:[line 42]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class io.confluent.kafka.schemaregistry.client.rest.RestService<br/>In method io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(String, String, byte[], Map, TypeReference)<br/>At RestService.java:[line 153]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source io/confluent/kafka/schemaregistry/client/rest/RestService.sendHttpRequest(Ljava/lang/String;Ljava/lang/String;[BLjava/util/Map;Lcom/fasterxml/jackson/core/type/TypeReference;)Ljava/lang/Object; parameter 4<br/>At CachedSchemaRegistryClient.java:[line 115]<br/>At CachedSchemaRegistryClient.java:[line 125]<br/>At CachedSchemaRegistryClient.java:[line 132]<br/>At CachedSchemaRegistryClient.java:[line 154]<br/>At CachedSchemaRegistryClient.java:[line 201]<br/>At CachedSchemaRegistryClient.java:[line 211]<br/>At CachedSchemaRegistryClient.java:[line 236]<br/>At CachedSchemaRegistryClient.java:[line 245]<br/>At CachedSchemaRegistryClient.java:[line 265]<br/>At CachedSchemaRegistryClient.java:[line 274]<br/>At CachedSchemaRegistryClient.java:[line 283]<br/>At CachedSchemaRegistryClient.java:[line 289]<br/>At CachedSchemaRegistryClient.java:[line 299]<br/>At CachedSchemaRegistryClient.java:[line 305]<br/>At CachedSchemaRegistryClient.java:[line 311]<br/>At CachedSchemaRegistryClient.java:[line 317]<br/>At RestService.java:[line 152]<br/>At RestService.java:[line 226]<br/>At RestService.java:[line 227]<br/>At RestService.java:[line 229]<br/>At RestService.java:[line 247]<br/>At RestService.java:[line 254]<br/>At RestService.java:[line 260]<br/>At RestService.java:[line 267]<br/>At RestService.java:[line 271]<br/>At RestService.java:[line 284]<br/>At RestService.java:[line 293]<br/>At RestService.java:[line 296]<br/>At RestService.java:[line 307]<br/>At RestService.java:[line 312]<br/>At RestService.java:[line 318]<br/>At RestService.java:[line 320]<br/>At RestService.java:[line 333]<br/>At RestService.java:[line 340]<br/>At RestService.java:[line 349]<br/>At RestService.java:[line 351]<br/>At RestService.java:[line 362]<br/>At RestService.java:[line 368]<br/>At RestService.java:[line 378]<br/>At RestService.java:[line 380]<br/>At RestService.java:[line 388]<br/>At RestService.java:[line 394]<br/>At RestService.java:[line 396]<br/>At RestService.java:[line 409]<br/>At RestService.java:[line 415]<br/>At RestService.java:[line 421]<br/>At RestService.java:[line 423]<br/>At RestService.java:[line 430]<br/>At RestService.java:[line 436]<br/>At RestService.java:[line 438]<br/>At RestService.java:[line 445]<br/>At RestService.java:[line 447]<br/>At RestService.java:[line 454]<br/>At RestService.java:[line 456]<br/>At RestService.java:[line 463]<br/>At RestService.java:[line 469]<br/>At RestService.java:[line 471]<br/>At RestService.java:[line 483]<br/>At RestService.java:[line 494]<br/>At RestService.java:[line 496]<br/>At RestService.java:[line 506]<br/>At RestService.java:[line 508]<br/>At UrlList.java:[line 55]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            </body>
</html>
