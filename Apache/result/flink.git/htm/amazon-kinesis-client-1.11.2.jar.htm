<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/flink.git/amazon-kinesis-client-1.11.2.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>9443 lines of code analyzed,
	in 220 classes, 
	in 18 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">2</td>
<td align="right">0.21</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">13</td>
<td align="right">1.38</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>15</b>
</td>
<td align="right">
<b>1.59</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">15</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>15</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67595');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/ProcessBuilder.&lt;init&gt;([Ljava/lang/String;)V can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67595" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.multilang.MultiLangRecordProcessorFactory<br/>In method com.amazonaws.services.kinesis.multilang.MultiLangRecordProcessorFactory.createProcessor()<br/>At MultiLangRecordProcessorFactory.java:[line 74]<br/>Sink method java/lang/ProcessBuilder.&lt;init&gt;([Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/multilang/MultiLangRecordProcessorFactory.commandArray<br/>At MultiLangRecordProcessorFactory.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.config.AWSCredentialsProviderPropertyValueDecoder<br/>In method com.amazonaws.services.kinesis.clientlibrary.config.AWSCredentialsProviderPropertyValueDecoder.getValidCredentialsProviders(List)<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 85]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/AWSCredentialsProviderPropertyValueDecoder.getValidCredentialsProviders(Ljava/util/List;)Ljava/util/List; parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Method usage with tainted arguments detected<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 30]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 51]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 52]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 74]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 85]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 101]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 104]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 107]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 126]<br/>At KinesisClientLibConfigurator.java:[line 113]<br/>At KinesisClientLibConfigurator.java:[line 124]<br/>At KinesisClientLibConfigurator.java:[line 128]<br/>At KinesisClientLibConfigurator.java:[line 133]<br/>At KinesisClientLibConfigurator.java:[line 137]<br/>At KinesisClientLibConfigurator.java:[line 175]<br/>At KinesisClientLibConfigurator.java:[line 187]<br/>At MultiLangDaemonConfig.java:[line 96]<br/>At MultiLangDaemonConfig.java:[line 106]<br/>At MultiLangDaemonConfig.java:[line 201]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65820');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65820" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.config.AWSCredentialsProviderPropertyValueDecoder<br/>In method com.amazonaws.services.kinesis.clientlibrary.config.AWSCredentialsProviderPropertyValueDecoder.getValidCredentialsProviders(List)<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 92]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/AWSCredentialsProviderPropertyValueDecoder.getValidCredentialsProviders(Ljava/util/List;)Ljava/util/List; parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Method usage with tainted arguments detected<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 30]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 51]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 52]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 74]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 92]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 101]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 104]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 107]<br/>At AWSCredentialsProviderPropertyValueDecoder.java:[line 126]<br/>At KinesisClientLibConfigurator.java:[line 113]<br/>At KinesisClientLibConfigurator.java:[line 124]<br/>At KinesisClientLibConfigurator.java:[line 128]<br/>At KinesisClientLibConfigurator.java:[line 133]<br/>At KinesisClientLibConfigurator.java:[line 137]<br/>At KinesisClientLibConfigurator.java:[line 175]<br/>At KinesisClientLibConfigurator.java:[line 187]<br/>At MultiLangDaemonConfig.java:[line 96]<br/>At MultiLangDaemonConfig.java:[line 106]<br/>At MultiLangDaemonConfig.java:[line 201]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66089');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.info(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66089" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.config.KinesisClientLibConfigurator<br/>In method com.amazonaws.services.kinesis.clientlibrary.config.KinesisClientLibConfigurator.withProperty(String, Properties, KinesisClientLibConfiguration)<br/>At KinesisClientLibConfigurator.java:[line 206]<br/>Sink method org/apache/commons/logging/Log.info(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.withProperty(Ljava/lang/String;Ljava/util/Properties;Lcom/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration;)V parameter 1<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.withProperty(Ljava/lang/String;Ljava/util/Properties;Lcom/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration;)V parameter 2<br/>Unknown source java/util/Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;<br/>Method usage with tainted arguments detected<br/>At KinesisClientLibConfigurator.java:[line 158]<br/>At KinesisClientLibConfigurator.java:[line 159]<br/>At KinesisClientLibConfigurator.java:[line 160]<br/>At KinesisClientLibConfigurator.java:[line 161]<br/>At KinesisClientLibConfigurator.java:[line 175]<br/>At KinesisClientLibConfigurator.java:[line 187]<br/>At KinesisClientLibConfigurator.java:[line 197]<br/>At KinesisClientLibConfigurator.java:[line 206]<br/>At MultiLangDaemonConfig.java:[line 96]<br/>At MultiLangDaemonConfig.java:[line 106]<br/>At MultiLangDaemonConfig.java:[line 201]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66283');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.warn(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66283" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.config.KinesisClientLibConfigurator<br/>In method com.amazonaws.services.kinesis.clientlibrary.config.KinesisClientLibConfigurator.withProperty(String, Properties, KinesisClientLibConfiguration)<br/>At KinesisClientLibConfigurator.java:[line 212]<br/>Sink method org/apache/commons/logging/Log.warn(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.withProperty(Ljava/lang/String;Ljava/util/Properties;Lcom/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration;)V parameter 1<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.nameToMethods<br/>Unknown source java/util/Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;<br/>Method usage with tainted arguments detected<br/>At KinesisClientLibConfigurator.java:[line 161]<br/>At KinesisClientLibConfigurator.java:[line 175]<br/>At KinesisClientLibConfigurator.java:[line 187]<br/>At KinesisClientLibConfigurator.java:[line 197]<br/>At KinesisClientLibConfigurator.java:[line 199]<br/>At KinesisClientLibConfigurator.java:[line 212]<br/>At MultiLangDaemonConfig.java:[line 96]<br/>At MultiLangDaemonConfig.java:[line 106]<br/>At MultiLangDaemonConfig.java:[line 201]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66467');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66467" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.config.KinesisClientLibConfigurator<br/>In method com.amazonaws.services.kinesis.clientlibrary.config.KinesisClientLibConfigurator.withProperty(String, Properties, KinesisClientLibConfiguration)<br/>At KinesisClientLibConfigurator.java:[line 229]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.withProperty(Ljava/lang/String;Ljava/util/Properties;Lcom/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration;)V parameter 2<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.nameToMethods<br/>Method usage with tainted arguments detected<br/>At KinesisClientLibConfigurator.java:[line 158]<br/>At KinesisClientLibConfigurator.java:[line 159]<br/>At KinesisClientLibConfigurator.java:[line 160]<br/>At KinesisClientLibConfigurator.java:[line 161]<br/>At KinesisClientLibConfigurator.java:[line 175]<br/>At KinesisClientLibConfigurator.java:[line 187]<br/>At KinesisClientLibConfigurator.java:[line 196]<br/>At KinesisClientLibConfigurator.java:[line 199]<br/>At KinesisClientLibConfigurator.java:[line 229]<br/>At MultiLangDaemonConfig.java:[line 96]<br/>At MultiLangDaemonConfig.java:[line 106]<br/>At MultiLangDaemonConfig.java:[line 201]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66676');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66676" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.config.KinesisClientLibConfigurator<br/>In method com.amazonaws.services.kinesis.clientlibrary.config.KinesisClientLibConfigurator.withProperty(String, Properties, KinesisClientLibConfiguration)<br/>At KinesisClientLibConfigurator.java:[line 237]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.withProperty(Ljava/lang/String;Ljava/util/Properties;Lcom/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration;)V parameter 2<br/>Method usage with tainted arguments detected<br/>At KinesisClientLibConfigurator.java:[line 158]<br/>At KinesisClientLibConfigurator.java:[line 159]<br/>At KinesisClientLibConfigurator.java:[line 160]<br/>At KinesisClientLibConfigurator.java:[line 161]<br/>At KinesisClientLibConfigurator.java:[line 175]<br/>At KinesisClientLibConfigurator.java:[line 187]<br/>At KinesisClientLibConfigurator.java:[line 237]<br/>At MultiLangDaemonConfig.java:[line 96]<br/>At MultiLangDaemonConfig.java:[line 106]<br/>At MultiLangDaemonConfig.java:[line 201]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67128');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.info(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67128" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.multilang.MultiLangDaemonConfig<br/>In method new com.amazonaws.services.kinesis.multilang.MultiLangDaemonConfig(String, ClassLoader, KinesisClientLibConfigurator)<br/>At MultiLangDaemonConfig.java:[line 113]<br/>Sink method org/apache/commons/logging/Log.info(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration.applicationName<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration.getApplicationName()Ljava/lang/String;<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration.getStreamName()Ljava/lang/String;<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Tainted source com/amazonaws/services/kinesis/multilang/MultiLangDaemonConfig.loadProperties(Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/util/Properties;<br/>Tainted source java/util/Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source com/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration.streamName<br/>At KinesisClientLibConfiguration.java:[line 642]<br/>At KinesisClientLibConfiguration.java:[line 726]<br/>At MultiLangDaemonConfig.java:[line 96]<br/>At MultiLangDaemonConfig.java:[line 102]<br/>At MultiLangDaemonConfig.java:[line 113]<br/>At MultiLangDaemonConfig.java:[line 114]<br/>At MultiLangDaemonConfig.java:[line 201]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67297');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.info(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67297" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.multilang.MultiLangDaemonConfig<br/>In method com.amazonaws.services.kinesis.multilang.MultiLangDaemonConfig.prepare(String)<br/>At MultiLangDaemonConfig.java:[line 179]<br/>Sink method org/apache/commons/logging/Log.info(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/multilang/MultiLangDaemonConfig.prepare(Ljava/lang/String;)V parameter 0<br/>Unknown source com/amazonaws/services/kinesis/multilang/MultiLangRecordProcessorFactory.commandArray<br/>Unknown source com/amazonaws/services/kinesis/multilang/MultiLangRecordProcessorFactory.getCommandArray()[Ljava/lang/String;<br/>Method usage with tainted arguments detected<br/>At MultiLangDaemonConfig.java:[line 96]<br/>At MultiLangDaemonConfig.java:[line 103]<br/>At MultiLangDaemonConfig.java:[line 115]<br/>At MultiLangDaemonConfig.java:[line 171]<br/>At MultiLangDaemonConfig.java:[line 175]<br/>At MultiLangDaemonConfig.java:[line 176]<br/>At MultiLangDaemonConfig.java:[line 179]<br/>At MultiLangDaemonConfig.java:[line 180]<br/>At MultiLangDaemonConfig.java:[line 201]<br/>At MultiLangRecordProcessorFactory.java:[line 79]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66908');">
<td>
<span class="priority-2">SECHCK</span>
</td>
<td>Hard coded cryptographic key found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66908" style="display: none;">
<a href="#HARD_CODE_KEY">Bug type HARD_CODE_KEY (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.types.UserRecord<br/>Value is hard coded in field com.amazonaws.services.kinesis.clientlibrary.types.UserRecord.SMALLEST_HASH_KEYLjava/math/BigInteger; with suspicious name<br/>At UserRecord.java:[lines 38-302]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67012');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67012" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.types.UserRecord<br/>In method com.amazonaws.services.kinesis.clientlibrary.types.UserRecord.md5(byte[])<br/>At UserRecord.java:[line 159]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66850');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66850" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.lib.worker.DeterministicShuffleShardSyncLeaderDecider<br/>In method com.amazonaws.services.kinesis.clientlibrary.lib.worker.DeterministicShuffleShardSyncLeaderDecider.electLeaders()<br/>At DeterministicShuffleShardSyncLeaderDecider.java:[line 90]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67070');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67070" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.metrics.impl.CWPublisherRunnable<br/>In method new com.amazonaws.services.kinesis.metrics.impl.CWPublisherRunnable(ICWMetricsPublisher, long, int, int, int)<br/>At CWPublisherRunnable.java:[line 47]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67481');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67481" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.multilang.MultiLangDaemonConfig<br/>In method com.amazonaws.services.kinesis.multilang.MultiLangDaemonConfig.loadProperties(ClassLoader, String)<br/>At MultiLangDaemonConfig.java:[line 190]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/amazonaws/services/kinesis/multilang/MultiLangDaemonConfig.loadProperties(Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/util/Properties; parameter 0<br/>Method usage with tainted arguments detected<br/>At MultiLangDaemon.java:[line 134]<br/>At MultiLangDaemonConfig.java:[line 71]<br/>At MultiLangDaemonConfig.java:[line 83]<br/>At MultiLangDaemonConfig.java:[line 96]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66948');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66948" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class com.amazonaws.services.kinesis.clientlibrary.types.UserRecord<br/>In method com.amazonaws.services.kinesis.clientlibrary.types.UserRecord.deaggregate(List, BigInteger, BigInteger)<br/>At UserRecord.java:[line 231]<br/>Sink method java/util/Arrays.equals([B[B)Z<br/>Sink parameter 0</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="COMMAND_INJECTION">COMMAND_INJECTION: Potential Command Injection</a>
</h2>
            
<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>import java.lang.Runtime;

Runtime r = Runtime.getRuntime();
r.exec("/bin/sh -c some_tool" + input);</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>
</p>

        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="HARD_CODE_KEY">HARD_CODE_KEY: Hard coded key</a>
</h2>
            
<p>
Cryptographic keys should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded passwords are reported separately by the <i>Hard coded password</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};
SecretKeySpec spec = new SecretKeySpec(key, "AES");
Cipher aes = Cipher.getInstance("AES");
aes.init(Cipher.ENCRYPT_MODE, spec);
return aesCipher.doFinal(secretData);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/321.html">CWE-321: Use of Hard-coded Cryptographic Key</a><br/>
</p>

        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        </body>
</html>
