<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/deltaspike.git/myfaces-api-2.2.3.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>24173 lines of code analyzed,
	in 571 classes, 
	in 20 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">11</td>
<td align="right">0.46</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>11</b>
</td>
<td align="right">
<b>0.46</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">11</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>11</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66456');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of java/util/logging/Logger.warning(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66456" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class javax.faces.webapp.FacesServlet<br/>In method javax.faces.webapp.FacesServlet.service(ServletRequest, ServletResponse)<br/>At FacesServlet.java:[line 159]<br/>Sink method java/util/logging/Logger.warning(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getRemoteUser()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRemoteHost()Ljava/lang/String;<br/>Tainted source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Tainted source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>At FacesServlet.java:[line 135]<br/>At FacesServlet.java:[line 153]<br/>At FacesServlet.java:[line 154]<br/>At FacesServlet.java:[line 155]<br/>At FacesServlet.java:[line 156]<br/>At FacesServlet.java:[line 157]<br/>At FacesServlet.java:[line 159]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.application.NavigationCase<br/>In method javax.faces.application.NavigationCase._getConditionExpression(FacesContext)<br/>At NavigationCase.java:[line 319]<br/>Sink method javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression;<br/>Sink parameter 1<br/>Unknown source javax/faces/application/NavigationCase._condition<br/>At NavigationCase.java:[line 319]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65630');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65630" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.application.NavigationCase<br/>In method javax.faces.application.NavigationCase._getToViewIdExpression(FacesContext)<br/>At NavigationCase.java:[line 332]<br/>Sink method javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression;<br/>Sink parameter 1<br/>Unknown source javax/faces/application/NavigationCase._toViewId<br/>At NavigationCase.java:[line 332]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65709');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65709" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.component._LabeledFacesMessage<br/>In method javax.faces.component._LabeledFacesMessage.getDetail()<br/>At _LabeledFacesMessage.java:[line 56]<br/>Sink method javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression;<br/>Sink parameter 1<br/>Unknown source javax/faces/application/FacesMessage._detail<br/>Unknown source javax/faces/application/FacesMessage._summary<br/>Unknown source javax/faces/application/FacesMessage.getDetail()Ljava/lang/String;<br/>At FacesMessage.java:[line 221]<br/>At FacesMessage.java:[line 223]<br/>At _LabeledFacesMessage.java:[line 56]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65818');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65818" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.component._LabeledFacesMessage<br/>In method javax.faces.component._LabeledFacesMessage.getSummary()<br/>At _LabeledFacesMessage.java:[line 65]<br/>Sink method javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression;<br/>Sink parameter 1<br/>Unknown source javax/faces/application/FacesMessage._summary<br/>Unknown source javax/faces/application/FacesMessage.getSummary()Ljava/lang/String;<br/>At FacesMessage.java:[line 197]<br/>At _LabeledFacesMessage.java:[line 65]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65912');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65912" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.convert._LabeledFacesMessage<br/>In method javax.faces.convert._LabeledFacesMessage.getDetail()<br/>At _LabeledFacesMessage.java:[line 56]<br/>Sink method javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression;<br/>Sink parameter 1<br/>Unknown source javax/faces/application/FacesMessage._detail<br/>Unknown source javax/faces/application/FacesMessage._summary<br/>Unknown source javax/faces/application/FacesMessage.getDetail()Ljava/lang/String;<br/>At FacesMessage.java:[line 221]<br/>At FacesMessage.java:[line 223]<br/>At _LabeledFacesMessage.java:[line 56]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66021');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66021" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.convert._LabeledFacesMessage<br/>In method javax.faces.convert._LabeledFacesMessage.getSummary()<br/>At _LabeledFacesMessage.java:[line 66]<br/>Sink method javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression;<br/>Sink parameter 1<br/>Unknown source javax/faces/application/FacesMessage._summary<br/>Unknown source javax/faces/application/FacesMessage.getSummary()Ljava/lang/String;<br/>At FacesMessage.java:[line 197]<br/>At _LabeledFacesMessage.java:[line 66]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66115');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createMethodExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;[Ljava/lang/Class;)Ljavax/el/MethodExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66115" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.event.MethodExpressionActionListener<br/>In method javax.faces.event.MethodExpressionActionListener._createZeroArgsMethodExpression(MethodExpression)<br/>At MethodExpressionActionListener.java:[line 184]<br/>Sink method javax/el/ExpressionFactory.createMethodExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;[Ljava/lang/Class;)Ljavax/el/MethodExpression;<br/>Sink parameter 2<br/>Unknown source javax/el/MethodExpression.getExpressionString()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66184');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createMethodExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;[Ljava/lang/Class;)Ljavax/el/MethodExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66184" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.event.MethodExpressionValueChangeListener<br/>In method javax.faces.event.MethodExpressionValueChangeListener._createZeroArgsMethodExpression(MethodExpression)<br/>At MethodExpressionValueChangeListener.java:[line 182]<br/>Sink method javax/el/ExpressionFactory.createMethodExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;[Ljava/lang/Class;)Ljavax/el/MethodExpression;<br/>Sink parameter 2<br/>Unknown source javax/el/MethodExpression.getExpressionString()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66253');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66253" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.validator._LabeledFacesMessage<br/>In method javax.faces.validator._LabeledFacesMessage.getDetail()<br/>At _LabeledFacesMessage.java:[line 56]<br/>Sink method javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression;<br/>Sink parameter 1<br/>Unknown source javax/faces/application/FacesMessage._detail<br/>Unknown source javax/faces/application/FacesMessage._summary<br/>Unknown source javax/faces/application/FacesMessage.getDetail()Ljava/lang/String;<br/>At FacesMessage.java:[line 221]<br/>At FacesMessage.java:[line 223]<br/>At _LabeledFacesMessage.java:[line 56]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66362');">
<td>
<span class="priority-2">SECEL</span>
</td>
<td>This use of javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression; could be vulnerable to code injection (Expression Language)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66362" style="display: none;">
<a href="#EL_INJECTION">Bug type EL_INJECTION (click for details)</a>
<br/>In class javax.faces.validator._LabeledFacesMessage<br/>In method javax.faces.validator._LabeledFacesMessage.getSummary()<br/>At _LabeledFacesMessage.java:[line 66]<br/>Sink method javax/el/ExpressionFactory.createValueExpression(Ljavax/el/ELContext;Ljava/lang/String;Ljava/lang/Class;)Ljavax/el/ValueExpression;<br/>Sink parameter 1<br/>Unknown source javax/faces/application/FacesMessage._summary<br/>Unknown source javax/faces/application/FacesMessage.getSummary()Ljava/lang/String;<br/>At FacesMessage.java:[line 197]<br/>At _LabeledFacesMessage.java:[line 66]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="EL_INJECTION">EL_INJECTION: Potential code injection when using Expression Language (EL)</a>
</h2>
            
<p>
    An expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>public void evaluateExpression(String expression) {
    FacesContext context = FacesContext.getCurrentInstance();
    ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();
    ELContext elContext = context.getELContext();
    ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);
    return (String) vex.getValue(elContext);
}</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://blog.mindedsecurity.com/2015/11/reliable-os-shell-with-el-expression.html">Minded Security: Abusing EL for executing OS commands</a><br/>
    <a href="https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html">The Java EE 6 Tutorial: Expression Language</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
    <a href="https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf">Minded Security: Expression Language Injection</a><br/>
    <a href="http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/">Dan Amodio's blog: Remote Code with Expression Language Injection</a><br/>
    <a href="https://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>
</p>

        </body>
</html>
