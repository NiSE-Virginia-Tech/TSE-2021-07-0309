<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/deltaspike.git/jetty-server-8.1.9.v20130131.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>11784 lines of code analyzed,
	in 149 classes, 
	in 9 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">7</td>
<td align="right">0.59</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">38</td>
<td align="right">3.22</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>45</b>
</td>
<td align="right">
<b>3.82</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">44</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>44</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66299');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66299" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.ErrorHandler<br/>In method org.eclipse.jetty.server.handler.ErrorHandler.writeErrorPageStacks(HttpServletRequest, Writer)<br/>At ErrorHandler.java:[line 146]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65857');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65857" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.eclipse.jetty.server.ShutdownMonitor<br/>In method org.eclipse.jetty.server.ShutdownMonitor.debug(Throwable)<br/>At ShutdownMonitor.java:[line 128]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECHOC</span>
</td>
<td>Cookie without the HttpOnly flag could be read by a malicious script in the browser</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#HTTPONLY_COOKIE">Bug type HTTPONLY_COOKIE (click for details)</a>
<br/>In class org.eclipse.jetty.server.CookieCutter<br/>In method org.eclipse.jetty.server.CookieCutter.parseFields()<br/>At CookieCutter.java:[line 314]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66353');">
<td>
<span class="priority-2">SECHRS</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into HTTP headers</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66353" style="display: none;">
<a href="#HTTP_RESPONSE_SPLITTING">Bug type HTTP_RESPONSE_SPLITTING (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.MovedContextHandler$Redirector<br/>In method org.eclipse.jetty.server.handler.MovedContextHandler$Redirector.handle(String, Request, HttpServletRequest, HttpServletResponse)<br/>At MovedContextHandler.java:[line 124]<br/>Sink method javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/Request._serverName<br/>Unknown source org/eclipse/jetty/server/Request.getScheme()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/util/URIUtil.addPaths(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/handler/MovedContextHandler._newContextURL<br/>Unknown source org/eclipse/jetty/server/Request._scheme<br/>Unknown source org/eclipse/jetty/server/Request.getServerName()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/Request.getRootURL()Ljava/lang/StringBuilder;<br/>At Request.java:[line 1049]<br/>At Request.java:[line 1052]<br/>At Request.java:[line 1053]<br/>At Request.java:[line 1054]<br/>At Request.java:[line 1070]<br/>At Request.java:[line 1081]<br/>At Request.java:[line 1090]<br/>At Request.java:[line 1122]<br/>At Request.java:[line 1131]<br/>At Request.java:[line 1140]<br/>At Request.java:[line 1152]<br/>At MovedContextHandler.java:[line 109]<br/>At MovedContextHandler.java:[line 113]<br/>At MovedContextHandler.java:[line 115]<br/>At MovedContextHandler.java:[line 119]<br/>At MovedContextHandler.java:[line 120]<br/>At MovedContextHandler.java:[line 121]<br/>At MovedContextHandler.java:[line 124]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65658');">
<td>
<span class="priority-2">SECHRS</span>
</td>
<td>This use of org/eclipse/jetty/server/Response.setHeader(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into HTTP headers</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65658" style="display: none;">
<a href="#HTTP_RESPONSE_SPLITTING">Bug type HTTP_RESPONSE_SPLITTING (click for details)</a>
<br/>In class org.eclipse.jetty.server.Response<br/>In method org.eclipse.jetty.server.Response.sendRedirect(String)<br/>At Response.java:[line 495]<br/>Sink method org/eclipse/jetty/server/Response.setHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/Response.sendRedirect(Ljava/lang/String;)V parameter 0<br/>Unknown source org/eclipse/jetty/http/HttpURI.getFragment()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/util/URIUtil.encodePath(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/util/URIUtil.addPaths(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source org/eclipse/jetty/http/HttpURI.getQuery()Ljava/lang/String;<br/>Tainted source org/eclipse/jetty/http/HttpURI.getParam()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/Request.getRootURL()Ljava/lang/StringBuilder;<br/>At Response.java:[line 449]<br/>At Response.java:[line 459]<br/>At Response.java:[line 462]<br/>At Response.java:[line 471]<br/>At Response.java:[line 472]<br/>At Response.java:[line 476]<br/>At Response.java:[line 478]<br/>At Response.java:[line 482]<br/>At Response.java:[line 488]<br/>At Response.java:[line 490]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65604');">
<td>
<span class="priority-2">SECIC</span>
</td>
<td>Cookie without the secure flag could be sent in clear text if a HTTP URL is visited</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65604" style="display: none;">
<a href="#INSECURE_COOKIE">Bug type INSECURE_COOKIE (click for details)</a>
<br/>In class org.eclipse.jetty.server.CookieCutter<br/>In method org.eclipse.jetty.server.CookieCutter.parseFields()<br/>At CookieCutter.java:[line 314]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67170');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.eclipse.jetty.server.session.HashSessionManager.restoreSession(InputStream, HashedSession)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67170" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.HashSessionManager<br/>In method org.eclipse.jetty.server.session.HashSessionManager.restoreSession(InputStream, HashedSession)<br/>At HashSessionManager.java:[line 588]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69546');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.eclipse.jetty.server.session.JDBCSessionManager$1.run()</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69546" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionManager$1<br/>In method org.eclipse.jetty.server.session.JDBCSessionManager$1.run()<br/>At JDBCSessionManager.java:[line 865]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67112');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67112" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.AbstractSessionIdManager<br/>In method org.eclipse.jetty.server.session.AbstractSessionIdManager.initRandom()<br/>At AbstractSessionIdManager.java:[line 176]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65911');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.lang.Math.random()) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65911" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.eclipse.jetty.server.ShutdownMonitor<br/>In method org.eclipse.jetty.server.ShutdownMonitor.startListenSocket()<br/>At ShutdownMonitor.java:[line 295]<br/>Value java.lang.Math.random()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67313');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67313" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.HashedSession<br/>In method org.eclipse.jetty.server.session.HashedSession.deIdle()<br/>At HashedSession.java:[line 188]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/AbstractSession._nodeId<br/>Unknown source org/eclipse/jetty/server/session/AbstractSession.getId()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/session/AbstractSession._clusterId<br/>At AbstractSession.java:[line 183]<br/>At HashedSession.java:[line 188]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67412');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67412" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.HashedSession<br/>In method org.eclipse.jetty.server.session.HashedSession.doInvalidate()<br/>At HashedSession.java:[line 96]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/HashedSession.getId()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/session/AbstractSession._nodeId<br/>Unknown source org/eclipse/jetty/server/session/AbstractSession._clusterId<br/>At AbstractSession.java:[line 183]<br/>At HashedSession.java:[line 95]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67511');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67511" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.HashedSession<br/>In method org.eclipse.jetty.server.session.HashedSession.save(boolean)<br/>At HashedSession.java:[line 116]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/AbstractSession._nodeId<br/>Unknown source org/eclipse/jetty/server/session/AbstractSession.getId()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/session/AbstractSession._clusterId<br/>At AbstractSession.java:[line 183]<br/>At HashedSession.java:[line 116]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67224');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67224" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.HashSessionManager<br/>In method org.eclipse.jetty.server.session.HashSessionManager.restoreSession(String)<br/>At HashSessionManager.java:[line 503]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/HashSessionManager.restoreSession(Ljava/lang/String;)Lorg/eclipse/jetty/server/session/HashedSession; parameter 0<br/>At HashSessionManager.java:[line 379]<br/>At HashSessionManager.java:[line 496]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67610');">
<td>
<span class="priority-1">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67610" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.cleanExpiredSessions()<br/>At JDBCSessionIdManager.java:[line 887]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Tainted source org/eclipse/jetty/server/session/JDBCSessionIdManager.createCleanExpiredSessionsSql(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Tainted source java/sql/ResultSet.getString(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager.createCleanExpiredSessionsSql(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String; parameter 1<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager.createCleanExpiredSessionsSql(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String; parameter 0<br/>Unknown source java/util/Collection.iterator()Ljava/util/Iterator;<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._sessionTable<br/>At JDBCSessionIdManager.java:[line 876]<br/>At JDBCSessionIdManager.java:[line 877]<br/>At JDBCSessionIdManager.java:[line 887]<br/>At JDBCSessionIdManager.java:[line 930]<br/>At JDBCSessionIdManager.java:[line 931]<br/>At JDBCSessionIdManager.java:[line 932]<br/>At JDBCSessionIdManager.java:[line 935]<br/>At JDBCSessionIdManager.java:[line 937]<br/>At JDBCSessionIdManager.java:[line 939]<br/>At JDBCSessionIdManager.java:[line 942]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67819');">
<td>
<span class="priority-1">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67819" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.cleanExpiredSessions()<br/>At JDBCSessionIdManager.java:[line 889]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Tainted source org/eclipse/jetty/server/session/JDBCSessionIdManager.createCleanExpiredSessionsSql(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Tainted source java/sql/ResultSet.getString(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._sessionIdTable<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager.createCleanExpiredSessionsSql(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String; parameter 1<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager.createCleanExpiredSessionsSql(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String; parameter 0<br/>Unknown source java/util/Collection.iterator()Ljava/util/Iterator;<br/>At JDBCSessionIdManager.java:[line 876]<br/>At JDBCSessionIdManager.java:[line 877]<br/>At JDBCSessionIdManager.java:[line 889]<br/>At JDBCSessionIdManager.java:[line 930]<br/>At JDBCSessionIdManager.java:[line 931]<br/>At JDBCSessionIdManager.java:[line 932]<br/>At JDBCSessionIdManager.java:[line 935]<br/>At JDBCSessionIdManager.java:[line 937]<br/>At JDBCSessionIdManager.java:[line 939]<br/>At JDBCSessionIdManager.java:[line 942]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68028');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68028" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.cleanExpiredSessions()<br/>At JDBCSessionIdManager.java:[line 868]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._selectExpiredSessions<br/>At JDBCSessionIdManager.java:[line 868]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68107');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68107" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.delete(String)<br/>At JDBCSessionIdManager.java:[line 721]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._deleteId<br/>At JDBCSessionIdManager.java:[line 721]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68186');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68186" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.exists(String)<br/>At JDBCSessionIdManager.java:[line 748]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._queryId<br/>At JDBCSessionIdManager.java:[line 748]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68265');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68265" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.insert(String)<br/>At JDBCSessionIdManager.java:[line 689]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._queryId<br/>At JDBCSessionIdManager.java:[line 689]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68344');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68344" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.insert(String)<br/>At JDBCSessionIdManager.java:[line 695]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._insertId<br/>At JDBCSessionIdManager.java:[line 695]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68423');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68423" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.prepareTables()<br/>At JDBCSessionIdManager.java:[line 607]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._createSessionIdTable<br/>At JDBCSessionIdManager.java:[line 607]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68502');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68502" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.prepareTables()<br/>At JDBCSessionIdManager.java:[line 622]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._createSessionTable<br/>At JDBCSessionIdManager.java:[line 622]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68581');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68581" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.prepareTables()<br/>At JDBCSessionIdManager.java:[line 644]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._sessionTable<br/>At JDBCSessionIdManager.java:[line 626]<br/>At JDBCSessionIdManager.java:[line 644]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68670');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68670" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.prepareTables()<br/>At JDBCSessionIdManager.java:[line 646]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._sessionTable<br/>At JDBCSessionIdManager.java:[line 627]<br/>At JDBCSessionIdManager.java:[line 646]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68759');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68759" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.scavenge()<br/>At JDBCSessionIdManager.java:[line 784]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._selectBoundedExpiredSessions<br/>At JDBCSessionIdManager.java:[line 784]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68838');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68838" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.scavenge()<br/>At JDBCSessionIdManager.java:[line 821]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._deleteOldExpiredSessions<br/>At JDBCSessionIdManager.java:[line 821]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68993');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68993" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.getLoadStatement(Connection, String, String, String)<br/>At JDBCSessionIdManager.java:[line 216]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._sessionTable<br/>At JDBCSessionIdManager.java:[line 216]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69072');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69072" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.getLoadStatement(Connection, String, String, String)<br/>At JDBCSessionIdManager.java:[line 227]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._sessionTable<br/>At JDBCSessionIdManager.java:[line 227]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69151');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69151" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionManager.deleteSession(JDBCSessionManager$SessionData)<br/>At JDBCSessionManager.java:[line 1088]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._deleteSession<br/>At JDBCSessionManager.java:[line 1088]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69230');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69230" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionManager.storeSession(JDBCSessionManager$SessionData)<br/>At JDBCSessionManager.java:[line 921]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._insertSession<br/>At JDBCSessionManager.java:[line 921]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69309');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69309" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionManager.updateSession(JDBCSessionManager$SessionData)<br/>At JDBCSessionManager.java:[line 976]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._updateSession<br/>At JDBCSessionManager.java:[line 976]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69388');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69388" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionManager.updateSessionAccessTime(JDBCSessionManager$SessionData)<br/>At JDBCSessionManager.java:[line 1050]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._updateSessionAccessTime<br/>At JDBCSessionManager.java:[line 1050]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69467');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69467" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionManager.updateSessionNode(JDBCSessionManager$SessionData)<br/>At JDBCSessionManager.java:[line 1020]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/session/JDBCSessionIdManager._updateSessionNode<br/>At JDBCSessionManager.java:[line 1020]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66077');">
<td>
<span class="priority-1">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66077" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.ContextHandler<br/>In method org.eclipse.jetty.server.handler.ContextHandler.checkContext(String, Request, HttpServletResponse)<br/>At ContextHandler.java:[line 912]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/util/URIUtil.addPaths(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source org/eclipse/jetty/server/Request.getQueryString()Ljava/lang/String;<br/>At ContextHandler.java:[line 912]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66161');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66161" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.ContextHandler<br/>In method org.eclipse.jetty.server.handler.ContextHandler.checkContext(String, Request, HttpServletResponse)<br/>At ContextHandler.java:[line 914]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/util/URIUtil.addPaths(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66637');">
<td>
<span class="priority-1">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66637" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.MovedContextHandler$Redirector<br/>In method org.eclipse.jetty.server.handler.MovedContextHandler$Redirector.handle(String, Request, HttpServletRequest, HttpServletResponse)<br/>At MovedContextHandler.java:[line 124]<br/>Sink method javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/Request._serverName<br/>Unknown source org/eclipse/jetty/server/Request.getScheme()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/util/URIUtil.addPaths(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/handler/MovedContextHandler._newContextURL<br/>Unknown source org/eclipse/jetty/server/Request._scheme<br/>Unknown source org/eclipse/jetty/server/Request.getServerName()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/server/Request.getRootURL()Ljava/lang/StringBuilder;<br/>At Request.java:[line 1049]<br/>At Request.java:[line 1052]<br/>At Request.java:[line 1053]<br/>At Request.java:[line 1054]<br/>At Request.java:[line 1070]<br/>At Request.java:[line 1081]<br/>At Request.java:[line 1090]<br/>At Request.java:[line 1122]<br/>At Request.java:[line 1131]<br/>At Request.java:[line 1140]<br/>At Request.java:[line 1152]<br/>At MovedContextHandler.java:[line 109]<br/>At MovedContextHandler.java:[line 113]<br/>At MovedContextHandler.java:[line 115]<br/>At MovedContextHandler.java:[line 119]<br/>At MovedContextHandler.java:[line 120]<br/>At MovedContextHandler.java:[line 121]<br/>At MovedContextHandler.java:[line 124]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66921');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66921" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.ResourceHandler<br/>In method org.eclipse.jetty.server.handler.ResourceHandler.handle(String, Request, HttpServletRequest, HttpServletResponse)<br/>At ResourceHandler.java:[line 424]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/servlet/http/HttpServletResponse.encodeRedirectURL(Ljava/lang/String;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66990');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66990" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.ResourceHandler<br/>In method org.eclipse.jetty.server.handler.ResourceHandler.handle(String, Request, HttpServletRequest, HttpServletResponse)<br/>At ResourceHandler.java:[line 424]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66023');">
<td>
<span class="priority-2">SECUSS</span>
</td>
<td>Unencrypted server socket (instead of SSLServerSocket)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66023" style="display: none;">
<a href="#UNENCRYPTED_SERVER_SOCKET">Bug type UNENCRYPTED_SERVER_SOCKET (click for details)</a>
<br/>In class org.eclipse.jetty.server.bio.SocketConnector<br/>In method org.eclipse.jetty.server.bio.SocketConnector.newServerSocket(String, int, int)<br/>At SocketConnector.java:[line 96]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65969');">
<td>
<span class="priority-2">SECUSS</span>
</td>
<td>Unencrypted server socket (instead of SSLServerSocket)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65969" style="display: none;">
<a href="#UNENCRYPTED_SERVER_SOCKET">Bug type UNENCRYPTED_SERVER_SOCKET (click for details)</a>
<br/>In class org.eclipse.jetty.server.ShutdownMonitor<br/>In method org.eclipse.jetty.server.ShutdownMonitor.startListenSocket()<br/>At ShutdownMonitor.java:[line 284]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66230');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66230" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.ContextHandler<br/>In method org.eclipse.jetty.server.handler.ContextHandler.doHandle(String, Request, HttpServletRequest, HttpServletResponse)<br/>At ContextHandler.java:[line 1084]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/http/HttpException.getReason()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67043');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67043" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.eclipse.jetty.server.handler.ResourceHandler<br/>In method org.eclipse.jetty.server.handler.ResourceHandler.doDirectory(HttpServletRequest, HttpServletResponse, Resource)<br/>At ResourceHandler.java:[line 504]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/util/resource/Resource.getListHTML(Ljava/lang/String;Z)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68917');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>org.eclipse.jetty.server.session.JDBCSessionIdManager.prepareTables() passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68917" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.eclipse.jetty.server.session.JDBCSessionIdManager<br/>In method org.eclipse.jetty.server.session.JDBCSessionIdManager.prepareTables()<br/>At JDBCSessionIdManager.java:[line 644]<br/>Another occurrence at JDBCSessionIdManager.java:[line 646]<br/>Another occurrence at JDBCSessionIdManager.java:[line 622]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="HTTPONLY_COOKIE">HTTPONLY_COOKIE: Cookie without the HttpOnly flag</a>
</h2>
            
<p>
A new cookie is created without the <code>HttpOnly</code> flag set.
The <code>HttpOnly</code> flag is a directive to the browser to make sure that the cookie can not be red by
malicious script. When a user is the target of a "Cross-Site Scripting", the attacker would benefit greatly from getting
the session id for example.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
Cookie cookie = new Cookie("email",userName);
response.addCookie(cookie);
</pre>
</p>

<p>
<b>Solution (Specific configuration):</b><br/>
<pre>
Cookie cookie = new Cookie("email",userName);
cookie.setSecure(true);
cookie.setHttpOnly(true); //HttpOnly flag
</pre>
</p>

<p>
<b>Solution (Servlet 3.0 configuration):</b><br/>
<pre>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0"&gt;
[...]
&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;http-only&gt;true&lt;/http-only&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;
&lt;/web-app&gt;
</pre>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="https://blog.codinghorror.com/protecting-your-cookies-httponly/">Coding Horror blog: Protecting Your Cookies: HttpOnly</a><br/>
<a href="https://www.owasp.org/index.php/HttpOnly">OWASP: HttpOnly</a><br/>
<a href="https://www.rapid7.com/db/vulnerabilities/http-cookie-http-only-flag">Rapid7: Missing HttpOnly Flag From Cookie</a>
</p>

        
<h2>
<a name="HTTP_RESPONSE_SPLITTING">HTTP_RESPONSE_SPLITTING: Potential HTTP Response Splitting</a>
</h2>
            
<p>
    When an HTTP request contains unexpected <code>CR</code> and <code>LF</code> characters, the server may respond with an output stream
    that is interpreted as two different HTTP responses (instead of one).
    An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.
    According to OWASP, the issue has been fixed in virtually all modern Java EE application servers, but it is still better to validate the input.
    If you are concerned about this risk, you should test on the platform of concern to see
    if the underlx platform allows for <code>CR</code> or <code>LF</code> characters to be injected into headers.
    This weakness is reported with low priority because it requires the web container to be vulnerable.
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String author = request.getParameter(AUTHOR_PARAMETER);
// ...
Cookie cookie = new Cookie("author", author);
response.addCookie(cookie);</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://www.owasp.org/index.php/HTTP_Response_Splitting">OWASP: HTTP Response Splitting</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/113.html">CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</a>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
</p>


        
<h2>
<a name="INSECURE_COOKIE">INSECURE_COOKIE: Cookie without the secure flag</a>
</h2>
            
<p>
A new cookie is created without the <code>Secure</code> flag set.
The <code>Secure</code> flag is a directive to the browser to make sure that the cookie is not sent for insecure
communication (<code>http://</code>).
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
Cookie cookie = new Cookie("userName",userName);
response.addCookie(cookie);
</pre>
</p>

<p>
<b>Solution (Specific configuration):</b><br/>
<pre>
Cookie cookie = new Cookie("userName",userName);
cookie.setSecure(true); // Secure flag
cookie.setHttpOnly(true);
</pre>
</p>

<p>
<b>Solution (Servlet 3.0 configuration):</b><br/>
<pre>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0"&gt;
[...]
&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;http-only&gt;true&lt;/http-only&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;
&lt;/web-app&gt;
</pre>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="https://cwe.mitre.org/data/definitions/614.html">CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a><br/>
<a href="https://cwe.mitre.org/data/definitions/315.html">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a><br/>
<a href="https://cwe.mitre.org/data/definitions/311.html">CWE-311: Missing Encryption of Sensitive Data</a><br/>
<a href="https://www.owasp.org/index.php/SecureFlag">OWASP: Secure Flag</a><br/>
<a href="https://www.rapid7.com/db/vulnerabilities/http-cookie-secure-flag">Rapid7: Missing Secure Flag From SSL Cookie</a>
</p>

        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="UNVALIDATED_REDIRECT">UNVALIDATED_REDIRECT: Unvalidated Redirect</a>
</h2>
            
<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>
            
        
<h2>
<a name="URL_REWRITING">URL_REWRITING: URL rewriting method</a>
</h2>
            
<p>
The implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL.<br/>
URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties. Session ID in the URL can be disclosed in many ways, for example:<br/>
<ul>
    <li>Log files,</li>
    <li>The browser history,</li>
    <li>By copy-and-pasting it into an e-mail or posting,</li>
    <li>The HTTP Referrer.</li>
</ul>
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>out.println("Click &lt;a href=" +
                res.encodeURL(HttpUtils.getRequestURL(req).toString()) +
                "&gt;here&lt;/a&gt;");</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid using those methods. If you are looking to encode a URL String or form parameters do not confuse the URL rewriting methods with the URLEncoder class.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management">OWASP Top 10 2010-A3-Broken Authentication and Session Management</a><br/>
</p>
            
        
<h2>
<a name="UNENCRYPTED_SERVER_SOCKET">UNENCRYPTED_SERVER_SOCKET: Unencrypted Server Socket</a>
</h2>
            
<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain server socket (Cleartext communication):
<pre>ServerSocket soc = new ServerSocket(1234);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Server Socket (Secure communication):
<pre>ServerSocket soc = SSLServerSocketFactory.getDefault().createServerSocket(1234);</pre>
</p>
<p>Beyond using an SSL server socket, you need to make sure your use of SSLServerSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>

        
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        
<h2>
<a name="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE: Nonconstant string passed to execute or addBatch method on an SQL statement</a>
</h2>

  <p>The method invokes the execute or addBatch method on an SQL statement with a String that seems
to be dynamically generated. Consider using
a prepared statement instead. It is more efficient and less vulnerable to
SQL injection attacks.
</p>

    </body>
</html>
