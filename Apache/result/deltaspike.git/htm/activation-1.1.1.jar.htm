<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/deltaspike.git/activation-1.1.1.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>2066 lines of code analyzed,
	in 38 classes, 
	in 3 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">7</td>
<td align="right">3.39</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>7</b>
</td>
<td align="right">
<b>3.39</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">7</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>7</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.sun.activation.registries.LogSupport<br/>In method com.sun.activation.registries.LogSupport.log(String)<br/>At LogSupport.java:[line 73]<br/>Sink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/sun/activation/registries/LogSupport.log(Ljava/lang/String;)V parameter 0<br/>Method usage with tainted arguments detected<br/>At MailcapFile.java:[line 84]<br/>At MailcapFile.java:[line 130]<br/>At MailcapFile.java:[line 137]<br/>At MailcapFile.java:[line 141]<br/>At MailcapFile.java:[line 163]<br/>At MailcapFile.java:[line 170]<br/>At MailcapFile.java:[line 174]<br/>At MailcapFile.java:[line 216]<br/>At MailcapFile.java:[line 217]<br/>At MailcapFile.java:[line 221]<br/>At MailcapFile.java:[line 222]<br/>At MailcapFile.java:[line 224]<br/>At MailcapFile.java:[line 227]<br/>At MailcapFile.java:[line 228]<br/>At MailcapFile.java:[line 229]<br/>At MailcapFile.java:[line 230]<br/>At MailcapFile.java:[line 248]<br/>At MailcapFile.java:[line 264]<br/>At MailcapFile.java:[line 267]<br/>At MailcapFile.java:[line 274]<br/>At MailcapFile.java:[line 276]<br/>At MailcapFile.java:[line 279]<br/>At MailcapFile.java:[line 282]<br/>At MailcapFile.java:[line 291]<br/>At MailcapFile.java:[line 313]<br/>At MailcapFile.java:[line 320]<br/>At MailcapFile.java:[line 342]<br/>At MailcapFile.java:[line 349]<br/>At MailcapFile.java:[line 352]<br/>At MailcapFile.java:[line 407]<br/>At MailcapFile.java:[line 433]<br/>At MailcapFile.java:[line 438]<br/>At MailcapFile.java:[line 448]<br/>At MailcapFile.java:[line 474]<br/>At MailcapFile.java:[line 534]<br/>At MailcapTokenizer.java:[line 136]<br/>At MimeTypeEntry.java:[line 63]<br/>At MimeTypeFile.java:[line 134]<br/>At MimeTypeFile.java:[line 138]<br/>At MimeTypeFile.java:[line 141]<br/>At MimeTypeFile.java:[line 144]<br/>At MimeTypeFile.java:[line 148]<br/>At MimeTypeFile.java:[line 157]<br/>At MimeTypeFile.java:[line 178]<br/>At MimeTypeFile.java:[line 191]<br/>At MimeTypeFile.java:[line 213]<br/>At MailcapCommandMap.java:[line 203]<br/>At MailcapCommandMap.java:[line 208]<br/>At MailcapCommandMap.java:[line 239]<br/>At MailcapCommandMap.java:[line 241]<br/>At MailcapCommandMap.java:[line 249]<br/>At MailcapCommandMap.java:[line 256]<br/>At MailcapCommandMap.java:[line 262]<br/>At MailcapCommandMap.java:[line 291]<br/>At MailcapCommandMap.java:[line 304]<br/>At MailcapCommandMap.java:[line 322]<br/>At MailcapCommandMap.java:[line 324]<br/>At MailcapCommandMap.java:[line 536]<br/>At MailcapCommandMap.java:[line 548]<br/>At MailcapCommandMap.java:[line 558]<br/>At MailcapCommandMap.java:[line 560]<br/>At MailcapCommandMap.java:[line 562]<br/>At MailcapCommandMap.java:[line 563]<br/>At MailcapCommandMap.java:[line 576]<br/>At MailcapCommandMap.java:[line 578]<br/>At MailcapCommandMap.java:[line 580]<br/>At MailcapCommandMap.java:[line 581]<br/>At MailcapCommandMap.java:[line 594]<br/>At MimetypesFileTypeMap.java:[line 153]<br/>At MimetypesFileTypeMap.java:[line 158]<br/>At MimetypesFileTypeMap.java:[line 189]<br/>At MimetypesFileTypeMap.java:[line 191]<br/>At MimetypesFileTypeMap.java:[line 199]<br/>At MimetypesFileTypeMap.java:[line 206]<br/>At MimetypesFileTypeMap.java:[line 211]<br/>At MimetypesFileTypeMap.java:[line 239]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66385');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66385" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.sun.activation.registries.MimeTypeFile<br/>In method new com.sun.activation.registries.MimeTypeFile(String)<br/>At MimeTypeFile.java:[line 61]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/sun/activation/registries/MimeTypeFile.fname<br/>At MimeTypeFile.java:[line 61]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66464');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66464" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class javax.activation.FileDataSource<br/>In method new javax.activation.FileDataSource(String)<br/>At FileDataSource.java:[line 98]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/activation/FileDataSource.&lt;init&gt;(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66538');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66538" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class javax.activation.SecuritySupport$5<br/>In method javax.activation.SecuritySupport$5.run()<br/>At SecuritySupport.java:[line 137]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source javax/activation/SecuritySupport$5.val$url<br/>At SecuritySupport.java:[line 137]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66617');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66617" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class javax.activation.URLDataSource<br/>In method javax.activation.URLDataSource.getContentType()<br/>At URLDataSource.java:[line 91]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source javax/activation/URLDataSource.url<br/>At URLDataSource.java:[line 91]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66696');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66696" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class javax.activation.URLDataSource<br/>In method javax.activation.URLDataSource.getInputStream()<br/>At URLDataSource.java:[line 120]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source javax/activation/URLDataSource.url<br/>At URLDataSource.java:[line 120]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66775');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66775" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class javax.activation.URLDataSource<br/>In method javax.activation.URLDataSource.getOutputStream()<br/>At URLDataSource.java:[line 133]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source javax/activation/URLDataSource.url<br/>At URLDataSource.java:[line 133]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            </body>
</html>
