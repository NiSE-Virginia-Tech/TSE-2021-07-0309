<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/dbunit-2.5.4.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>15114 lines of code analyzed,
	in 391 classes, 
	in 30 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">4</td>
<td align="right">0.26</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">50</td>
<td align="right">3.31</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>54</b>
</td>
<td align="right">
<b>3.57</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">53</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>53</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66293');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66293" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.database.DatabaseDataSet<br/>In method org.dbunit.database.DatabaseDataSet.initialize(String)<br/>At DatabaseDataSet.java:[line 228]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>At DatabaseDataSet.java:[line 224]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66372');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66372" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.database.DatabaseDataSet<br/>In method org.dbunit.database.DatabaseDataSet.initialize(String)<br/>At DatabaseDataSet.java:[line 233]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>At DatabaseDataSet.java:[line 224]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66451');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66451" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.database.DatabaseTableMetaData<br/>In method org.dbunit.database.DatabaseTableMetaData.getColumns()<br/>At DatabaseTableMetaData.java:[line 341]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>At DatabaseTableMetaData.java:[line 341]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66530');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66530" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.database.DefaultMetadataHandler<br/>In method org.dbunit.database.DefaultMetadataHandler.matches(ResultSet, String, String, String, String, boolean)<br/>At DefaultMetadataHandler.java:[line 80]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/DefaultMetadataHandler.matches(Ljava/sql/ResultSet;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z parameter 4<br/>Unknown source org/dbunit/database/DefaultMetadataHandler.matches(Ljava/sql/ResultSet;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z parameter 3<br/>Unknown source org/dbunit/database/DefaultMetadataHandler.matches(Ljava/sql/ResultSet;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z parameter 2<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Unknown source org/dbunit/database/DefaultMetadataHandler.matches(Ljava/sql/ResultSet;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z parameter 1<br/>At DefaultMetadataHandler.java:[line 74]<br/>At DefaultMetadataHandler.java:[line 75]<br/>At DefaultMetadataHandler.java:[line 76]<br/>At DefaultMetadataHandler.java:[line 77]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66659');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66659" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.database.PrimaryKeyFilter<br/>In method org.dbunit.database.PrimaryKeyFilter.addReverseEdge(ForeignKeyRelationshipEdge, Set)<br/>At PrimaryKeyFilter.java:[line 325]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.getFKColumn()Ljava/lang/String;<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.fkColumn<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Tainted source org/dbunit/database/PrimaryKeyFilter.getPKColumn(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.getFrom()Ljava/lang/Object;<br/>Tainted source org/dbunit/util/SQLHelper.getPrimaryKeyColumn(Ljava/sql/Connection;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/search/Edge.nodeFrom<br/>Unknown source org/dbunit/database/PrimaryKeyFilter.pkColumnPerTable<br/>At PrimaryKeyFilter.java:[line 315]<br/>At PrimaryKeyFilter.java:[line 316]<br/>At PrimaryKeyFilter.java:[line 317]<br/>At PrimaryKeyFilter.java:[line 319]<br/>At PrimaryKeyFilter.java:[line 325]<br/>At PrimaryKeyFilter.java:[line 360]<br/>At PrimaryKeyFilter.java:[line 363]<br/>At ForeignKeyRelationshipEdge.java:[line 66]<br/>At SQLHelper.java:[line 78]<br/>At Edge.java:[line 60]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66868');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66868" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.database.PrimaryKeyFilter<br/>In method org.dbunit.database.PrimaryKeyFilter.addReverseEdge(ForeignKeyRelationshipEdge, Set)<br/>At PrimaryKeyFilter.java:[line 331]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.getFKColumn()Ljava/lang/String;<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Tainted source org/dbunit/database/PrimaryKeyFilter.getPKColumn(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.getFrom()Ljava/lang/Object;<br/>Unknown source org/dbunit/database/PrimaryKeyFilter.addReverseEdge(Lorg/dbunit/database/search/ForeignKeyRelationshipEdge;Ljava/util/Set;)V parameter 0<br/>Tainted source org/dbunit/util/SQLHelper.getPrimaryKeyColumn(Ljava/sql/Connection;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/search/Edge.nodeFrom<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.fkColumn<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/dbunit/database/PrimaryKeyFilter.pkColumnPerTable<br/>At PrimaryKeyFilter.java:[line 315]<br/>At PrimaryKeyFilter.java:[line 316]<br/>At PrimaryKeyFilter.java:[line 317]<br/>At PrimaryKeyFilter.java:[line 319]<br/>At PrimaryKeyFilter.java:[line 325]<br/>At PrimaryKeyFilter.java:[line 328]<br/>At PrimaryKeyFilter.java:[line 329]<br/>At PrimaryKeyFilter.java:[line 331]<br/>At PrimaryKeyFilter.java:[line 360]<br/>At PrimaryKeyFilter.java:[line 363]<br/>At ForeignKeyRelationshipEdge.java:[line 66]<br/>At SQLHelper.java:[line 78]<br/>At Edge.java:[line 60]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67623');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67623" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.database.search.AbstractMetaDataBasedSearchCallback<br/>In method org.dbunit.database.search.AbstractMetaDataBasedSearchCallback.createFKEdge(ResultSet, int, String, String, String, String)<br/>At AbstractMetaDataBasedSearchCallback.java:[line 250]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.createFKEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/database/search/ForeignKeyRelationshipEdge; parameter 0<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.createFKEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/database/search/ForeignKeyRelationshipEdge; parameter 1<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.createFKEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/database/search/ForeignKeyRelationshipEdge; parameter 2<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.createFKEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/database/search/ForeignKeyRelationshipEdge; parameter 3<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.createFKEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/database/search/ForeignKeyRelationshipEdge; parameter 5<br/>Method usage with tainted arguments detected<br/>At AbstractMetaDataBasedSearchCallback.java:[line 206]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 207]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 210]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 211]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 213]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 281]<br/>At ImportedAndExportedKeysSearchCallbackFilteredByPKs.java:[line 94]<br/>At ImportedKeysSearchCallbackFilteredByPKs.java:[line 84]<br/>At QualifiedTableName.java:[line 148]<br/>At QualifiedTableName.java:[line 154]<br/>At QualifiedTableName.java:[line 195]<br/>At QualifiedTableName.java:[line 196]<br/>At QualifiedTableName.java:[line 204]<br/>At QualifiedTableName.java:[line 235]<br/>At QualifiedTableName.java:[line 241]<br/>At QualifiedTableName.java:[line 242]<br/>At QualifiedTableName.java:[line 244]<br/>At QualifiedTableName.java:[line 250]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67897');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67897" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.database.search.AbstractMetaDataBasedSearchCallback<br/>In method org.dbunit.database.search.AbstractMetaDataBasedSearchCallback.newEdge(ResultSet, int, String, String, String, String)<br/>At AbstractMetaDataBasedSearchCallback.java:[line 277]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.newEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/util/search/IEdge; parameter 5<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.newEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/util/search/IEdge; parameter 1<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.newEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/util/search/IEdge; parameter 2<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.newEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/util/search/IEdge; parameter 3<br/>Unknown source org/dbunit/database/search/AbstractMetaDataBasedSearchCallback.newEdge(Ljava/sql/ResultSet;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/dbunit/util/search/IEdge; parameter 0<br/>Method usage with tainted arguments detected<br/>At AbstractMetaDataBasedSearchCallback.java:[line 206]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 207]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 210]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 211]<br/>At AbstractMetaDataBasedSearchCallback.java:[line 213]<br/>At QualifiedTableName.java:[line 148]<br/>At QualifiedTableName.java:[line 154]<br/>At QualifiedTableName.java:[line 195]<br/>At QualifiedTableName.java:[line 196]<br/>At QualifiedTableName.java:[line 204]<br/>At QualifiedTableName.java:[line 235]<br/>At QualifiedTableName.java:[line 241]<br/>At QualifiedTableName.java:[line 242]<br/>At QualifiedTableName.java:[line 244]<br/>At QualifiedTableName.java:[line 250]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68517');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68517" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.dataset.Column$AutoIncrement<br/>In method org.dbunit.dataset.Column$AutoIncrement.autoIncrementValue(String)<br/>At Column.java:[line 369]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/Column$AutoIncrement.autoIncrementValue(Ljava/lang/String;)Lorg/dbunit/dataset/Column$AutoIncrement; parameter 0<br/>Method usage with tainted arguments detected<br/>At Column.java:[line 351]<br/>At SQLHelper.java:[line 402]<br/>At SQLHelper.java:[line 404]<br/>At SQLHelper.java:[line 421]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68918');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68918" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvParserImpl<br/>In method org.dbunit.dataset.csv.CsvParserImpl.parse(String)<br/>At CsvParserImpl.java:[line 82]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/csv/CsvParserImpl.parse(Ljava/lang/String;)Ljava/util/List; parameter 0<br/>Method usage with tainted arguments detected<br/>At CsvParserImpl.java:[line 144]<br/>At CsvParserImpl.java:[line 148]<br/>At CsvParserImpl.java:[line 172]<br/>At CsvParserImpl.java:[line 178]<br/>At CsvParserImpl.java:[line 179]<br/>At CsvParserImpl.java:[line 183]<br/>At CsvParserImpl.java:[line 186]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69473');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69473" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvURLProducer<br/>In method org.dbunit.dataset.csv.CsvURLProducer.produceFromURL(URL)<br/>At CsvURLProducer.java:[line 125]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/csv/CsvURLProducer.produceFromURL(Ljava/net/URL;)V parameter 0<br/>Method usage with tainted arguments detected<br/>At CsvProducer.java:[line 157]<br/>At CsvProducer.java:[line 158]<br/>At CsvProducer.java:[line 160]<br/>At CsvURLProducer.java:[line 103]<br/>At CsvURLProducer.java:[line 104]<br/>At CsvURLProducer.java:[line 105]<br/>At CsvURLProducer.java:[line 107]<br/>At CsvURLProducer.java:[line 125]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70299');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70299" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.dataset.sqlloader.SqlLoaderControlParserImpl<br/>In method org.dbunit.dataset.sqlloader.SqlLoaderControlParserImpl.parse(String)<br/>At SqlLoaderControlParserImpl.java:[line 122]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/sqlloader/SqlLoaderControlParserImpl.parse(Ljava/lang/String;)Ljava/util/List; parameter 0<br/>Method usage with tainted arguments detected<br/>At SqlLoaderControlParserImpl.java:[line 356]<br/>At SqlLoaderControlParserImpl.java:[line 367]<br/>At SqlLoaderControlParserImpl.java:[line 368]<br/>At SqlLoaderControlParserImpl.java:[line 373]<br/>At SqlLoaderControlParserImpl.java:[line 377]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70992');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70992" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.ext.db2.Db2MetadataHandler<br/>In method org.dbunit.ext.db2.Db2MetadataHandler.matches(ResultSet, String, String, String, String, boolean)<br/>At Db2MetadataHandler.java:[line 77]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/ext/db2/Db2MetadataHandler.matches(Ljava/sql/ResultSet;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z parameter 4<br/>Unknown source org/dbunit/ext/db2/Db2MetadataHandler.matches(Ljava/sql/ResultSet;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z parameter 3<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Unknown source org/dbunit/ext/db2/Db2MetadataHandler.matches(Ljava/sql/ResultSet;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z parameter 2<br/>Unknown source org/dbunit/ext/db2/Db2MetadataHandler.matches(Ljava/sql/ResultSet;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z parameter 1<br/>At Db2MetadataHandler.java:[line 71]<br/>At Db2MetadataHandler.java:[line 72]<br/>At Db2MetadataHandler.java:[line 73]<br/>At Db2MetadataHandler.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71649');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71649" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.ext.mysql.MySqlMetadataHandler<br/>In method org.dbunit.ext.mysql.MySqlMetadataHandler.getSchema(ResultSet)<br/>At MySqlMetadataHandler.java:[line 99]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>At MySqlMetadataHandler.java:[line 94]<br/>At MySqlMetadataHandler.java:[line 99]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71738');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71738" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.ext.netezza.NetezzaMetadataHandler<br/>In method org.dbunit.ext.netezza.NetezzaMetadataHandler.getSchema(ResultSet)<br/>At NetezzaMetadataHandler.java:[line 102]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>At NetezzaMetadataHandler.java:[line 96]<br/>At NetezzaMetadataHandler.java:[line 102]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71827');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71827" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.ext.netezza.NetezzaMetadataHandler<br/>In method org.dbunit.ext.netezza.NetezzaMetadataHandler.matches(ResultSet, String, String, String, String, boolean)<br/>At NetezzaMetadataHandler.java:[line 74]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>At NetezzaMetadataHandler.java:[line 68]<br/>At NetezzaMetadataHandler.java:[line 69]<br/>At NetezzaMetadataHandler.java:[line 70]<br/>At NetezzaMetadataHandler.java:[line 71]<br/>At NetezzaMetadataHandler.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72040');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72040" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.util.Base64<br/>In method org.dbunit.util.Base64.main(String[])<br/>At Base64.java:[line 138]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source org/dbunit/util/Base64.main([Ljava/lang/String;)V parameter 0<br/>At Base64.java:[line 138]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72173');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72173" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.util.SQLHelper<br/>In method org.dbunit.util.SQLHelper.createColumn(ResultSet, IDataTypeFactory, boolean)<br/>At SQLHelper.java:[line 413]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>At SQLHelper.java:[line 387]<br/>At SQLHelper.java:[line 388]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72262');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.warn(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72262" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.util.SQLHelper<br/>In method org.dbunit.util.SQLHelper.createColumn(ResultSet, IDataTypeFactory, boolean)<br/>At SQLHelper.java:[line 429]<br/>Sink method org/slf4j/Logger.warn(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>At SQLHelper.java:[line 387]<br/>At SQLHelper.java:[line 388]<br/>At SQLHelper.java:[line 396]<br/>At SQLHelper.java:[line 429]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72519');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72519" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.dbunit.util.xml.XmlWriter<br/>In method org.dbunit.util.xml.XmlWriter.main(String[])<br/>At XmlWriter.java:[line 590]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;[Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source org/dbunit/util/xml/XmlWriter.main([Ljava/lang/String;)V parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72119');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.dbunit.util.Base64.decodeToObject(String)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72119" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.dbunit.util.Base64<br/>In method org.dbunit.util.Base64.decodeToObject(String)<br/>At Base64.java:[line 578]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68631');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68631" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvDataSetWriter<br/>In method org.dbunit.dataset.csv.CsvDataSetWriter.endDataSet()<br/>At CsvDataSetWriter.java:[line 105]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 1<br/>Unknown source org/dbunit/dataset/csv/CsvDataSetWriter.getTheDirectory()Ljava/lang/String;<br/>Unknown source org/dbunit/dataset/csv/CsvDataSetWriter.theDirectory<br/>At CsvDataSetWriter.java:[line 105]<br/>At CsvDataSetWriter.java:[line 240]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68725');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68725" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvDataSetWriter<br/>In method org.dbunit.dataset.csv.CsvDataSetWriter.startDataSet()<br/>At CsvDataSetWriter.java:[line 95]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/csv/CsvDataSetWriter.getTheDirectory()Ljava/lang/String;<br/>Unknown source org/dbunit/dataset/csv/CsvDataSetWriter.theDirectory<br/>At CsvDataSetWriter.java:[line 95]<br/>At CsvDataSetWriter.java:[line 240]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69136');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69136" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvProducer<br/>In method org.dbunit.dataset.csv.CsvProducer.produce()<br/>At CsvProducer.java:[line 93]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source java/util/Iterator.next()Ljava/lang/Object;<br/>Tainted source java/io/BufferedReader.readLine()Ljava/lang/String;<br/>Tainted source org/dbunit/dataset/csv/CsvProducer.getTables(Ljava/net/URL;Ljava/lang/String;)Ljava/util/List;<br/>At CsvProducer.java:[line 89]<br/>At CsvProducer.java:[line 90]<br/>At CsvProducer.java:[line 91]<br/>At CsvProducer.java:[line 93]<br/>At CsvProducer.java:[line 157]<br/>At CsvProducer.java:[line 158]<br/>At CsvProducer.java:[line 160]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69285');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69285" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvProducer<br/>In method org.dbunit.dataset.csv.CsvProducer.produce()<br/>At CsvProducer.java:[line 81]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/csv/CsvProducer._theDirectory<br/>At CsvProducer.java:[line 81]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69627');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69627" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.datatype.BytesDataType<br/>In method org.dbunit.dataset.datatype.BytesDataType.loadFile(String)<br/>At BytesDataType.java:[line 81]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/datatype/BytesDataType.loadFile(Ljava/lang/String;)[B parameter 0<br/>At BinaryStreamDataType.java:[line 96]<br/>At BlobDataType.java:[line 65]<br/>At BlobDataType.java:[line 76]<br/>At BytesDataType.java:[line 123]<br/>At BytesDataType.java:[line 156]<br/>At BytesDataType.java:[line 197]<br/>At BytesDataType.java:[line 273]<br/>At BytesDataType.java:[line 274]<br/>At UuidAwareBytesDataType.java:[line 60]<br/>At UuidAwareBytesDataType.java:[line 73]<br/>At OracleBlobDataType.java:[line 57]<br/>At OracleBlobDataType.java:[line 67]<br/>At OracleBlobDataType.java:[line 82]<br/>At OracleXMLTypeDataType.java:[line 60]<br/>At OracleXMLTypeDataType.java:[line 64]<br/>At OracleXMLTypeDataType.java:[line 77]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70423');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70423" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.sqlloader.SqlLoaderControlParserImpl<br/>In method org.dbunit.dataset.sqlloader.SqlLoaderControlParserImpl.parse(URL)<br/>At SqlLoaderControlParserImpl.java:[line 149]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/sqlloader/SqlLoaderControlParserImpl.parse(Ljava/net/URL;)Ljava/util/List; parameter 0<br/>Unknown source java/net/URL.toString()Ljava/lang/String;<br/>Method usage not detected<br/>At SqlLoaderControlParserImpl.java:[line 149]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70512');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70512" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.sqlloader.SqlLoaderControlParserImpl<br/>In method org.dbunit.dataset.sqlloader.SqlLoaderControlParserImpl.resolveFile(File, String)<br/>At SqlLoaderControlParserImpl.java:[line 220]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/sqlloader/SqlLoaderControlParserImpl.resolveFile(Ljava/io/File;Ljava/lang/String;)Ljava/io/File; parameter 0<br/>At SqlLoaderControlParserImpl.java:[line 182]<br/>At SqlLoaderControlParserImpl.java:[line 183]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70601');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70601" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.sqlloader.SqlLoaderControlParserImpl<br/>In method org.dbunit.dataset.sqlloader.SqlLoaderControlParserImpl.resolveFile(File, String)<br/>At SqlLoaderControlParserImpl.java:[line 233]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/sqlloader/SqlLoaderControlParserImpl.resolveFile(Ljava/io/File;Ljava/lang/String;)Ljava/io/File; parameter 0<br/>At SqlLoaderControlParserImpl.java:[line 182]<br/>At SqlLoaderControlParserImpl.java:[line 183]<br/>At SqlLoaderControlParserImpl.java:[line 224]<br/>At SqlLoaderControlParserImpl.java:[line 227]<br/>At SqlLoaderControlParserImpl.java:[line 231]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70720');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70720" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.sqlloader.SqlLoaderControlProducer<br/>In method new org.dbunit.dataset.sqlloader.SqlLoaderControlProducer(String, String)<br/>At SqlLoaderControlProducer.java:[line 89]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/sqlloader/SqlLoaderControlProducer.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V parameter 0<br/>Method usage not detected<br/>At SqlLoaderControlDataSet.java:[line 69]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70804');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70804" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.sqlloader.SqlLoaderControlProducer<br/>In method new org.dbunit.dataset.sqlloader.SqlLoaderControlProducer(String, String)<br/>At SqlLoaderControlProducer.java:[line 89]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/sqlloader/SqlLoaderControlProducer.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V parameter 1<br/>Method usage not detected<br/>At SqlLoaderControlDataSet.java:[line 69]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70888');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70888" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.dbunit.dataset.sqlloader.SqlLoaderControlProducer<br/>In method org.dbunit.dataset.sqlloader.SqlLoaderControlProducer.produce()<br/>At SqlLoaderControlProducer.java:[line 148]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/dbunit/dataset/sqlloader/SqlLoaderControlProducer.orderedTableNames<br/>At SqlLoaderControlProducer.java:[line 145]<br/>At SqlLoaderControlProducer.java:[line 146]<br/>At SqlLoaderControlProducer.java:[line 148]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68819');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileWriter.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68819" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvDataSetWriter<br/>In method org.dbunit.dataset.csv.CsvDataSetWriter.startTable(ITableMetaData)<br/>At CsvDataSetWriter.java:[line 131]<br/>Sink method java/io/FileWriter.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/ITableMetaData.getTableName()Ljava/lang/String;<br/>Unknown source org/dbunit/dataset/csv/CsvDataSetWriter.getTheDirectory()Ljava/lang/String;<br/>Unknown source org/dbunit/dataset/csv/CsvDataSetWriter.theDirectory<br/>At CsvDataSetWriter.java:[line 131]<br/>At CsvDataSetWriter.java:[line 240]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.AbstractDatabaseConnection<br/>In method org.dbunit.database.AbstractDatabaseConnection.getRowCount(String, String)<br/>At AbstractDatabaseConnection.java:[line 178]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 2<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/dbunit/util/QualifiedTableName.table<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source org/dbunit/database/AbstractDatabaseConnection.getRowCount(Ljava/lang/String;Ljava/lang/String;)I parameter 0<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Unknown source org/dbunit/util/QualifiedTableName.escapePattern<br/>Unknown source org/dbunit/util/QualifiedTableName.schema<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName()Ljava/lang/String;<br/>At AbstractDatabaseConnection.java:[line 151]<br/>At AbstractDatabaseConnection.java:[line 166]<br/>At AbstractDatabaseConnection.java:[line 167]<br/>At AbstractDatabaseConnection.java:[line 170]<br/>At AbstractDatabaseConnection.java:[line 171]<br/>At AbstractDatabaseConnection.java:[line 178]<br/>At QualifiedTableName.java:[line 128]<br/>At QualifiedTableName.java:[line 195]<br/>At QualifiedTableName.java:[line 196]<br/>At QualifiedTableName.java:[line 204]<br/>At QualifiedTableName.java:[line 235]<br/>At QualifiedTableName.java:[line 241]<br/>At QualifiedTableName.java:[line 242]<br/>At QualifiedTableName.java:[line 244]<br/>At QualifiedTableName.java:[line 250]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65835');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65835" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.AbstractResultSetTable<br/>In method new org.dbunit.database.AbstractResultSetTable(String, String, IDatabaseConnection, boolean)<br/>At AbstractResultSetTable.java:[line 83]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/AbstractResultSetTable.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;Lorg/dbunit/database/IDatabaseConnection;Z)V parameter 2<br/>Method usage not detected<br/>At AbstractResultSetTable.java:[line 63]<br/>At CachedResultSetTableFactory.java:[line 52]<br/>At ForwardOnlyResultSetTable.java:[line 65]<br/>At ForwardOnlyResultSetTableFactory.java:[line 54]<br/>At ScrollableResultSetTable.java:[line 96]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65959');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65959" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.AbstractResultSetTable<br/>In method new org.dbunit.database.AbstractResultSetTable(ITableMetaData, IDatabaseConnection)<br/>At AbstractResultSetTable.java:[line 110]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/dbunit/util/QualifiedTableName.table<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.escapePattern<br/>Unknown source org/dbunit/database/AbstractResultSetTable.getSelectStatement(Ljava/lang/String;Lorg/dbunit/dataset/ITableMetaData;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 2<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source org/dbunit/database/DatabaseDataSet.getSelectStatement(Ljava/lang/String;Lorg/dbunit/dataset/ITableMetaData;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.schema<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName()Ljava/lang/String;<br/>At AbstractResultSetTable.java:[line 105]<br/>At AbstractResultSetTable.java:[line 134]<br/>At DatabaseDataSet.java:[line 140]<br/>At DatabaseDataSet.java:[line 142]<br/>At DatabaseDataSet.java:[line 144]<br/>At DatabaseDataSet.java:[line 148]<br/>At DatabaseDataSet.java:[line 149]<br/>At DatabaseDataSet.java:[line 157]<br/>At DatabaseDataSet.java:[line 161]<br/>At DatabaseDataSet.java:[line 163]<br/>At DatabaseDataSet.java:[line 167]<br/>At QualifiedTableName.java:[line 128]<br/>At QualifiedTableName.java:[line 195]<br/>At QualifiedTableName.java:[line 196]<br/>At QualifiedTableName.java:[line 204]<br/>At QualifiedTableName.java:[line 235]<br/>At QualifiedTableName.java:[line 241]<br/>At QualifiedTableName.java:[line 242]<br/>At QualifiedTableName.java:[line 244]<br/>At QualifiedTableName.java:[line 250]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67117');">
<td>
<span class="priority-1">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67117" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.PrimaryKeyFilter<br/>In method org.dbunit.database.PrimaryKeyFilter.addReverseEdge(ForeignKeyRelationshipEdge, Set)<br/>At PrimaryKeyFilter.java:[line 327]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.getFKColumn()Ljava/lang/String;<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Tainted source org/dbunit/database/PrimaryKeyFilter.getPKColumn(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.getFrom()Ljava/lang/Object;<br/>Tainted source org/dbunit/util/SQLHelper.getPrimaryKeyColumn(Ljava/sql/Connection;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/search/Edge.nodeFrom<br/>Unknown source org/dbunit/database/search/ForeignKeyRelationshipEdge.fkColumn<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/dbunit/database/PrimaryKeyFilter.pkColumnPerTable<br/>At PrimaryKeyFilter.java:[line 315]<br/>At PrimaryKeyFilter.java:[line 316]<br/>At PrimaryKeyFilter.java:[line 317]<br/>At PrimaryKeyFilter.java:[line 319]<br/>At PrimaryKeyFilter.java:[line 325]<br/>At PrimaryKeyFilter.java:[line 360]<br/>At PrimaryKeyFilter.java:[line 363]<br/>At ForeignKeyRelationshipEdge.java:[line 66]<br/>At SQLHelper.java:[line 78]<br/>At Edge.java:[line 60]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67326');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67326" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.PrimaryKeyFilter<br/>In method org.dbunit.database.PrimaryKeyFilter.scanPKs(String, String, Set, List)<br/>At PrimaryKeyFilter.java:[line 261]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/PrimaryKeyFilter.scanPKs(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;Ljava/util/List;)V parameter 2<br/>At PrimaryKeyFilter.java:[line 173]<br/>At PrimaryKeyFilter.java:[line 175]<br/>At PrimaryKeyFilter.java:[line 176]<br/>At PrimaryKeyFilter.java:[line 178]<br/>At PrimaryKeyFilter.java:[line 180]<br/>At PrimaryKeyFilter.java:[line 182]<br/>At PrimaryKeyFilter.java:[line 241]<br/>At PrimaryKeyFilter.java:[line 243]<br/>At PrimaryKeyFilter.java:[line 247]<br/>At PrimaryKeyFilter.java:[line 253]<br/>At ForeignKeyRelationshipEdge.java:[line 66]<br/>At Column.java:[line 149]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68141');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68141" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.statement.AbstractPreparedBatchStatement<br/>In method new org.dbunit.database.statement.AbstractPreparedBatchStatement(String, Connection)<br/>At AbstractPreparedBatchStatement.java:[line 49]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/statement/AbstractPreparedBatchStatement.&lt;init&gt;(Ljava/lang/String;Ljava/sql/Connection;)V parameter 1<br/>At PreparedBatchStatement.java:[line 52]<br/>At PreparedStatementFactory.java:[line 74]<br/>At PreparedStatementFactory.java:[line 78]<br/>At SimplePreparedStatement.java:[line 53]<br/>At OperationData.java:[line 51]<br/>At RefreshOperation.java:[line 254]<br/>At RefreshOperation.java:[line 277]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68280');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.addBatch(Ljava/lang/String;)V can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68280" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.statement.BatchStatement<br/>In method org.dbunit.database.statement.BatchStatement.addBatch(String)<br/>At BatchStatement.java:[line 52]<br/>Sink method java/sql/Statement.addBatch(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/statement/BatchStatement.addBatch(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68354');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68354" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.statement.CompoundStatement<br/>In method org.dbunit.database.statement.CompoundStatement.executeBatch()<br/>At CompoundStatement.java:[line 62]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/dbunit/database/statement/CompoundStatement._buffer<br/>At CompoundStatement.java:[line 62]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68438');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68438" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.database.statement.SimpleStatement<br/>In method org.dbunit.database.statement.SimpleStatement.executeBatch()<br/>At SimpleStatement.java:[line 69]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/dbunit/database/statement/SimpleStatement._list<br/>At SimpleStatement.java:[line 65]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71121');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71121" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.ext.mssql.InsertIdentityOperation<br/>In method org.dbunit.ext.mssql.InsertIdentityOperation.execute(IDatabaseConnection, IDataSet)<br/>At InsertIdentityOperation.java:[line 212]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 2<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/dbunit/util/QualifiedTableName.table<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source org/dbunit/ext/mssql/InsertIdentityOperation.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Lorg/dbunit/database/IDatabaseConnection;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Unknown source org/dbunit/util/QualifiedTableName.escapePattern<br/>Unknown source org/dbunit/util/QualifiedTableName.schema<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName()Ljava/lang/String;<br/>At InsertIdentityOperation.java:[line 209]<br/>At InsertIdentityOperation.java:[line 211]<br/>At InsertIdentityOperation.java:[line 212]<br/>At AbstractOperation.java:[line 61]<br/>At QualifiedTableName.java:[line 128]<br/>At QualifiedTableName.java:[line 195]<br/>At QualifiedTableName.java:[line 196]<br/>At QualifiedTableName.java:[line 204]<br/>At QualifiedTableName.java:[line 235]<br/>At QualifiedTableName.java:[line 241]<br/>At QualifiedTableName.java:[line 242]<br/>At QualifiedTableName.java:[line 244]<br/>At QualifiedTableName.java:[line 250]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71385');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71385" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.ext.mssql.InsertIdentityOperation<br/>In method org.dbunit.ext.mssql.InsertIdentityOperation.execute(IDatabaseConnection, IDataSet)<br/>At InsertIdentityOperation.java:[line 229]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 2<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/dbunit/util/QualifiedTableName.table<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/dbunit/util/QualifiedTableName.getEscapedName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source org/dbunit/ext/mssql/InsertIdentityOperation.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Lorg/dbunit/database/IDatabaseConnection;)Ljava/lang/String;<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Unknown source org/dbunit/util/QualifiedTableName.escapePattern<br/>Unknown source org/dbunit/util/QualifiedTableName.schema<br/>Unknown source org/dbunit/util/QualifiedTableName.getQualifiedName()Ljava/lang/String;<br/>At InsertIdentityOperation.java:[line 226]<br/>At InsertIdentityOperation.java:[line 228]<br/>At InsertIdentityOperation.java:[line 229]<br/>At AbstractOperation.java:[line 61]<br/>At QualifiedTableName.java:[line 128]<br/>At QualifiedTableName.java:[line 195]<br/>At QualifiedTableName.java:[line 196]<br/>At QualifiedTableName.java:[line 204]<br/>At QualifiedTableName.java:[line 235]<br/>At QualifiedTableName.java:[line 241]<br/>At QualifiedTableName.java:[line 242]<br/>At QualifiedTableName.java:[line 244]<br/>At QualifiedTableName.java:[line 250]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71946');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71946" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.dbunit.operation.RefreshOperation$RowExistOperation<br/>In method new org.dbunit.operation.RefreshOperation$RowExistOperation(RefreshOperation, IDatabaseConnection, ITableMetaData)<br/>At RefreshOperation.java:[line 301]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/dbunit/operation/OperationData._sql<br/>Unknown source org/dbunit/operation/OperationData.getSql()Ljava/lang/String;<br/>At OperationData.java:[line 51]<br/>At RefreshOperation.java:[line 301]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69062');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69062" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvParserImpl<br/>In method org.dbunit.dataset.csv.CsvParserImpl.parse(URL)<br/>At CsvParserImpl.java:[line 109]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/csv/CsvParserImpl.parse(Ljava/net/URL;)Ljava/util/List; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69364');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69364" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.dbunit.dataset.csv.CsvProducer<br/>In method org.dbunit.dataset.csv.CsvProducer.getTables(URL, String)<br/>At CsvProducer.java:[line 152]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/csv/CsvProducer.getTables(Ljava/net/URL;Ljava/lang/String;)Ljava/util/List; parameter 0<br/>Unknown source org/dbunit/dataset/csv/CsvProducer.getTables(Ljava/net/URL;Ljava/lang/String;)Ljava/util/List; parameter 1<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/net/URL;Ljava/lang/String;)V<br/>At CsvProducer.java:[line 89]<br/>At CsvProducer.java:[line 152]<br/>At CsvURLProducer.java:[line 103]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69856');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69856" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.dbunit.dataset.datatype.BytesDataType<br/>In method org.dbunit.dataset.datatype.BytesDataType.loadURL(String)<br/>At BytesDataType.java:[line 88]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source org/dbunit/dataset/datatype/BytesDataType.loadURL(Ljava/lang/String;)[B parameter 0<br/>At BinaryStreamDataType.java:[line 96]<br/>At BlobDataType.java:[line 65]<br/>At BlobDataType.java:[line 76]<br/>At BytesDataType.java:[line 87]<br/>At BytesDataType.java:[line 123]<br/>At BytesDataType.java:[line 167]<br/>At BytesDataType.java:[line 189]<br/>At BytesDataType.java:[line 273]<br/>At BytesDataType.java:[line 274]<br/>At UuidAwareBytesDataType.java:[line 60]<br/>At UuidAwareBytesDataType.java:[line 73]<br/>At OracleBlobDataType.java:[line 57]<br/>At OracleBlobDataType.java:[line 67]<br/>At OracleBlobDataType.java:[line 82]<br/>At OracleXMLTypeDataType.java:[line 60]<br/>At OracleXMLTypeDataType.java:[line 64]<br/>At OracleXMLTypeDataType.java:[line 77]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70100');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70100" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.dbunit.dataset.datatype.BytesDataType<br/>In method org.dbunit.dataset.datatype.BytesDataType.typeCast(Object)<br/>At BytesDataType.java:[line 242]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/dbunit/dataset/datatype/BytesDataType.typeCast(Ljava/lang/Object;)Ljava/lang/Object; parameter 0<br/>At BinaryStreamDataType.java:[line 96]<br/>At BlobDataType.java:[line 65]<br/>At BlobDataType.java:[line 76]<br/>At BytesDataType.java:[line 273]<br/>At BytesDataType.java:[line 274]<br/>At UuidAwareBytesDataType.java:[line 60]<br/>At UuidAwareBytesDataType.java:[line 73]<br/>At OracleBlobDataType.java:[line 57]<br/>At OracleBlobDataType.java:[line 67]<br/>At OracleBlobDataType.java:[line 82]<br/>At OracleXMLTypeDataType.java:[line 60]<br/>At OracleXMLTypeDataType.java:[line 64]<br/>At OracleXMLTypeDataType.java:[line 77]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72371');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72371" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.dbunit.util.fileloader.FullXmlDataFileLoader<br/>In method org.dbunit.util.fileloader.FullXmlDataFileLoader.loadDataSet(URL)<br/>At FullXmlDataFileLoader.java:[line 74]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/dbunit/util/fileloader/FullXmlDataFileLoader.loadDataSet(Ljava/net/URL;)Lorg/dbunit/dataset/IDataSet; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72445');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72445" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.dbunit.util.fileloader.XlsDataFileLoader<br/>In method org.dbunit.util.fileloader.XlsDataFileLoader.loadDataSet(URL)<br/>At XlsDataFileLoader.java:[line 75]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/dbunit/util/fileloader/XlsDataFileLoader.loadDataSet(Ljava/net/URL;)Lorg/dbunit/dataset/IDataSet; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67515');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.dbunit.database.PrimaryKeyFilter.addReverseEdge(ForeignKeyRelationshipEdge, Set) </td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67515" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.dbunit.database.PrimaryKeyFilter<br/>In method org.dbunit.database.PrimaryKeyFilter.addReverseEdge(ForeignKeyRelationshipEdge, Set)<br/>At PrimaryKeyFilter.java:[line 327]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67569');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.dbunit.database.PrimaryKeyFilter.scanPKs(String, String, Set) </td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67569" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.dbunit.database.PrimaryKeyFilter<br/>In method org.dbunit.database.PrimaryKeyFilter.scanPKs(String, String, Set)<br/>At PrimaryKeyFilter.java:[line 253]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_OUT">PATH_TRAVERSAL_OUT: Potential Path Traversal (file write)</a>
</h2>
            
<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING: A prepared statement is generated from a nonconstant String</a>
</h2>

  <p>The code creates an SQL prepared statement from a nonconstant String.
If unchecked, tainted data from a user is used in building this String, SQL injection could
be used to make the prepared statement do something unexpected and undesirable.
</p>

    </body>
</html>
