<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/calcite-core-1.16.0-kylin-r3.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>125285 lines of code analyzed,
	in 2822 classes, 
	in 52 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">29</td>
<td align="right">0.23</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>29</b>
</td>
<td align="right">
<b>0.23</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">29</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>29</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67766');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67766" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.calcite.util.Util<br/>In method org.apache.calcite.util.Util.getStackTrace(Throwable)<br/>At Util.java:[line 865]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66408');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66408" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.calcite.runtime.RandomFunction<br/>In method org.apache.calcite.runtime.RandomFunction.rand()<br/>At RandomFunction.java:[line 42]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66466');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66466" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.calcite.runtime.RandomFunction<br/>In method org.apache.calcite.runtime.RandomFunction.randInteger(int)<br/>At RandomFunction.java:[line 58]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66524');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66524" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.calcite.runtime.RandomFunction<br/>In method org.apache.calcite.runtime.RandomFunction.randIntegerSeed(int, int)<br/>At RandomFunction.java:[line 67]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66582');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66582" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.calcite.runtime.RandomFunction<br/>In method org.apache.calcite.runtime.RandomFunction.randSeed(int)<br/>At RandomFunction.java:[line 50]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.model.ModelHandler<br/>In method new org.apache.calcite.model.ModelHandler(CalciteConnection, String)<br/>At ModelHandler.java:[line 86]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/model/ModelHandler.&lt;init&gt;(Lorg/apache/calcite/jdbc/CalciteConnection;Ljava/lang/String;)V parameter 0<br/>At Driver.java:[line 101]<br/>At Driver.java:[line 104]<br/>At Driver.java:[line 113]<br/>At Driver.java:[line 120]<br/>At Driver.java:[line 138]<br/>At Driver.java:[line 140]<br/>At Driver.java:[line 154]<br/>At JsonBuilder.java:[line 75]<br/>At JsonBuilder.java:[line 83]<br/>At JsonBuilder.java:[line 86]<br/>At JsonBuilder.java:[line 89]<br/>At JsonBuilder.java:[line 91]<br/>At JsonBuilder.java:[line 92]<br/>At JsonBuilder.java:[line 93]<br/>At JsonBuilder.java:[line 94]<br/>At JsonBuilder.java:[line 98]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65780');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65780" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.model.ModelHandler<br/>In method org.apache.calcite.model.ModelHandler.operandMap(JsonSchema, Map)<br/>At ModelHandler.java:[line 296]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/model/ModelHandler.modelUri<br/>At ModelHandler.java:[line 296]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67820');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67820" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.util.javac.JaninoCompiler<br/>In method org.apache.calcite.util.javac.JaninoCompiler.compile()<br/>At JaninoCompiler.java:[line 74]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/util/javac/JaninoCompiler$JaninoCompilerArgs.destdir<br/>At JaninoCompiler.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67899');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67899" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.util.javac.JaninoCompiler$AccountingClassLoader<br/>In method org.apache.calcite.util.javac.JaninoCompiler$AccountingClassLoader.generateBytecodes(String)<br/>At JaninoCompiler.java:[line 168]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/codehaus/janino/JavaSourceClassLoader.generateBytecodes(Ljava/lang/String;)Ljava/util/Map;<br/>Unknown source java/util/Map.entrySet()Ljava/util/Set;<br/>Unknown source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>At JaninoCompiler.java:[line 167]<br/>At JaninoCompiler.java:[line 168]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67045');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67045" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.util.Sources<br/>In method org.apache.calcite.util.Sources.file(File, String)<br/>At Sources.java:[line 43]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/util/Sources.file(Ljava/io/File;Ljava/lang/String;)Lorg/apache/calcite/util/Source; parameter 0<br/>At Sources.java:[line 35]<br/>At Sources.java:[line 65]<br/>At Sources.java:[line 160]<br/>At Sources.java:[line 168]<br/>At Sources.java:[line 176]<br/>At Sources.java:[line 178]<br/>At Sources.java:[line 184]<br/>At Sources.java:[line 188]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67194');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67194" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.util.Sources<br/>In method org.apache.calcite.util.Sources.file(File, String)<br/>At Sources.java:[line 45]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/util/Sources.file(Ljava/io/File;Ljava/lang/String;)Lorg/apache/calcite/util/Source; parameter 0<br/>At Sources.java:[line 35]<br/>At Sources.java:[line 65]<br/>At Sources.java:[line 160]<br/>At Sources.java:[line 168]<br/>At Sources.java:[line 176]<br/>At Sources.java:[line 178]<br/>At Sources.java:[line 184]<br/>At Sources.java:[line 188]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67343');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67343" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.util.Sources$FileSource<br/>In method new org.apache.calcite.util.Sources$FileSource(URL)<br/>At Sources.java:[line 81]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/util/Sources$FileSource.&lt;init&gt;(Ljava/net/URL;)V parameter 0<br/>Unknown source java/net/URL.getFile()Ljava/lang/String;<br/>Method usage not detected<br/>At Sources.java:[line 74]<br/>At Sources.java:[line 79]<br/>At Sources.java:[line 81]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67452');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67452" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.util.Sources$FileSource<br/>In method org.apache.calcite.util.Sources$FileSource.trimOrNull(String)<br/>At Sources.java:[line 148]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/util/Sources.trimOrNull(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/io/File.getPath()Ljava/lang/String;<br/>Unknown source org/apache/calcite/util/Sources.access$200(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/calcite/util/Sources.trimOrNull(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/apache/calcite/util/Sources.access$200(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>At Sources.java:[line 35]<br/>At Sources.java:[line 65]<br/>At Sources.java:[line 147]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67708');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9]*[1-9])?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67708" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9]*[1-9])?<br/>In class org.apache.calcite.util.TimestampString<br/>In method org.apache.calcite.util.TimestampString.&lt;static initializer for TimestampString&gt;()<br/>At TimestampString.java:[line 35]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67650');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "[0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9]*[1-9])?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67650" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value [0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9]*[1-9])?<br/>In class org.apache.calcite.util.TimeString<br/>In method org.apache.calcite.util.TimeString.&lt;static initializer for TimeString&gt;()<br/>At TimeString.java:[line 36]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66640');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66640" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.calcite.runtime.ResultSetEnumerable<br/>In method org.apache.calcite.runtime.ResultSetEnumerable.enumerator()<br/>At ResultSetEnumerable.java:[line 143]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/runtime/ResultSetEnumerable.sql<br/>At ResultSetEnumerable.java:[line 143]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66777');">
<td>
<span class="priority-2">SECSSL</span>
</td>
<td>SSLContext needs to be compatible with TLS 1.2</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66777" style="display: none;">
<a href="#SSL_CONTEXT">Bug type SSL_CONTEXT (click for details)</a>
<br/>In class org.apache.calcite.runtime.TrustAllSslSocketFactory<br/>In method new org.apache.calcite.runtime.TrustAllSslSocketFactory()<br/>At TrustAllSslSocketFactory.java:[line 42]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66830');">
<td>
<span class="priority-2">SECSSL</span>
</td>
<td>SSLContext needs to be compatible with TLS 1.2</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66830" style="display: none;">
<a href="#SSL_CONTEXT">Bug type SSL_CONTEXT (click for details)</a>
<br/>In class org.apache.calcite.runtime.TrustAllSslSocketFactory<br/>In method org.apache.calcite.runtime.TrustAllSslSocketFactory.createSSLSocketFactory()<br/>At TrustAllSslSocketFactory.java:[line 101]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66235');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66235" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.calcite.runtime.HttpUtils<br/>In method org.apache.calcite.runtime.HttpUtils.getURLConnection(String)<br/>At HttpUtils.java:[line 42]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source org/apache/calcite/runtime/HttpUtils.getURLConnection(Ljava/lang/String;)Ljava/net/HttpURLConnection; parameter 0<br/>Method usage not detected<br/>At HttpUtils.java:[line 42]<br/>At HttpUtils.java:[line 108]<br/>At HttpUtils.java:[line 117]<br/>At HttpUtils.java:[line 126]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67571');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67571" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.calcite.util.Sources$FileSource<br/>In method org.apache.calcite.util.Sources$FileSource.openStream()<br/>At Sources.java:[line 133]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/util/Sources$FileSource.url<br/>At Sources.java:[line 133]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65859');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65859" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.calcite.plan.RelOptUtil<br/>In method org.apache.calcite.plan.RelOptUtil.collapseExpandedIsNotDistinctFromExpr(RexCall, RexBuilder)<br/>At RelOptUtil.java:[line 1571]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/rex/RexNode.digest<br/>Unknown source org/apache/calcite/rex/RexNode.toString()Ljava/lang/String;<br/>At RelOptUtil.java:[line 1568]<br/>At RexNode.java:[line 82]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65953');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65953" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.calcite.plan.RelOptUtil<br/>In method org.apache.calcite.plan.RelOptUtil.collapseExpandedIsNotDistinctFromExpr(RexCall, RexBuilder)<br/>At RelOptUtil.java:[line 1572]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/rex/RexNode.digest<br/>Unknown source org/apache/calcite/rex/RexNode.toString()Ljava/lang/String;<br/>At RelOptUtil.java:[line 1569]<br/>At RexNode.java:[line 82]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66047');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66047" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.calcite.plan.RelOptUtil<br/>In method org.apache.calcite.plan.RelOptUtil.collapseExpandedIsNotDistinctFromExpr(RexCall, RexBuilder)<br/>At RelOptUtil.java:[line 1573]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/rex/RexNode.digest<br/>Unknown source org/apache/calcite/rex/RexNode.toString()Ljava/lang/String;<br/>At RelOptUtil.java:[line 1568]<br/>At RexNode.java:[line 82]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66141');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66141" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.calcite.plan.RelOptUtil<br/>In method org.apache.calcite.plan.RelOptUtil.collapseExpandedIsNotDistinctFromExpr(RexCall, RexBuilder)<br/>At RelOptUtil.java:[line 1574]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/rex/RexNode.digest<br/>Unknown source org/apache/calcite/rex/RexNode.toString()Ljava/lang/String;<br/>At RelOptUtil.java:[line 1569]<br/>At RexNode.java:[line 82]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66719');">
<td>
<span class="priority-2">SECUS</span>
</td>
<td>Unencrypted socket to org.apache.calcite.runtime.SocketFactoryImpl (instead of SSLSocket)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66719" style="display: none;">
<a href="#UNENCRYPTED_SOCKET">Bug type UNENCRYPTED_SOCKET (click for details)</a>
<br/>In class org.apache.calcite.runtime.SocketFactoryImpl<br/>In method org.apache.calcite.runtime.SocketFactoryImpl.createSocket()<br/>At SocketFactoryImpl.java:[line 97]<br/>Value remote host</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66354');">
<td>
<span class="priority-2">SECWHV</span>
</td>
<td>HostnameVerifier that accept any signed certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66354" style="display: none;">
<a href="#WEAK_HOSTNAME_VERIFIER">Bug type WEAK_HOSTNAME_VERIFIER (click for details)</a>
<br/>In class org.apache.calcite.runtime.HttpUtils$1<br/>In method org.apache.calcite.runtime.HttpUtils$1.verify(String, SSLSession)<br/>At HttpUtils.java:[line 55]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66883');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66883" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.calcite.runtime.TrustAllSslSocketFactory$DummyTrustManager<br/>In method org.apache.calcite.runtime.TrustAllSslSocketFactory$DummyTrustManager.checkClientTrusted(X509Certificate[], String)<br/>At TrustAllSslSocketFactory.java:[line 120]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66937');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66937" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.calcite.runtime.TrustAllSslSocketFactory$DummyTrustManager<br/>In method org.apache.calcite.runtime.TrustAllSslSocketFactory$DummyTrustManager.checkServerTrusted(X509Certificate[], String)<br/>At TrustAllSslSocketFactory.java:[line 125]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66991');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66991" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.calcite.runtime.TrustAllSslSocketFactory$DummyTrustManager<br/>In method org.apache.calcite.runtime.TrustAllSslSocketFactory$DummyTrustManager.getAcceptedIssuers()<br/>At TrustAllSslSocketFactory.java:[line 114]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
</h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="SSL_CONTEXT">SSL_CONTEXT: Weak SSLContext</a>
</h2>
            
<p>
    <b>Vulnerable Code:</b><br/>

    <pre>SSLContext.getInstance("SSL");</pre>
</p>
<p>
<p><b>Solution:</b><br/>

Upgrade your implementation to the following, and configure <code>https.protocols</code> JVM option to include TLSv1.2:</p>
<pre>SSLContext.getInstance("TLS");</pre>
<p>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https">Diagnosing TLS, SSL, and HTTPS</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        
<h2>
<a name="UNENCRYPTED_SOCKET">UNENCRYPTED_SOCKET: Unencrypted Socket</a>
</h2>
            
<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain socket (Cleartext communication):
<pre>Socket soc = new Socket("www.google.com",80);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Socket (Secure communication):
<pre>Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);</pre>
</p>
<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>

        
<h2>
<a name="WEAK_HOSTNAME_VERIFIER">WEAK_HOSTNAME_VERIFIER: HostnameVerifier that accept any signed certificates</a>
</h2>
            
<p>A <code>HostnameVerifier</code> that accept any host are often use because of certificate reuse on many hosts.
As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a truststore for example) should be built.
Wildcard certificates should be created for reused on multiples subdomains.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>public class AllHosts implements HostnameVerifier {
    public boolean verify(final String hostname, final SSLSession session) {
        return true;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        </body>
</html>
