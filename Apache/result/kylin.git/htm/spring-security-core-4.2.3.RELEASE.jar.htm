<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/spring-security-core-4.2.3.RELEASE.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>7123 lines of code analyzed,
	in 321 classes, 
	in 46 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">1</td>
<td align="right">0.14</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">33</td>
<td align="right">4.63</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>34</b>
</td>
<td align="right">
<b>4.77</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">34</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>34</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66035');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>This API SHA (SHA-1) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66035" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.springframework.security.authentication.encoding.LdapShaPasswordEncoder<br/>In method org.springframework.security.authentication.encoding.LdapShaPasswordEncoder.encodePassword(String, Object)<br/>At LdapShaPasswordEncoder.java:[line 87]<br/>Value SHA</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66162');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowMapper;)Ljava/util/List; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66162" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl<br/>In method org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl.loadGroupAuthorities(String)<br/>At JdbcDaoImpl.java:[line 267]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowMapper;)Ljava/util/List;<br/>Sink parameter 2<br/>Unknown source org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.groupAuthoritiesByUsernameQuery<br/>At JdbcDaoImpl.java:[line 267]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66241');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowMapper;)Ljava/util/List; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66241" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl<br/>In method org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl.loadUserAuthorities(String)<br/>At JdbcDaoImpl.java:[line 248]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowMapper;)Ljava/util/List;<br/>Sink parameter 2<br/>Unknown source org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.authoritiesByUsernameQuery<br/>At JdbcDaoImpl.java:[line 248]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66320');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowMapper;)Ljava/util/List; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66320" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl<br/>In method org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl.loadUsersByUsername(String)<br/>At JdbcDaoImpl.java:[line 227]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowMapper;)Ljava/util/List;<br/>Sink parameter 2<br/>Unknown source org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.usersByUsernameQuery<br/>At JdbcDaoImpl.java:[line 227]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66523');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66523" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.addGroupAuthority(String, GrantedAuthority)<br/>At JdbcUserDetailsManager.java:[line 384]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.insertGroupAuthoritySql<br/>At JdbcUserDetailsManager.java:[line 384]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66602');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66602" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.addUserToGroup(String, String)<br/>At JdbcUserDetailsManager.java:[line 319]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.insertGroupMemberSql<br/>At JdbcUserDetailsManager.java:[line 319]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66681');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66681" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.changePassword(String, String)<br/>At JdbcUserDetailsManager.java:[line 222]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.changePasswordSql<br/>At JdbcUserDetailsManager.java:[line 222]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66760');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66760" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.createGroup(String, List)<br/>At JdbcUserDetailsManager.java:[line 274]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.insertGroupSql<br/>At JdbcUserDetailsManager.java:[line 274]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66839');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66839" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.createGroup(String, List)<br/>At JdbcUserDetailsManager.java:[line 280]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.insertGroupAuthoritySql<br/>At JdbcUserDetailsManager.java:[line 280]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66918');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66918" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.createUser(UserDetails)<br/>At JdbcUserDetailsManager.java:[line 142]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.createUserSql<br/>At JdbcUserDetailsManager.java:[line 142]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66997');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66997" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.deleteGroup(String)<br/>At JdbcUserDetailsManager.java:[line 300]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.deleteGroupMembersSql<br/>At JdbcUserDetailsManager.java:[line 300]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67076');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67076" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.deleteGroup(String)<br/>At JdbcUserDetailsManager.java:[line 301]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.deleteGroupAuthoritiesSql<br/>At JdbcUserDetailsManager.java:[line 301]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67155');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67155" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.deleteGroup(String)<br/>At JdbcUserDetailsManager.java:[line 302]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.deleteGroupSql<br/>At JdbcUserDetailsManager.java:[line 302]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67234');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67234" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.deleteUser(String)<br/>At JdbcUserDetailsManager.java:[line 185]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.deleteUserSql<br/>At JdbcUserDetailsManager.java:[line 185]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67313');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67313" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.deleteUserAuthorities(String)<br/>At JdbcUserDetailsManager.java:[line 190]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.deleteUserAuthoritiesSql<br/>At JdbcUserDetailsManager.java:[line 190]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67392');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.queryForList(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/List; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67392" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.findAllGroups()<br/>At JdbcUserDetailsManager.java:[line 257]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.queryForList(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/List;<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.findAllGroupsSql<br/>At JdbcUserDetailsManager.java:[line 257]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67471');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowMapper;)Ljava/util/List; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67471" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.findGroupAuthorities(String)<br/>At JdbcUserDetailsManager.java:[line 350]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowMapper;)Ljava/util/List;<br/>Sink parameter 2<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.groupAuthoritiesSql<br/>At JdbcUserDetailsManager.java:[line 350]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67550');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.queryForObject(Ljava/lang/String;Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67550" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.findGroupId(String)<br/>At JdbcUserDetailsManager.java:[line 393]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.queryForObject(Ljava/lang/String;Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 2<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.findGroupIdSql<br/>At JdbcUserDetailsManager.java:[line 393]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67629');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.queryForList(Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/List; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67629" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.findUsersInGroup(String)<br/>At JdbcUserDetailsManager.java:[line 262]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.queryForList(Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/List;<br/>Sink parameter 2<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.findUsersInGroupSql<br/>At JdbcUserDetailsManager.java:[line 262]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67708');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67708" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.insertUserAuthorities(UserDetails)<br/>At JdbcUserDetailsManager.java:[line 176]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.createAuthoritySql<br/>At JdbcUserDetailsManager.java:[line 176]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67787');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67787" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.removeGroupAuthority(String, GrantedAuthority)<br/>At JdbcUserDetailsManager.java:[line 369]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.deleteGroupAuthoritySql<br/>At JdbcUserDetailsManager.java:[line 369]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67866');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67866" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.removeUserFromGroup(String, String)<br/>At JdbcUserDetailsManager.java:[line 336]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.deleteGroupMemberSql<br/>At JdbcUserDetailsManager.java:[line 336]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67945');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67945" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.renameGroup(String, String)<br/>At JdbcUserDetailsManager.java:[line 310]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.renameGroupSql<br/>At JdbcUserDetailsManager.java:[line 310]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68024');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68024" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.updateUser(UserDetails)<br/>At JdbcUserDetailsManager.java:[line 158]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;Lorg/springframework/jdbc/core/PreparedStatementSetter;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.updateUserSql<br/>At JdbcUserDetailsManager.java:[line 158]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68103');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.queryForList(Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/List; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68103" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.provisioning.JdbcUserDetailsManager<br/>In method org.springframework.security.provisioning.JdbcUserDetailsManager.userExists(String)<br/>At JdbcUserDetailsManager.java:[line 242]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.queryForList(Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/List;<br/>Sink parameter 2<br/>Unknown source org/springframework/security/provisioning/JdbcUserDetailsManager.userExistsSql<br/>At JdbcUserDetailsManager.java:[line 242]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66093');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66093" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.springframework.security.core.token.KeyBasedPersistenceTokenService<br/>In method org.springframework.security.core.token.KeyBasedPersistenceTokenService.verifyToken(String)<br/>At KeyBasedPersistenceTokenService.java:[line 132]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/springframework/util/StringUtils.delimitedListToStringArray(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66453');">
<td>
<span class="priority-1">SECUJDES</span>
</td>
<td>Unsafe Jackson deserialization configuration used in org.springframework.security.jackson2.CoreJackson2Module.setupModule(Module$SetupContext) org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper) CoreJackson2Module.java:[line 56]</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66453" style="display: none;">
<a href="#JACKSON_UNSAFE_DESERIALIZATION">Bug type JACKSON_UNSAFE_DESERIALIZATION (click for details)</a>
<br/>In class org.springframework.security.jackson2.CoreJackson2Module<br/>In method org.springframework.security.jackson2.CoreJackson2Module.setupModule(Module$SetupContext)<br/>Called method org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper)<br/>At CoreJackson2Module.java:[line 56]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/spel/standard/SpelExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute<br/>In method new org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute(String, String)<br/>At AbstractExpressionBasedMethodConfigAttribute.java:[line 48]<br/>Sink method org/springframework/expression/spel/standard/SpelExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/security/access/expression/method/AbstractExpressionBasedMethodConfigAttribute.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V parameter 1<br/>Method usage not detected<br/>At PostInvocationExpressionAttribute.java:[line 32]<br/>At PreInvocationExpressionAttribute.java:[line 34]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65645');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/spel/standard/SpelExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65645" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute<br/>In method new org.springframework.security.access.expression.method.AbstractExpressionBasedMethodConfigAttribute(String, String)<br/>At AbstractExpressionBasedMethodConfigAttribute.java:[line 50]<br/>Sink method org/springframework/expression/spel/standard/SpelExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/security/access/expression/method/AbstractExpressionBasedMethodConfigAttribute.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V parameter 0<br/>Method usage not detected<br/>At PostInvocationExpressionAttribute.java:[line 32]<br/>At PreInvocationExpressionAttribute.java:[line 34]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65739');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65739" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory<br/>In method org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory.createPostInvocationAttribute(String, String)<br/>At ExpressionBasedAnnotationAttributeFactory.java:[line 68]<br/>Sink method org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/security/access/expression/method/ExpressionBasedAnnotationAttributeFactory.createPostInvocationAttribute(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/security/access/prepost/PostInvocationAttribute; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65813');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65813" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory<br/>In method org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory.createPostInvocationAttribute(String, String)<br/>At ExpressionBasedAnnotationAttributeFactory.java:[line 70]<br/>Sink method org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/security/access/expression/method/ExpressionBasedAnnotationAttributeFactory.createPostInvocationAttribute(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/security/access/prepost/PostInvocationAttribute; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65887');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65887" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory<br/>In method org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory.createPreInvocationAttribute(String, String, String)<br/>At ExpressionBasedAnnotationAttributeFactory.java:[line 51]<br/>Sink method org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/security/access/expression/method/ExpressionBasedAnnotationAttributeFactory.createPreInvocationAttribute(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/security/access/prepost/PreInvocationAttribute; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65961');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65961" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory<br/>In method org.springframework.security.access.expression.method.ExpressionBasedAnnotationAttributeFactory.createPreInvocationAttribute(String, String, String)<br/>At ExpressionBasedAnnotationAttributeFactory.java:[line 53]<br/>Sink method org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/security/access/expression/method/ExpressionBasedAnnotationAttributeFactory.createPreInvocationAttribute(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/security/access/prepost/PreInvocationAttribute; parameter 2<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66399');">
<td>
<span class="priority-2">STAIV</span>
</td>
<td>The initialization vector (IV) is not properly generated</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66399" style="display: none;">
<a href="#STATIC_IV">Bug type STATIC_IV (click for details)</a>
<br/>In class org.springframework.security.crypto.encrypt.AesBytesEncryptor$CipherAlgorithm<br/>In method org.springframework.security.crypto.encrypt.AesBytesEncryptor$CipherAlgorithm.getParameterSpec(byte[])<br/>At AesBytesEncryptor.java:[line 79]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="WEAK_MESSAGE_DIGEST_SHA1">WEAK_MESSAGE_DIGEST_SHA1: SHA-1 is a weak hash function</a>
</h2>
            
<p>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other
uses. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "<b>SHA-1 for digital signature generation:</b><br/>
    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.
    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>
    <b>SHA-1 for digital signature verification:</b><br/>
    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>
    [...]<br/>
    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>

</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest sha1Digest = MessageDigest.getInstance("SHA1");
    sha1Digest.update(password.getBytes());
    byte[] hashValue = sha1Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know">Qualys blog: SHA1 Deprecation: What You Need to Know</a><br/>
<a href="https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html">Google Online Security Blog: Gradually sunsetting SHA-1</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="SQL_INJECTION_SPRING_JDBC">SQL_INJECTION_SPRING_JDBC: Potential JDBC Injection (Spring JDBC)</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>JdbcTemplate jdbc = new JdbcTemplate();
int count = jdbc.queryForObject("select count(*) from Users where name = '"+paramName+"'", Integer.class);
</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>JdbcTemplate jdbc = new JdbcTemplate();
int count = jdbc.queryForObject("select count(*) from Users where name = ?", Integer.class, paramName);</pre>
</p>
<br/>

<b>References (Spring JDBC)</b><br/>
<a href="https://spring.io/guides/gs/relational-data-access/">Spring Official Documentation: Data access with JDBC</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        
<h2>
<a name="JACKSON_UNSAFE_DESERIALIZATION">JACKSON_UNSAFE_DESERIALIZATION: Unsafe Jackson deserialization configuration</a>
</h2>
            
<p>When the Jackson databind library is used incorrectly the deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows the trigger of malicious operation.

<p>
<b>Solutions:</b><br/>
<p>
Explicitly define what types and subtypes you want to be available when using polymorphism through JsonTypeInfo.Id.NAME.
Also, never call <code>ObjectMapper.enableDefaultTyping</code> (and then <code>readValue</code> a type that holds a Object or Serializable or Comparable or a known deserialization type).
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public class Example {
    static class ABean {
        public int id;
        public Object obj;
    }

    static class AnotherBean {
        @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS) // or JsonTypeInfo.Id.MINIMAL_CLASS
        public Object obj;
    }

    public void example(String json) throws JsonMappingException {
         ObjectMapper mapper = new ObjectMapper();
         mapper.enableDefaultTyping();
         mapper.readValue(json, ABean.class);
    }

    public void exampleTwo(String json) throws JsonMappingException {
         ObjectMapper mapper = new ObjectMapper();
         mapper.readValue(json, AnotherBean.class);
    }

}
</pre>
</p>

<p>
<b>References</b><br/>
<a href="https://github.com/FasterXML/jackson-databind/issues/1599">Jackson Deserializer security vulnerability</a><br>
<a href="https://github.com/mbechler/marshalsec">Java Unmarshaller Security - Turning your data into code execution</a><br>
</p>

        
<h2>
<a name="SPEL_INJECTION">SPEL_INJECTION: Potential code injection when using Spring Expression</a>
</h2>
            
<p>
    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>
public void parseExpressionInterface(Person personObj,String property) {

        ExpressionParser parser = new SpelExpressionParser();

        //Unsafe if the input is control by the user..
        Expression exp = parser.parseExpression(property+" == 'Albert'");

        StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);
        boolean result = exp.getValue(testContext, Boolean.class);
[...]</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
    <a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html">Spring Expression Language (SpEL) - Official Documentation</a><br/>
    <a href="https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf">Minded Security: Expression Language Injection</a><br/>
    <a href="https://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>
    <a href="https://gosecure.net/2018/05/15/beware-of-the-magic-spell-part-1-cve-2018-1273/">Spring Data-Commons: (CVE-2018-1273)</a><br/>
    <a href="https://gosecure.net/2018/05/17/beware-of-the-magic-spell-part-2-cve-2018-1260/">Spring OAuth2: CVE-2018-1260</a>
</p>


        
<h2>
<a name="STATIC_IV">STATIC_IV: Static IV</a>
</h2>
            
<p>
    Initialization vector must be regenerated for each message to be encrypted.
</p>
<p><b>Vulnerable Code:</b></p>
<p>
<pre>
private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};

public void encrypt(String message) throws Exception {

    IvParameterSpec ivSpec = new IvParameterSpec(IV);
[...]
</pre>
<p><b>Solution:</b></p>
<p>
<pre>
public void encrypt(String message) throws Exception {

    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);

    IvParameterSpec ivSpec = new IvParameterSpec(iv);
[...]
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://en.wikipedia.org/wiki/Initialization_vector">Wikipedia: Initialization vector</a><br/>
<a href="https://cwe.mitre.org/data/definitions/329.html">CWE-329: Not Using a Random IV with CBC Mode</a><br/>
<a href="https://defuse.ca/cbcmodeiv.htm">Encryption - CBC Mode IV: Secret or Not?</a>
</p>
            
        </body>
</html>
