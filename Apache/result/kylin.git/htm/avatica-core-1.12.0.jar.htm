<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/avatica-core-1.12.0.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>42977 lines of code analyzed,
	in 605 classes, 
	in 4 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">1</td>
<td align="right">0.02</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">15</td>
<td align="right">0.35</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>16</b>
</td>
<td align="right">
<b>0.37</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">16</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>16</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66273');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66273" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.calcite.avatica.remote.Service$ErrorResponse<br/>In method org.apache.calcite.avatica.remote.Service$ErrorResponse.toString(Exception)<br/>At Service.java:[line 2376]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66327');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.apache.calcite.avatica.util.Base64.decodeToObject(String, int, ClassLoader)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66327" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.apache.calcite.avatica.util.Base64<br/>In method org.apache.calcite.avatica.util.Base64.decodeToObject(String, int, ClassLoader)<br/>At Base64.java:[line 1396]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65773');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65773" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.avatica.ConnectionConfigImpl<br/>In method org.apache.calcite.avatica.ConnectionConfigImpl.kerberosKeytab()<br/>At ConnectionConfigImpl.java:[line 89]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$Converter.apply(Lorg/apache/calcite/avatica/ConnectionProperty;Ljava/lang/String;)Ljava/lang/Object;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.get_(Lorg/apache/calcite/avatica/ConnectionConfigImpl$Converter;Ljava/lang/String;)Ljava/lang/Object;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.getString()Ljava/lang/String;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.getString(Ljava/lang/String;)Ljava/lang/String;<br/>At ConnectionConfigImpl.java:[line 85]<br/>At ConnectionConfigImpl.java:[line 189]<br/>At ConnectionConfigImpl.java:[line 196]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65887');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65887" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.avatica.ConnectionConfigImpl<br/>In method org.apache.calcite.avatica.ConnectionConfigImpl.keystore()<br/>At ConnectionConfigImpl.java:[line 114]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$Converter.apply(Lorg/apache/calcite/avatica/ConnectionProperty;Ljava/lang/String;)Ljava/lang/Object;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.get_(Lorg/apache/calcite/avatica/ConnectionConfigImpl$Converter;Ljava/lang/String;)Ljava/lang/Object;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.getString()Ljava/lang/String;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.getString(Ljava/lang/String;)Ljava/lang/String;<br/>At ConnectionConfigImpl.java:[line 110]<br/>At ConnectionConfigImpl.java:[line 189]<br/>At ConnectionConfigImpl.java:[line 196]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66001');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66001" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.avatica.ConnectionConfigImpl<br/>In method org.apache.calcite.avatica.ConnectionConfigImpl.truststore()<br/>At ConnectionConfigImpl.java:[line 102]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$Converter.apply(Lorg/apache/calcite/avatica/ConnectionProperty;Ljava/lang/String;)Ljava/lang/Object;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.get_(Lorg/apache/calcite/avatica/ConnectionConfigImpl$Converter;Ljava/lang/String;)Ljava/lang/Object;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.getString()Ljava/lang/String;<br/>Unknown source org/apache/calcite/avatica/ConnectionConfigImpl$PropEnv.getString(Ljava/lang/String;)Ljava/lang/String;<br/>At ConnectionConfigImpl.java:[line 98]<br/>At ConnectionConfigImpl.java:[line 189]<br/>At ConnectionConfigImpl.java:[line 196]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66381');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66381" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.avatica.util.Base64<br/>In method org.apache.calcite.avatica.util.Base64.decodeFromFile(String)<br/>At Base64.java:[line 1507]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/util/Base64.decodeFromFile(Ljava/lang/String;)[B parameter 0<br/>Method usage not detected<br/>At Base64.java:[line 1636]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66465');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66465" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.calcite.avatica.util.Base64<br/>In method org.apache.calcite.avatica.util.Base64.encodeFromFile(String)<br/>At Base64.java:[line 1568]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/util/Base64.encodeFromFile(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Method usage not detected<br/>At Base64.java:[line 1608]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66549');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66549" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.calcite.avatica.util.Base64<br/>In method org.apache.calcite.avatica.util.Base64.decodeFileToFile(String, String)<br/>At Base64.java:[line 1639]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/util/Base64.decodeFileToFile(Ljava/lang/String;Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66623');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66623" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.calcite.avatica.util.Base64<br/>In method org.apache.calcite.avatica.util.Base64.decodeToFile(String, String)<br/>At Base64.java:[line 1469]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/util/Base64.decodeToFile(Ljava/lang/String;Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66697');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66697" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.calcite.avatica.util.Base64<br/>In method org.apache.calcite.avatica.util.Base64.encodeFileToFile(String, String)<br/>At Base64.java:[line 1611]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/util/Base64.encodeFileToFile(Ljava/lang/String;Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66771');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66771" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.calcite.avatica.util.Base64<br/>In method org.apache.calcite.avatica.util.Base64.encodeToFile(byte[], String)<br/>At Base64.java:[line 1437]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/util/Base64.encodeToFile([BLjava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/calcite/avatica/AvaticaConnection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.calcite.avatica.AvaticaConnection<br/>In method org.apache.calcite.avatica.AvaticaConnection.prepareStatement(String)<br/>At AvaticaConnection.java:[line 175]<br/>Sink method org/apache/calcite/avatica/AvaticaConnection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement;<br/>Sink parameter 3<br/>Unknown source org/apache/calcite/avatica/AvaticaConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65625');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/calcite/avatica/AvaticaConnection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65625" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.calcite.avatica.AvaticaConnection<br/>In method org.apache.calcite.avatica.AvaticaConnection.prepareStatement(String, int, int)<br/>At AvaticaConnection.java:[line 289]<br/>Sink method org/apache/calcite/avatica/AvaticaConnection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement;<br/>Sink parameter 3<br/>Unknown source org/apache/calcite/avatica/AvaticaConnection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; parameter 2<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65699');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/calcite/avatica/AvaticaStatement.executeLargeUpdate(Ljava/lang/String;)J can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65699" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.calcite.avatica.AvaticaStatement<br/>In method org.apache.calcite.avatica.AvaticaStatement.executeUpdate(String)<br/>At AvaticaStatement.java:[line 240]<br/>Sink method org/apache/calcite/avatica/AvaticaStatement.executeLargeUpdate(Ljava/lang/String;)J<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/AvaticaStatement.executeUpdate(Ljava/lang/String;)I parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66115');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66115" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.calcite.avatica.QueryState<br/>In method org.apache.calcite.avatica.QueryState.invoke(Connection, Statement)<br/>At QueryState.java:[line 186]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/QueryState.sql<br/>At QueryState.java:[line 186]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66194');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66194" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.calcite.avatica.remote.AvaticaHttpClientImpl<br/>In method org.apache.calcite.avatica.remote.AvaticaHttpClientImpl.openConnection()<br/>At AvaticaHttpClientImpl.java:[line 73]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/apache/calcite/avatica/remote/AvaticaHttpClientImpl.url<br/>At AvaticaHttpClientImpl.java:[line 73]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_OUT">PATH_TRAVERSAL_OUT: Potential Path Traversal (file write)</a>
</h2>
            
<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            </body>
</html>
