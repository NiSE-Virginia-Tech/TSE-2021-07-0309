<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/cors-filter-2.5.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>618 lines of code analyzed,
	in 21 classes, 
	in 3 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">2</td>
<td align="right">3.24</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">7</td>
<td align="right">11.33</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>9</b>
</td>
<td align="right">
<b>14.56</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">9</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>9</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65630');">
<td>
<span class="priority-2">HRS</span>
</td>
<td>HTTP parameter directly written to HTTP header output in com.thetransactioncompany.cors.CORSRequestHandler.handlePreflightRequest(HttpServletRequest, HttpServletResponse)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65630" style="display: none;">
<a href="#HRS_REQUEST_PARAMETER_TO_HTTP_HEADER">Bug type HRS_REQUEST_PARAMETER_TO_HTTP_HEADER (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSRequestHandler<br/>In method com.thetransactioncompany.cors.CORSRequestHandler.handlePreflightRequest(HttpServletRequest, HttpServletResponse)<br/>Local variable named rawRequestHeadersString<br/>At CORSRequestHandler.java:[line 228]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65770');">
<td>
<span class="priority-1">SECCORS</span>
</td>
<td>The program defines an overly permissive Cross-Origin Resource Sharing (CORS) policy</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65770" style="display: none;">
<a href="#PERMISSIVE_CORS">Bug type PERMISSIVE_CORS (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSRequestHandler<br/>In method com.thetransactioncompany.cors.CORSRequestHandler.handleActualRequest(HttpServletRequest, HttpServletResponse)<br/>At CORSRequestHandler.java:[line 119]<br/>Sink method javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65833');">
<td>
<span class="priority-1">SECCORS</span>
</td>
<td>The program defines an overly permissive Cross-Origin Resource Sharing (CORS) policy</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65833" style="display: none;">
<a href="#PERMISSIVE_CORS">Bug type PERMISSIVE_CORS (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSRequestHandler<br/>In method com.thetransactioncompany.cors.CORSRequestHandler.handlePreflightRequest(HttpServletRequest, HttpServletResponse)<br/>At CORSRequestHandler.java:[line 210]<br/>Sink method javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65896');">
<td>
<span class="priority-2">SECCORS</span>
</td>
<td>The program defines an overly permissive Cross-Origin Resource Sharing (CORS) policy</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65896" style="display: none;">
<a href="#PERMISSIVE_CORS">Bug type PERMISSIVE_CORS (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSRequestHandler<br/>In method com.thetransactioncompany.cors.CORSRequestHandler.handleActualRequest(HttpServletRequest, HttpServletResponse)<br/>At CORSRequestHandler.java:[line 112]<br/>Sink method javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/thetransactioncompany/cors/Origin.value<br/>Unknown source com/thetransactioncompany/cors/Origin.toString()Ljava/lang/String;<br/>At CORSRequestHandler.java:[line 112]<br/>At Origin.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65989');">
<td>
<span class="priority-2">SECCORS</span>
</td>
<td>The program defines an overly permissive Cross-Origin Resource Sharing (CORS) policy</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65989" style="display: none;">
<a href="#PERMISSIVE_CORS">Bug type PERMISSIVE_CORS (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSRequestHandler<br/>In method com.thetransactioncompany.cors.CORSRequestHandler.handleActualRequest(HttpServletRequest, HttpServletResponse)<br/>At CORSRequestHandler.java:[line 121]<br/>Sink method javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/thetransactioncompany/cors/Origin.value<br/>Unknown source com/thetransactioncompany/cors/Origin.toString()Ljava/lang/String;<br/>At CORSRequestHandler.java:[line 121]<br/>At Origin.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66082');">
<td>
<span class="priority-2">SECCORS</span>
</td>
<td>The program defines an overly permissive Cross-Origin Resource Sharing (CORS) policy</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66082" style="display: none;">
<a href="#PERMISSIVE_CORS">Bug type PERMISSIVE_CORS (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSRequestHandler<br/>In method com.thetransactioncompany.cors.CORSRequestHandler.handlePreflightRequest(HttpServletRequest, HttpServletResponse)<br/>At CORSRequestHandler.java:[line 203]<br/>Sink method javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/thetransactioncompany/cors/Origin.value<br/>Unknown source com/thetransactioncompany/cors/Origin.toString()Ljava/lang/String;<br/>At CORSRequestHandler.java:[line 203]<br/>At Origin.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66175');">
<td>
<span class="priority-2">SECCORS</span>
</td>
<td>The program defines an overly permissive Cross-Origin Resource Sharing (CORS) policy</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66175" style="display: none;">
<a href="#PERMISSIVE_CORS">Bug type PERMISSIVE_CORS (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSRequestHandler<br/>In method com.thetransactioncompany.cors.CORSRequestHandler.handlePreflightRequest(HttpServletRequest, HttpServletResponse)<br/>At CORSRequestHandler.java:[line 212]<br/>Sink method javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/thetransactioncompany/cors/Origin.value<br/>Unknown source com/thetransactioncompany/cors/Origin.toString()Ljava/lang/String;<br/>At CORSRequestHandler.java:[line 212]<br/>At Origin.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65691');">
<td>
<span class="priority-2">SECHRS</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into HTTP headers</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65691" style="display: none;">
<a href="#HTTP_RESPONSE_SPLITTING">Bug type HTTP_RESPONSE_SPLITTING (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSRequestHandler<br/>In method com.thetransactioncompany.cors.CORSRequestHandler.handlePreflightRequest(HttpServletRequest, HttpServletResponse)<br/>At CORSRequestHandler.java:[line 228]<br/>Sink method javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getHeader(Ljava/lang/String;)Ljava/lang/String;<br/>At CORSRequestHandler.java:[line 168]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.thetransactioncompany.cors.CORSFilter<br/>In method com.thetransactioncompany.cors.CORSFilter.printMessage(CORSException, HttpServletResponse)<br/>At CORSFilter.java:[line 162]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/thetransactioncompany/cors/CORSException.getMessage()Ljava/lang/String;<br/>At CORSFilter.java:[line 162]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="HRS_REQUEST_PARAMETER_TO_HTTP_HEADER">HRS_REQUEST_PARAMETER_TO_HTTP_HEADER: HTTP Response splitting vulnerability</a>
</h2>
            
    <p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting
vulnerability. See <a href="http://en.wikipedia.org/wiki/HTTP_response_splitting">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more
vulnerabilities that SpotBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>


        
<h2>
<a name="PERMISSIVE_CORS">PERMISSIVE_CORS: Overly permissive CORS policy</a>
</h2>
            
<p>
Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for JavaScript to access the contents of a Web page, both the JavaScript and the Web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible for JavaScript to access data across domains if a new HTTP header called Access-Control-Allow-Origin is defined. With this header, a Web server defines which other domains are allowed to access its domain using cross-origin requests. However, caution should be taken when defining the header because an overly permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>response.addHeader("Access-Control-Allow-Origin", "*");</pre>
</p>
<p>
    <b>Solution:</b>
<br/>
Avoid using * as the value of the Access-Control-Allow-Origin header, which indicates that the application's data is accessible to JavaScript running on any domain.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.w3.org/TR/cors/">W3C Cross-Origin Resource Sharing</a><br/>
<a href="https://enable-cors.org/">Enable Cross-Origin Resource Sharing</a><br/>
</p>
        
<h2>
<a name="HTTP_RESPONSE_SPLITTING">HTTP_RESPONSE_SPLITTING: Potential HTTP Response Splitting</a>
</h2>
            
<p>
    When an HTTP request contains unexpected <code>CR</code> and <code>LF</code> characters, the server may respond with an output stream
    that is interpreted as two different HTTP responses (instead of one).
    An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.
    According to OWASP, the issue has been fixed in virtually all modern Java EE application servers, but it is still better to validate the input.
    If you are concerned about this risk, you should test on the platform of concern to see
    if the underlx platform allows for <code>CR</code> or <code>LF</code> characters to be injected into headers.
    This weakness is reported with low priority because it requires the web container to be vulnerable.
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String author = request.getParameter(AUTHOR_PARAMETER);
// ...
Cookie cookie = new Cookie("author", author);
response.addCookie(cookie);</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://www.owasp.org/index.php/HTTP_Response_Splitting">OWASP: HTTP Response Splitting</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/113.html">CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</a>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
</p>


        
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        </body>
</html>
