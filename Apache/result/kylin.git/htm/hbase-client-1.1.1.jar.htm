<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/hbase-client-1.1.1.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>29729 lines of code analyzed,
	in 603 classes, 
	in 24 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">1</td>
<td align="right">0.03</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">10</td>
<td align="right">0.34</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>11</b>
</td>
<td align="right">
<b>0.37</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">11</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>11</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65667');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65667" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.hadoop.hbase.client.RetriesExhaustedWithDetailsException<br/>In method org.apache.hadoop.hbase.client.RetriesExhaustedWithDetailsException.getExhaustiveDescription()<br/>At RetriesExhaustedWithDetailsException.java:[line 137]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66239');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.info(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66239" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper<br/>In method new org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper(String, int, Watcher, int, int, String)<br/>At RecoverableZooKeeper.java:[line 121]<br/>Sink method org/apache/commons/logging/Log.info(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source java/lang/management/RuntimeMXBean.getName()Ljava/lang/String;<br/>Unknown source org/apache/hadoop/hbase/zookeeper/RecoverableZooKeeper.&lt;init&gt;(Ljava/lang/String;ILorg/apache/zookeeper/Watcher;IILjava/lang/String;)V parameter 5<br/>Unknown source org/apache/hadoop/hbase/zookeeper/RecoverableZooKeeper.&lt;init&gt;(Ljava/lang/String;ILorg/apache/zookeeper/Watcher;IILjava/lang/String;)V parameter 0<br/>Method usage with tainted arguments detected<br/>At RecoverableZooKeeper.java:[line 104]<br/>At RecoverableZooKeeper.java:[line 121]<br/>At ZKConfig.java:[line 93]<br/>At ZKConfig.java:[line 181]<br/>At ZKConfig.java:[line 188]<br/>At ZKConfig.java:[line 189]<br/>At ZKConfig.java:[line 190]<br/>At ZKConfig.java:[line 201]<br/>At ZKConfig.java:[line 203]<br/>At ZKConfig.java:[line 214]<br/>At ZKConfig.java:[line 231]<br/>At ZKConfig.java:[line 232]<br/>At ZKConfig.java:[line 250]<br/>At ZKConfig.java:[line 252]<br/>At ZKConfig.java:[line 257]<br/>At ZKConfig.java:[line 258]<br/>At ZKConfig.java:[line 283]<br/>At ZKConfig.java:[line 287]<br/>At ZKConfig.java:[line 289]<br/>At ZKConfig.java:[line 292]<br/>At ZKConfig.java:[line 308]<br/>At ZKConfig.java:[line 325]<br/>At ZKConfig.java:[line 330]<br/>At ZKConfig.java:[line 332]<br/>At ZKConfig.java:[line 342]<br/>At ZKConfig.java:[line 345]<br/>At ZKConfig.java:[line 348]<br/>At ZKUtil.java:[line 129]<br/>At ZKUtil.java:[line 130]<br/>At ZKUtil.java:[line 136]<br/>At ZKUtil.java:[line 148]<br/>At ZKUtil.java:[line 155]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66643');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.fatal(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66643" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.hadoop.hbase.zookeeper.ZKConfig<br/>In method org.apache.hadoop.hbase.zookeeper.ZKConfig.parseZooCfg(Configuration, InputStream)<br/>At ZKConfig.java:[line 210]<br/>Sink method org/apache/commons/logging/Log.fatal(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Tainted source java/util/Map$Entry.getValue()Ljava/lang/Object;<br/>Tainted source java/lang/Object.toString()Ljava/lang/String;<br/>Tainted source java/util/Properties.entrySet()Ljava/util/Set;<br/>Tainted source java/util/Iterator.next()Ljava/lang/Object;<br/>At ZKConfig.java:[line 181]<br/>At ZKConfig.java:[line 188]<br/>At ZKConfig.java:[line 189]<br/>At ZKConfig.java:[line 201]<br/>At ZKConfig.java:[line 208]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66782');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.trace(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66782" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.hadoop.hbase.zookeeper.ZKUtil<br/>In method org.apache.hadoop.hbase.zookeeper.ZKUtil.connect(Configuration, String, Watcher, String)<br/>At ZKUtil.java:[line 148]<br/>Sink method org/apache/commons/logging/Log.trace(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/apache/hadoop/hbase/zookeeper/ZKUtil.connect(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/zookeeper/Watcher;Ljava/lang/String;)Lorg/apache/hadoop/hbase/zookeeper/RecoverableZooKeeper; parameter 0<br/>Unknown source org/apache/hadoop/hbase/zookeeper/ZKUtil.connect(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/zookeeper/Watcher;Ljava/lang/String;)Lorg/apache/hadoop/hbase/zookeeper/RecoverableZooKeeper; parameter 2<br/>Method usage with tainted arguments detected<br/>At ZKConfig.java:[line 93]<br/>At ZKConfig.java:[line 181]<br/>At ZKConfig.java:[line 188]<br/>At ZKConfig.java:[line 189]<br/>At ZKConfig.java:[line 190]<br/>At ZKConfig.java:[line 201]<br/>At ZKConfig.java:[line 203]<br/>At ZKConfig.java:[line 214]<br/>At ZKConfig.java:[line 231]<br/>At ZKConfig.java:[line 232]<br/>At ZKConfig.java:[line 250]<br/>At ZKConfig.java:[line 252]<br/>At ZKConfig.java:[line 257]<br/>At ZKConfig.java:[line 258]<br/>At ZKConfig.java:[line 283]<br/>At ZKConfig.java:[line 287]<br/>At ZKConfig.java:[line 289]<br/>At ZKConfig.java:[line 292]<br/>At ZKConfig.java:[line 308]<br/>At ZKConfig.java:[line 325]<br/>At ZKConfig.java:[line 330]<br/>At ZKConfig.java:[line 332]<br/>At ZKConfig.java:[line 342]<br/>At ZKConfig.java:[line 345]<br/>At ZKConfig.java:[line 348]<br/>At ZKUtil.java:[line 129]<br/>At ZKUtil.java:[line 130]<br/>At ZKUtil.java:[line 136]<br/>At ZKUtil.java:[line 148]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.hadoop.hbase.client.ConnectionUtils<br/>In method org.apache.hadoop.hbase.client.ConnectionUtils.&lt;static initializer for ConnectionUtils&gt;()<br/>At ConnectionUtils.java:[line 42]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65609');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65609" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.hadoop.hbase.client.PerClientRandomNonceGenerator<br/>In method new org.apache.hadoop.hbase.client.PerClientRandomNonceGenerator()<br/>At PerClientRandomNonceGenerator.java:[line 33]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65721');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65721" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.hadoop.hbase.filter.RandomRowFilter<br/>In method org.apache.hadoop.hbase.filter.RandomRowFilter.&lt;static initializer for RandomRowFilter&gt;()<br/>At RandomRowFilter.java:[line 39]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65779');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65779" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.hadoop.hbase.ipc.RpcClientImpl$Connection<br/>In method org.apache.hadoop.hbase.ipc.RpcClientImpl$Connection.setupIOstreams()<br/>At RpcClientImpl.java:[line 741]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65837');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65837" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.hadoop.hbase.security.SaslClientHandler<br/>In method org.apache.hadoop.hbase.security.SaslClientHandler.exceptionCaught(ChannelHandlerContext, Throwable)<br/>At SaslClientHandler.java:[line 311]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65895');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65895" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.hadoop.hbase.zookeeper.HQuorumPeer<br/>In method org.apache.hadoop.hbase.zookeeper.HQuorumPeer.writeMyID(Properties)<br/>At HQuorumPeer.java:[line 154]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/hadoop/hbase/zookeeper/HQuorumPeer.writeMyID(Ljava/util/Properties;)V parameter 0<br/>Unknown source java/util/Properties.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source java/lang/Object.toString()Ljava/lang/String;<br/>Unknown source java/util/Properties.setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;<br/>Unknown source org/apache/hadoop/conf/Configuration.get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Method usage with tainted arguments detected<br/>At HQuorumPeer.java:[line 69]<br/>At HQuorumPeer.java:[line 70]<br/>At HQuorumPeer.java:[line 145]<br/>At HQuorumPeer.java:[line 153]<br/>At ZKConfig.java:[line 59]<br/>At ZKConfig.java:[line 63]<br/>At ZKConfig.java:[line 93]<br/>At ZKConfig.java:[line 123]<br/>At ZKConfig.java:[line 124]<br/>At ZKConfig.java:[line 126]<br/>At ZKConfig.java:[line 127]<br/>At ZKConfig.java:[line 132]<br/>At ZKConfig.java:[line 139]<br/>At ZKConfig.java:[line 154]<br/>At ZKConfig.java:[line 158]<br/>At ZKConfig.java:[line 160]<br/>At ZKConfig.java:[line 181]<br/>At ZKConfig.java:[line 188]<br/>At ZKConfig.java:[line 189]<br/>At ZKConfig.java:[line 190]<br/>At ZKConfig.java:[line 201]<br/>At ZKConfig.java:[line 203]<br/>At ZKConfig.java:[line 214]<br/>At ZKConfig.java:[line 231]<br/>At ZKConfig.java:[line 232]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67151');">
<td>
<span class="priority-2">SECUS</span>
</td>
<td>Unencrypted socket to org.apache.hadoop.hbase.zookeeper.ZKUtil (instead of SSLSocket)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67151" style="display: none;">
<a href="#UNENCRYPTED_SOCKET">Bug type UNENCRYPTED_SOCKET (click for details)</a>
<br/>In class org.apache.hadoop.hbase.zookeeper.ZKUtil<br/>In method org.apache.hadoop.hbase.zookeeper.ZKUtil.getServerStats(String, int)<br/>At ZKUtil.java:[line 1931]<br/>Value remote host</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="UNENCRYPTED_SOCKET">UNENCRYPTED_SOCKET: Unencrypted Socket</a>
</h2>
            
<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain socket (Cleartext communication):
<pre>Socket soc = new Socket("www.google.com",80);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Socket (Secure communication):
<pre>Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);</pre>
</p>
<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>

        </body>
</html>
