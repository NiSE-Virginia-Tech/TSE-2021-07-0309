<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/jetty-servlet-9.3.22.v20171030.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>3821 lines of code analyzed,
	in 48 classes, 
	in 3 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">3</td>
<td align="right">0.79</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">15</td>
<td align="right">3.93</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>18</b>
</td>
<td align="right">
<b>4.71</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">18</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>18</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">HRS</span>
</td>
<td>HTTP parameter directly written to HTTP header output in org.eclipse.jetty.servlet.DefaultServlet.doGet(HttpServletRequest, HttpServletResponse)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#HRS_REQUEST_PARAMETER_TO_HTTP_HEADER">Bug type HRS_REQUEST_PARAMETER_TO_HTTP_HEADER (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.doGet(HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 496]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65605');">
<td>
<span class="priority-2">HRS</span>
</td>
<td>HTTP parameter directly written to HTTP header output in org.eclipse.jetty.servlet.DefaultServlet.passConditionalHeaders(HttpServletRequest, HttpServletResponse, HttpContent)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65605" style="display: none;">
<a href="#HRS_REQUEST_PARAMETER_TO_HTTP_HEADER">Bug type HRS_REQUEST_PARAMETER_TO_HTTP_HEADER (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.passConditionalHeaders(HttpServletRequest, HttpServletResponse, HttpContent)<br/>Local variable named ifnm<br/>At DefaultServlet.java:[line 774]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65666');">
<td>
<span class="priority-2">HRS</span>
</td>
<td>HTTP parameter directly written to HTTP header output in org.eclipse.jetty.servlet.DefaultServlet.sendWelcome(HttpContent, String, boolean, boolean, HttpServletRequest, HttpServletResponse)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65666" style="display: none;">
<a href="#HRS_REQUEST_PARAMETER_TO_HTTP_HEADER">Bug type HRS_REQUEST_PARAMETER_TO_HTTP_HEADER (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.sendWelcome(HttpContent, String, boolean, boolean, HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 567]<br/>Another occurrence at DefaultServlet.java:[line 586]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65731');">
<td>
<span class="priority-2">SECHRS</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into HTTP headers</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65731" style="display: none;">
<a href="#HTTP_RESPONSE_SPLITTING">Bug type HTTP_RESPONSE_SPLITTING (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.passConditionalHeaders(HttpServletRequest, HttpServletResponse, HttpContent)<br/>At DefaultServlet.java:[line 774]<br/>Sink method javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getHeader(Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source org/eclipse/jetty/http/HttpField.getValue()Ljava/lang/String;<br/>At DefaultServlet.java:[line 719]<br/>At DefaultServlet.java:[line 735]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65825');">
<td>
<span class="priority-2">SECHRS</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into HTTP headers</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65825" style="display: none;">
<a href="#HTTP_RESPONSE_SPLITTING">Bug type HTTP_RESPONSE_SPLITTING (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.putHeaders(HttpServletResponse, HttpContent, long)<br/>At DefaultServlet.java:[line 1107]<br/>Sink method javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source org/eclipse/jetty/http/HttpField.getValue()Ljava/lang/String;<br/>At DefaultServlet.java:[line 1107]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66604');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66604" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.ServletHolder<br/>In method org.eclipse.jetty.servlet.ServletHolder.initJspServlet()<br/>At ServletHolder.java:[line 705]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/servlet/Holder._initParams<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/eclipse/jetty/servlet/ServletHolder.getInitParameter(Ljava/lang/String;)Ljava/lang/String;<br/>At Holder.java:[line 89]<br/>At ServletHolder.java:[line 705]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65904');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65904" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.sendWelcome(HttpContent, String, boolean, boolean, HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 595]<br/>Sink method javax/servlet/RequestDispatcher.include(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source javax/servlet/ServletContext.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/eclipse/jetty/servlet/DefaultServlet.getWelcomeFile(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/util/URIUtil.addPaths(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>At DefaultServlet.java:[line 573]<br/>At DefaultServlet.java:[line 591]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66002');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66002" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.sendWelcome(HttpContent, String, boolean, boolean, HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 599]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source javax/servlet/ServletContext.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/eclipse/jetty/servlet/DefaultServlet.getWelcomeFile(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/eclipse/jetty/util/URIUtil.addPaths(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>At DefaultServlet.java:[line 573]<br/>At DefaultServlet.java:[line 591]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66100');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66100" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.doGet(HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 496]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/servlet/http/HttpServletResponse.encodeRedirectURL(Ljava/lang/String;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66169');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66169" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.sendWelcome(HttpContent, String, boolean, boolean, HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 567]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/servlet/http/HttpServletResponse.encodeRedirectURL(Ljava/lang/String;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66238');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66238" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.sendWelcome(HttpContent, String, boolean, boolean, HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 586]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/servlet/http/HttpServletResponse.encodeRedirectURL(Ljava/lang/String;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66307');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66307" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.doGet(HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 496]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66360');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66360" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.sendWelcome(HttpContent, String, boolean, boolean, HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 567]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66413');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66413" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.sendWelcome(HttpContent, String, boolean, boolean, HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 586]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66466');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66466" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.doGet(HttpServletRequest, HttpServletResponse)<br/>At DefaultServlet.java:[line 533]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/lang/IllegalArgumentException.getMessage()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66535');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66535" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.DefaultServlet<br/>In method org.eclipse.jetty.servlet.DefaultServlet.passConditionalHeaders(HttpServletRequest, HttpServletResponse, HttpContent)<br/>At DefaultServlet.java:[line 832]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/lang/IllegalArgumentException.getMessage()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66703');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.write(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66703" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.StatisticsServlet<br/>In method org.eclipse.jetty.servlet.StatisticsServlet.sendTextResponse(HttpServletResponse)<br/>At StatisticsServlet.java:[line 305]<br/>Sink method java/io/PrintWriter.write(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/Connector.getProtocols()Ljava/util/List;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/eclipse/jetty/server/handler/StatisticsHandler.toStatsHTML()Ljava/lang/String;<br/>At StatisticsServlet.java:[line 248]<br/>At StatisticsServlet.java:[line 250]<br/>At StatisticsServlet.java:[line 253]<br/>At StatisticsServlet.java:[line 254]<br/>At StatisticsServlet.java:[line 255]<br/>At StatisticsServlet.java:[line 256]<br/>At StatisticsServlet.java:[line 257]<br/>At StatisticsServlet.java:[line 264]<br/>At StatisticsServlet.java:[line 265]<br/>At StatisticsServlet.java:[line 266]<br/>At StatisticsServlet.java:[line 267]<br/>At StatisticsServlet.java:[line 268]<br/>At StatisticsServlet.java:[line 269]<br/>At StatisticsServlet.java:[line 270]<br/>At StatisticsServlet.java:[line 271]<br/>At StatisticsServlet.java:[line 272]<br/>At StatisticsServlet.java:[line 273]<br/>At StatisticsServlet.java:[line 282]<br/>At StatisticsServlet.java:[line 283]<br/>At StatisticsServlet.java:[line 284]<br/>At StatisticsServlet.java:[line 285]<br/>At StatisticsServlet.java:[line 286]<br/>At StatisticsServlet.java:[line 287]<br/>At StatisticsServlet.java:[line 288]<br/>At StatisticsServlet.java:[line 289]<br/>At StatisticsServlet.java:[line 290]<br/>At StatisticsServlet.java:[line 294]<br/>At StatisticsServlet.java:[line 299]<br/>At StatisticsServlet.java:[line 300]<br/>At StatisticsServlet.java:[line 301]<br/>At StatisticsServlet.java:[line 305]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67092');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.write(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67092" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.eclipse.jetty.servlet.StatisticsServlet<br/>In method org.eclipse.jetty.servlet.StatisticsServlet.sendXmlResponse(HttpServletResponse)<br/>At StatisticsServlet.java:[line 242]<br/>Sink method java/io/PrintWriter.write(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/eclipse/jetty/server/Connector.getProtocols()Ljava/util/List;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>At StatisticsServlet.java:[line 182]<br/>At StatisticsServlet.java:[line 183]<br/>At StatisticsServlet.java:[line 184]<br/>At StatisticsServlet.java:[line 185]<br/>At StatisticsServlet.java:[line 186]<br/>At StatisticsServlet.java:[line 187]<br/>At StatisticsServlet.java:[line 194]<br/>At StatisticsServlet.java:[line 195]<br/>At StatisticsServlet.java:[line 196]<br/>At StatisticsServlet.java:[line 197]<br/>At StatisticsServlet.java:[line 198]<br/>At StatisticsServlet.java:[line 199]<br/>At StatisticsServlet.java:[line 200]<br/>At StatisticsServlet.java:[line 201]<br/>At StatisticsServlet.java:[line 202]<br/>At StatisticsServlet.java:[line 203]<br/>At StatisticsServlet.java:[line 204]<br/>At StatisticsServlet.java:[line 213]<br/>At StatisticsServlet.java:[line 214]<br/>At StatisticsServlet.java:[line 215]<br/>At StatisticsServlet.java:[line 216]<br/>At StatisticsServlet.java:[line 217]<br/>At StatisticsServlet.java:[line 218]<br/>At StatisticsServlet.java:[line 219]<br/>At StatisticsServlet.java:[line 220]<br/>At StatisticsServlet.java:[line 221]<br/>At StatisticsServlet.java:[line 222]<br/>At StatisticsServlet.java:[line 226]<br/>At StatisticsServlet.java:[line 229]<br/>At StatisticsServlet.java:[line 231]<br/>At StatisticsServlet.java:[line 233]<br/>At StatisticsServlet.java:[line 234]<br/>At StatisticsServlet.java:[line 235]<br/>At StatisticsServlet.java:[line 236]<br/>At StatisticsServlet.java:[line 238]<br/>At StatisticsServlet.java:[line 242]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="HRS_REQUEST_PARAMETER_TO_HTTP_HEADER">HRS_REQUEST_PARAMETER_TO_HTTP_HEADER: HTTP Response splitting vulnerability</a>
</h2>
            
    <p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting
vulnerability. See <a href="http://en.wikipedia.org/wiki/HTTP_response_splitting">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more
vulnerabilities that SpotBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>


        
<h2>
<a name="HTTP_RESPONSE_SPLITTING">HTTP_RESPONSE_SPLITTING: Potential HTTP Response Splitting</a>
</h2>
            
<p>
    When an HTTP request contains unexpected <code>CR</code> and <code>LF</code> characters, the server may respond with an output stream
    that is interpreted as two different HTTP responses (instead of one).
    An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.
    According to OWASP, the issue has been fixed in virtually all modern Java EE application servers, but it is still better to validate the input.
    If you are concerned about this risk, you should test on the platform of concern to see
    if the underlx platform allows for <code>CR</code> or <code>LF</code> characters to be injected into headers.
    This weakness is reported with low priority because it requires the web container to be vulnerable.
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String author = request.getParameter(AUTHOR_PARAMETER);
// ...
Cookie cookie = new Cookie("author", author);
response.addCookie(cookie);</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://www.owasp.org/index.php/HTTP_Response_Splitting">OWASP: HTTP Response Splitting</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/113.html">CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</a>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
</p>


        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="REQUESTDISPATCHER_FILE_DISCLOSURE">REQUESTDISPATCHER_FILE_DISCLOSURE: RequestDispatcher File Disclosure</a>
</h2>
            
<p>
Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>
An attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting <code>"http://example.com/?jspFile=../applicationContext.xml%3F"</code> would display the application's <code>applicationContext.xml</code> file. The attacker would be able to locate and download the <code>applicationContext.xml</code> referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>...
String jspFile = request.getParameter("jspFile");
request.getRequestDispatcher("/WEB-INF/jsps/" + jspFile + ".jsp").include(request, response);
...</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid constructing server-side redirects using user controlled input.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/552.html">CWE-552: Files or Directories Accessible to External Parties</a><br/>
</p>
            
        
<h2>
<a name="UNVALIDATED_REDIRECT">UNVALIDATED_REDIRECT: Unvalidated Redirect</a>
</h2>
            
<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>
            
        
<h2>
<a name="URL_REWRITING">URL_REWRITING: URL rewriting method</a>
</h2>
            
<p>
The implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL.<br/>
URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties. Session ID in the URL can be disclosed in many ways, for example:<br/>
<ul>
    <li>Log files,</li>
    <li>The browser history,</li>
    <li>By copy-and-pasting it into an e-mail or posting,</li>
    <li>The HTTP Referrer.</li>
</ul>
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>out.println("Click &lt;a href=" +
                res.encodeURL(HttpUtils.getRequestURL(req).toString()) +
                "&gt;here&lt;/a&gt;");</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid using those methods. If you are looking to encode a URL String or form parameters do not confuse the URL rewriting methods with the URLEncoder class.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management">OWASP Top 10 2010-A3-Broken Authentication and Session Management</a><br/>
</p>
            
        
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        </body>
</html>
