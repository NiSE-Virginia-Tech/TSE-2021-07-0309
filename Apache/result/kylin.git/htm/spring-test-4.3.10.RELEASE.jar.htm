<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/spring-test-4.3.10.RELEASE.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>12593 lines of code analyzed,
	in 444 classes, 
	in 31 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">21</td>
<td align="right">1.67</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>21</b>
</td>
<td align="right">
<b>1.67</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">21</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>21</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66217');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66217" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.mock.web.MockPageContext<br/>In method org.springframework.mock.web.MockPageContext.forward(String)<br/>At MockPageContext.java:[line 342]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/mock/web/MockPageContext.forward(Ljava/lang/String;)V parameter 0<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Method usage not detected<br/>At MockPageContext.java:[line 342]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66305');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66305" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.mock.web.MockPageContext<br/>In method org.springframework.mock.web.MockPageContext.include(String)<br/>At MockPageContext.java:[line 347]<br/>Sink method javax/servlet/RequestDispatcher.include(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/mock/web/MockPageContext.include(Ljava/lang/String;)V parameter 0<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Method usage not detected<br/>At MockPageContext.java:[line 347]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66393');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66393" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.mock.web.MockPageContext<br/>In method org.springframework.mock.web.MockPageContext.include(String, boolean)<br/>At MockPageContext.java:[line 352]<br/>Sink method javax/servlet/RequestDispatcher.include(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/mock/web/MockPageContext.include(Ljava/lang/String;Z)V parameter 1<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Method usage not detected<br/>At MockPageContext.java:[line 352]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66481');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.queryForObject(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66481" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.test.jdbc.JdbcTestUtils<br/>In method org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable(JdbcTemplate, String)<br/>At JdbcTestUtils.java:[line 63]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.queryForObject(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;<br/>Sink parameter 1<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.countRowsInTable(Lorg/springframework/jdbc/core/JdbcTemplate;Ljava/lang/String;)I parameter 0<br/>Method usage not detected<br/>At AbstractTransactionalJUnit4SpringContextTests.java:[line 131]<br/>At AbstractTransactionalTestNGSpringContextTests.java:[line 115]<br/>At JdbcTestUtils.java:[line 63]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66585');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.queryForObject(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66585" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.test.jdbc.JdbcTestUtils<br/>In method org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere(JdbcTemplate, String, String)<br/>At JdbcTestUtils.java:[line 85]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.queryForObject(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;<br/>Sink parameter 1<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.countRowsInTableWhere(Lorg/springframework/jdbc/core/JdbcTemplate;Ljava/lang/String;Ljava/lang/String;)I parameter 0<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.countRowsInTableWhere(Lorg/springframework/jdbc/core/JdbcTemplate;Ljava/lang/String;Ljava/lang/String;)I parameter 1<br/>Method usage not detected<br/>At AbstractTransactionalJUnit4SpringContextTests.java:[line 146]<br/>At AbstractTransactionalTestNGSpringContextTests.java:[line 130]<br/>At JdbcTestUtils.java:[line 81]<br/>At JdbcTestUtils.java:[line 83]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66704');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66704" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.test.jdbc.JdbcTestUtils<br/>In method org.springframework.test.jdbc.JdbcTestUtils.deleteFromTableWhere(JdbcTemplate, String, String, Object[])<br/>At JdbcTestUtils.java:[line 132]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.deleteFromTableWhere(Lorg/springframework/jdbc/core/JdbcTemplate;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)I parameter 2<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.deleteFromTableWhere(Lorg/springframework/jdbc/core/JdbcTemplate;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)I parameter 1<br/>Method usage not detected<br/>At AbstractTransactionalJUnit4SpringContextTests.java:[line 177]<br/>At AbstractTransactionalTestNGSpringContextTests.java:[line 161]<br/>At JdbcTestUtils.java:[line 128]<br/>At JdbcTestUtils.java:[line 130]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66823');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66823" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.test.jdbc.JdbcTestUtils<br/>In method org.springframework.test.jdbc.JdbcTestUtils.deleteFromTableWhere(JdbcTemplate, String, String, Object[])<br/>At JdbcTestUtils.java:[line 132]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.deleteFromTableWhere(Lorg/springframework/jdbc/core/JdbcTemplate;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)I parameter 2<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.deleteFromTableWhere(Lorg/springframework/jdbc/core/JdbcTemplate;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)I parameter 1<br/>Method usage not detected<br/>At AbstractTransactionalJUnit4SpringContextTests.java:[line 177]<br/>At AbstractTransactionalTestNGSpringContextTests.java:[line 161]<br/>At JdbcTestUtils.java:[line 128]<br/>At JdbcTestUtils.java:[line 130]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66942');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66942" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.test.jdbc.JdbcTestUtils<br/>In method org.springframework.test.jdbc.JdbcTestUtils.deleteFromTables(JdbcTemplate, String[])<br/>At JdbcTestUtils.java:[line 97]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.deleteFromTables(Lorg/springframework/jdbc/core/JdbcTemplate;[Ljava/lang/String;)I parameter 0<br/>Method usage not detected<br/>At AbstractTransactionalJUnit4SpringContextTests.java:[line 157]<br/>At AbstractTransactionalTestNGSpringContextTests.java:[line 141]<br/>At JdbcTestUtils.java:[line 97]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67046');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.execute(Ljava/lang/String;)V can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67046" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.test.jdbc.JdbcTestUtils<br/>In method org.springframework.test.jdbc.JdbcTestUtils.dropTables(JdbcTemplate, String[])<br/>At JdbcTestUtils.java:[line 146]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.execute(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/test/jdbc/JdbcTestUtils.dropTables(Lorg/springframework/jdbc/core/JdbcTemplate;[Ljava/lang/String;)V parameter 0<br/>Method usage not detected<br/>At AbstractTransactionalJUnit4SpringContextTests.java:[line 188]<br/>At AbstractTransactionalTestNGSpringContextTests.java:[line 172]<br/>At JdbcTestUtils.java:[line 146]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67208');">
<td>
<span class="priority-2">SECXPI</span>
</td>
<td>This use of javax/xml/xpath/XPath.compile(Ljava/lang/String;)Ljavax/xml/xpath/XPathExpression; can be vulnerable to XPath Injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67208" style="display: none;">
<a href="#XPATH_INJECTION">Bug type XPATH_INJECTION (click for details)</a>
<br/>In class org.springframework.test.util.XpathExpectationsHelper<br/>In method org.springframework.test.util.XpathExpectationsHelper.compileXpathExpression(String, Map)<br/>At XpathExpectationsHelper.java:[line 83]<br/>Sink method javax/xml/xpath/XPath.compile(Ljava/lang/String;)Ljavax/xml/xpath/XPathExpression;<br/>Sink parameter 0<br/>Unknown source org/springframework/test/util/XpathExpectationsHelper.compileXpathExpression(Ljava/lang/String;Ljava/util/Map;)Ljavax/xml/xpath/XPathExpression; parameter 1<br/>At XpathExpectationsHelper.java:[line 71]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.print(C)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.print(char)<br/>At MockJspWriter.java:[line 129]<br/>Sink method java/io/PrintWriter.print(C)V<br/>Sink parameter 0<br/>Unknown source org/springframework/mock/web/MockJspWriter.print(C)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65625');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.print(Ljava/lang/Object;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65625" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.print(Object)<br/>At MockJspWriter.java:[line 159]<br/>Sink method java/io/PrintWriter.print(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/mock/web/MockJspWriter.print(Ljava/lang/Object;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65699');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.print(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65699" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.print(String)<br/>At MockJspWriter.java:[line 164]<br/>Sink method java/io/PrintWriter.print(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/mock/web/MockJspWriter.print(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65773');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.print([C)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65773" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.print(char[])<br/>At MockJspWriter.java:[line 134]<br/>Sink method java/io/PrintWriter.print([C)V<br/>Sink parameter 0<br/>Unknown source org/springframework/mock/web/MockJspWriter.print([C)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65847');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(C)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65847" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.println(char)<br/>At MockJspWriter.java:[line 179]<br/>Sink method java/io/PrintWriter.println(C)V<br/>Sink parameter 0<br/>Unknown source org/springframework/mock/web/MockJspWriter.println(C)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65921');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/Object;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65921" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.println(Object)<br/>At MockJspWriter.java:[line 209]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/mock/web/MockJspWriter.println(Ljava/lang/Object;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65995');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65995" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.println(String)<br/>At MockJspWriter.java:[line 214]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/mock/web/MockJspWriter.println(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66069');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println([C)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66069" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.println(char[])<br/>At MockJspWriter.java:[line 184]<br/>Sink method java/io/PrintWriter.println([C)V<br/>Sink parameter 0<br/>Unknown source org/springframework/mock/web/MockJspWriter.println([C)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66143');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.write([CII)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66143" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.mock.web.MockJspWriter<br/>In method org.springframework.mock.web.MockJspWriter.write(char[], int, int)<br/>At MockJspWriter.java:[line 119]<br/>Sink method java/io/PrintWriter.write([CII)V<br/>Sink parameter 2<br/>Unknown source org/springframework/mock/web/MockJspWriter.write([CII)V parameter 2<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67150');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67150" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.springframework.test.util.XmlExpectationsHelper<br/>In method org.springframework.test.util.XmlExpectationsHelper.parseXmlString(String)<br/>At XmlExpectationsHelper.java:[line 56]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67287');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67287" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.springframework.test.util.XpathExpectationsHelper<br/>In method org.springframework.test.util.XpathExpectationsHelper.parseXmlByteArray(byte[], String)<br/>At XpathExpectationsHelper.java:[line 117]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="REQUESTDISPATCHER_FILE_DISCLOSURE">REQUESTDISPATCHER_FILE_DISCLOSURE: RequestDispatcher File Disclosure</a>
</h2>
            
<p>
Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>
An attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting <code>"http://example.com/?jspFile=../applicationContext.xml%3F"</code> would display the application's <code>applicationContext.xml</code> file. The attacker would be able to locate and download the <code>applicationContext.xml</code> referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>...
String jspFile = request.getParameter("jspFile");
request.getRequestDispatcher("/WEB-INF/jsps/" + jspFile + ".jsp").include(request, response);
...</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid constructing server-side redirects using user controlled input.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/552.html">CWE-552: Files or Directories Accessible to External Parties</a><br/>
</p>
            
        
<h2>
<a name="SQL_INJECTION_SPRING_JDBC">SQL_INJECTION_SPRING_JDBC: Potential JDBC Injection (Spring JDBC)</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>JdbcTemplate jdbc = new JdbcTemplate();
int count = jdbc.queryForObject("select count(*) from Users where name = '"+paramName+"'", Integer.class);
</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>JdbcTemplate jdbc = new JdbcTemplate();
int count = jdbc.queryForObject("select count(*) from Users where name = ?", Integer.class, paramName);</pre>
</p>
<br/>

<b>References (Spring JDBC)</b><br/>
<a href="https://spring.io/guides/gs/relational-data-access/">Spring Official Documentation: Data access with JDBC</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="XPATH_INJECTION">XPATH_INJECTION: Potential XPath Injection</a>
</h2>
            
<p>
XPath injection risks are similar to SQL injection. If the XPath query contains untrusted user input, the complete data source
could be exposed. This could allow an attacker to access unauthorized data or maliciously modify the target XML.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-39: XPath Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/643.html">CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61407250">CERT: IDS09-J. Prevent XPath Injection (archive)</a><br/>
<a href="https://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf">Black Hat Europe 2012: Hacking XPath 2.0</a><br/>
<a href="https://www.balisage.net/Proceedings/vol7/html/Vlist02/BalisageVol7-Vlist02.html">Balisage.net: XQuery Injection</a>
</p>

        
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        
<h2>
<a name="XXE_DOCUMENT">XXE_DOCUMENT: XML parsing vulnerable to XXE (DocumentBuilder)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces2-j/features.html">Xerces2 complete features list</a>
</p>

        </body>
</html>
