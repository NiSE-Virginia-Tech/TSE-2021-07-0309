<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/spark-sql_2.11-2.3.2.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>87593 lines of code analyzed,
	in 5357 classes, 
	in 52 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">22</td>
<td align="right">0.25</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>22</b>
</td>
<td align="right">
<b>0.25</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">22</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>22</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66725');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66725" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.spark.sql.execution.exchange.ShuffleExchangeExec$<br/>In method org.apache.spark.sql.execution.exchange.ShuffleExchangeExec$.org$apache$spark$sql$execution$exchange$ShuffleExchangeExec$$getPartitionKeyExtractor$1(Seq, Partitioning)<br/>At ShuffleExchangeExec.scala:[line 240]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67128');">
<td>
<span class="priority-2">SECPRS</span>
</td>
<td>This Scala random generator (scala.util.Random.nextLong()) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67128" style="display: none;">
<a href="#PREDICTABLE_RANDOM_SCALA">Bug type PREDICTABLE_RANDOM_SCALA (click for details)</a>
<br/>In class org.apache.spark.sql.execution.streaming.state.HDFSBackedStateStoreProvider<br/>In method org.apache.spark.sql.execution.streaming.state.HDFSBackedStateStoreProvider.writeSnapshotFile(long, ConcurrentHashMap)<br/>At HDFSBackedStateStoreProvider.scala:[line 417]<br/>Value scala.util.Random.nextLong()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67186');">
<td>
<span class="priority-2">SECPRS</span>
</td>
<td>This Scala random generator (scala.util.Random.nextLong()) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67186" style="display: none;">
<a href="#PREDICTABLE_RANDOM_SCALA">Bug type PREDICTABLE_RANDOM_SCALA (click for details)</a>
<br/>In class org.apache.spark.sql.execution.streaming.state.HDFSBackedStateStoreProvider$HDFSBackedStateStore<br/>In method new org.apache.spark.sql.execution.streaming.state.HDFSBackedStateStoreProvider$HDFSBackedStateStore(HDFSBackedStateStoreProvider, long, ConcurrentHashMap)<br/>At HDFSBackedStateStoreProvider.scala:[line 90]<br/>Value scala.util.Random.nextLong()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.spark.sql.execution.command.ListFilesCommand$$anonfun$run$2<br/>In method org.apache.spark.sql.execution.command.ListFilesCommand$$anonfun$run$2.apply(String)<br/>At resources.scala:[line 69]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/spark/sql/execution/command/ListFilesCommand$$anonfun$run$2.apply(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Method usage not detected<br/>At resources.scala:[line 66]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65635');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65635" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.spark.sql.execution.command.LoadDataCommand<br/>In method org.apache.spark.sql.execution.command.LoadDataCommand.run(SparkSession)<br/>At tables.scala:[line 310]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/spark/util/Utils$.resolveURI(Ljava/lang/String;)Ljava/net/URI;<br/>Unknown source java/net/URI.getPath()Ljava/lang/String;<br/>At tables.scala:[line 310]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65719');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65719" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.spark.sql.execution.command.LoadDataCommand<br/>In method org.apache.spark.sql.execution.command.LoadDataCommand.run(SparkSession)<br/>At tables.scala:[line 322]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.getName()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65788');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65788" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.spark.sql.execution.command.LoadDataCommand<br/>In method org.apache.spark.sql.execution.command.LoadDataCommand.run(SparkSession)<br/>At tables.scala:[line 329]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.getAbsolutePath()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65857');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65857" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.spark.sql.execution.command.LoadDataCommand<br/>In method org.apache.spark.sql.execution.command.LoadDataCommand.run(SparkSession)<br/>At tables.scala:[line 337]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.getAbsolutePath()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66907');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66907" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.spark.sql.execution.python.EvalPythonExec$$anonfun$doExecute$1<br/>In method org.apache.spark.sql.execution.python.EvalPythonExec$$anonfun$doExecute$1.apply(Iterator)<br/>At EvalPythonExec.scala:[line 99]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/spark/util/Utils$.getLocalDir(Lorg/apache/spark/SparkConf;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66976');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66976" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.spark.sql.execution.python.HybridRowQueue<br/>In method org.apache.spark.sql.execution.python.HybridRowQueue.createDiskQueue()<br/>At RowQueue.scala:[line 222]<br/>Sink method java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;<br/>Sink parameter 0<br/>Unknown source org/apache/spark/sql/execution/python/HybridRowQueue.tempDir()Ljava/io/File;<br/>Unknown source org/apache/spark/sql/execution/python/HybridRowQueue.tempDir<br/>At RowQueue.scala:[line 174]<br/>At RowQueue.scala:[line 222]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67244');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67244" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.spark.sql.internal.SessionResourceLoader<br/>In method org.apache.spark.sql.internal.SessionResourceLoader.addJar(String)<br/>At SessionState.scala:[line 163]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/spark/sql/internal/SessionResourceLoader.addJar(Ljava/lang/String;)V parameter 0<br/>At resources.scala:[line 32]<br/>At resources.scala:[line 40]<br/>At SessionState.scala:[line 142]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66783');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66783" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.spark.sql.execution.python.DiskRowQueue<br/>In method new org.apache.spark.sql.execution.python.DiskRowQueue(File, int, SerializerManager)<br/>At RowQueue.scala:[line 118]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.toString()Ljava/lang/String;<br/>Unknown source org/apache/spark/sql/execution/python/DiskRowQueue.&lt;init&gt;(Ljava/io/File;ILorg/apache/spark/serializer/SerializerManager;)V parameter 2<br/>At RowQueue.scala:[line 112]<br/>At RowQueue.scala:[line 118]<br/>At RowQueue.scala:[line 112]<br/>At RowQueue.scala:[line 174]<br/>At RowQueue.scala:[line 222]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65926');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65926" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JDBCRDD<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JDBCRDD.compute(Partition, TaskContext)<br/>At JDBCRDD.scala:[line 281]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source scala/Some.x()Ljava/lang/Object;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65995');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65995" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JDBCRDD<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JDBCRDD.compute(Partition, TaskContext)<br/>At JDBCRDD.scala:[line 298]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;<br/>Sink parameter 2<br/>Unknown source scala/StringContext.s(Lscala/collection/Seq;)Ljava/lang/String;<br/>Unknown source scala/Predef$.genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;<br/>At JDBCRDD.scala:[line 297]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66079');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66079" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JDBCRDD$<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JDBCRDD$.resolveTable(JDBCOptions)<br/>At JDBCRDD.scala:[line 58]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source scala/StringContext.s(Lscala/collection/Seq;)Ljava/lang/String;<br/>Unknown source scala/Predef$.genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;<br/>Unknown source org/apache/spark/sql/jdbc/JdbcDialect.getSchemaQuery(Ljava/lang/String;)Ljava/lang/String;<br/>At JDBCRDD.scala:[line 58]<br/>At JdbcDialects.scala:[line 116]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66178');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66178" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$.createTable(Connection, Dataset, JDBCOptions)<br/>At JdbcUtils.scala:[line 844]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source scala/StringContext.s(Lscala/collection/Seq;)Ljava/lang/String;<br/>Unknown source scala/Predef$.genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;<br/>At JdbcUtils.scala:[line 841]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66262');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66262" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$.dropTable(Connection, String)<br/>At JdbcUtils.scala:[line 92]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source scala/StringContext.s(Lscala/collection/Seq;)Ljava/lang/String;<br/>Unknown source scala/Predef$.genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;<br/>At JdbcUtils.scala:[line 92]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66346');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66346" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$.getSchemaOption(Connection, JDBCOptions)<br/>At JdbcUtils.scala:[line 255]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source scala/StringContext.s(Lscala/collection/Seq;)Ljava/lang/String;<br/>Unknown source scala/Predef$.genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;<br/>Unknown source org/apache/spark/sql/jdbc/JdbcDialect.getSchemaQuery(Ljava/lang/String;)Ljava/lang/String;<br/>At JdbcUtils.scala:[line 255]<br/>At JdbcDialects.scala:[line 116]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66445');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66445" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$.savePartition(Function0, String, Iterator, StructType, String, int, JdbcDialect, int)<br/>At JdbcUtils.scala:[line 633]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/spark/sql/execution/datasources/jdbc/JdbcUtils$.savePartition(Lscala/Function0;Ljava/lang/String;Lscala/collection/Iterator;Lorg/apache/spark/sql/types/StructType;Ljava/lang/String;ILorg/apache/spark/sql/jdbc/JdbcDialect;I)Lscala/collection/Iterator; parameter 3<br/>Method usage not detected<br/>In JdbcUtils.scala</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66527');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66527" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$.truncateTable(Connection, JDBCOptions)<br/>At JdbcUtils.scala:[line 105]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source scala/StringContext.s(Lscala/collection/Seq;)Ljava/lang/String;<br/>Unknown source org/apache/spark/sql/jdbc/JdbcDialect.getTruncateQuery(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source scala/Predef$.genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;<br/>At JdbcUtils.scala:[line 105]<br/>At JdbcDialects.scala:[line 128]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66626');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66626" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$$anonfun$tableExists$1<br/>In method org.apache.spark.sql.execution.datasources.jdbc.JdbcUtils$$anonfun$tableExists$1.apply()<br/>At JdbcUtils.scala:[line 77]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/spark/sql/jdbc/JdbcDialect.getTableExistsQuery(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source scala/StringContext.s(Lscala/collection/Seq;)Ljava/lang/String;<br/>Unknown source scala/Predef$.genericWrapArray(Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;<br/>At JdbcUtils.scala:[line 77]<br/>At JdbcDialects.scala:[line 103]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67070');">
<td>
<span class="priority-2">SECUS</span>
</td>
<td>Unencrypted socket to org.apache.spark.sql.execution.streaming.TextSocketSource (instead of SSLSocket)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67070" style="display: none;">
<a href="#UNENCRYPTED_SOCKET">Bug type UNENCRYPTED_SOCKET (click for details)</a>
<br/>In class org.apache.spark.sql.execution.streaming.TextSocketSource<br/>In method org.apache.spark.sql.execution.streaming.TextSocketSource.initialize()<br/>At socket.scala:[line 75]<br/>Value remote host</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM_SCALA">PREDICTABLE_RANDOM_SCALA: Predictable pseudorandom number generator (Scala)</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <b>java.security.SecureRandom</b>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>import scala.util.Random

def generateSecretToken() {
    val result = Seq.fill(16)(Random.nextInt)
    return result.map("%02x" format _).mkString
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>import java.security.SecureRandom

def generateSecretToken() {
    val rand = new SecureRandom()
    val value = Array.ofDim[Byte](16)
    rand.nextBytes(value)
    return value.map("%02x" format _).mkString
}</pre>
</p>
<!--<p>
<b>Solution:</b>
<pre>import java.security.SecureRandom
import scala.util.Random._

def generateSecretToken() {
    val secRandom = javaRandomToRandom(new SecureRandom())
    val result = Seq.fill(16)(secRandom.nextInt)
    return result.map("%02x" format _).mkString
}</pre>
</p>-->
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (http://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_OUT">PATH_TRAVERSAL_OUT: Potential Path Traversal (file write)</a>
</h2>
            
<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="UNENCRYPTED_SOCKET">UNENCRYPTED_SOCKET: Unencrypted Socket</a>
</h2>
            
<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain socket (Cleartext communication):
<pre>Socket soc = new Socket("www.google.com",80);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Socket (Secure communication):
<pre>Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);</pre>
</p>
<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>

        </body>
</html>
