<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/kylin.git/scala-library-2.11.0.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>82895 lines of code analyzed,
	in 3826 classes, 
	in 34 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">8</td>
<td align="right">0.10</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">29</td>
<td align="right">0.35</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>37</b>
</td>
<td align="right">
<b>0.45</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">34</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>34</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66011');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66011" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class scala.concurrent.impl.ExecutionContextImpl<br/>In method scala.concurrent.impl.ExecutionContextImpl.createExecutorService()<br/>At ExecutionContextImpl.scala:[line 85]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67048');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/ProcessBuilder.&lt;init&gt;([Ljava/lang/String;)V can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67048" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class scala.sys.process.ProcessCreation$class<br/>In method scala.sys.process.ProcessCreation$class.apply(ProcessCreation, Seq, Option, Seq)<br/>At Process.scala:[line 104]<br/>Sink method java/lang/ProcessBuilder.&lt;init&gt;([Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source scala/collection/Seq.toArray(Lscala/reflect/ClassTag;)Ljava/lang/Object;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65683');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in scala.collection.mutable.FlatHashTable$class.init(FlatHashTable, ObjectInputStream, Function1)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65683" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class scala.collection.mutable.FlatHashTable$class<br/>In method scala.collection.mutable.FlatHashTable$class.init(FlatHashTable, ObjectInputStream, Function1)<br/>At FlatHashTable.scala:[line 88]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65737');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in scala.collection.mutable.HashMap$$anonfun$readObject$1.apply()</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65737" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class scala.collection.mutable.HashMap$$anonfun$readObject$1<br/>In method scala.collection.mutable.HashMap$$anonfun$readObject$1.apply()<br/>At HashMap.scala:[line 143]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65791');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in scala.collection.mutable.LinkedHashMap$$anonfun$readObject$1.apply()</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65791" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class scala.collection.mutable.LinkedHashMap$$anonfun$readObject$1<br/>In method scala.collection.mutable.LinkedHashMap$$anonfun$readObject$1.apply()<br/>At LinkedHashMap.scala:[line 175]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65845');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in scala.collection.mutable.LinkedHashSet$$anonfun$readObject$1.apply()</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65845" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class scala.collection.mutable.LinkedHashSet$$anonfun$readObject$1<br/>In method scala.collection.mutable.LinkedHashSet$$anonfun$readObject$1.apply()<br/>At LinkedHashSet.scala:[line 124]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65899');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in scala.collection.parallel.mutable.ParHashMap$$anonfun$readObject$1.apply()</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65899" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class scala.collection.parallel.mutable.ParHashMap$$anonfun$readObject$1<br/>In method scala.collection.parallel.mutable.ParHashMap$$anonfun$readObject$1.apply()<br/>At ParHashMap.scala:[line 114]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65953');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65953" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class scala.concurrent.forkjoin.ThreadLocalRandom<br/>In method new scala.concurrent.forkjoin.ThreadLocalRandom()<br/>At ThreadLocalRandom.java:[line 74]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66827');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.lang.Math.random()) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66827" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class scala.math.package$<br/>In method scala.math.package$.random()<br/>At package.scala:[line 29]<br/>Value java.lang.Math.random()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67431');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67431" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class scala.util.Random<br/>In method new scala.util.Random()<br/>At Random.scala:[line 29]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67489');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67489" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class scala.util.Random<br/>In method new scala.util.Random(long)<br/>At Random.scala:[line 23]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65625');">
<td>
<span class="priority-2">SECPRS</span>
</td>
<td>This Scala random generator (scala.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65625" style="display: none;">
<a href="#PREDICTABLE_RANDOM_SCALA">Bug type PREDICTABLE_RANDOM_SCALA (click for details)</a>
<br/>In class scala.collection.mutable.FlatHashTable$$anon$2<br/>In method scala.collection.mutable.FlatHashTable$$anon$2.initialValue()<br/>At FlatHashTable.scala:[line 383]<br/>Value scala.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67547');">
<td>
<span class="priority-2">SECPRS</span>
</td>
<td>This Scala random generator (scala.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67547" style="display: none;">
<a href="#PREDICTABLE_RANDOM_SCALA">Bug type PREDICTABLE_RANDOM_SCALA (click for details)</a>
<br/>In class scala.util.Random<br/>In method new scala.util.Random()<br/>At Random.scala:[line 29]<br/>Value scala.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67605');">
<td>
<span class="priority-2">SECPRS</span>
</td>
<td>This Scala random generator (scala.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67605" style="display: none;">
<a href="#PREDICTABLE_RANDOM_SCALA">Bug type PREDICTABLE_RANDOM_SCALA (click for details)</a>
<br/>In class scala.util.Random<br/>In method new scala.util.Random(int)<br/>At Random.scala:[line 26]<br/>Value scala.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67663');">
<td>
<span class="priority-2">SECPRS</span>
</td>
<td>This Scala random generator (scala.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67663" style="display: none;">
<a href="#PREDICTABLE_RANDOM_SCALA">Bug type PREDICTABLE_RANDOM_SCALA (click for details)</a>
<br/>In class scala.util.Random<br/>In method new scala.util.Random(long)<br/>At Random.scala:[line 23]<br/>Value scala.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67721');">
<td>
<span class="priority-2">SECPRS</span>
</td>
<td>This Scala random generator (scala.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67721" style="display: none;">
<a href="#PREDICTABLE_RANDOM_SCALA">Bug type PREDICTABLE_RANDOM_SCALA (click for details)</a>
<br/>In class scala.util.Random$<br/>In method new scala.util.Random$()<br/>At Random.scala:[line 142]<br/>Value scala.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67779');">
<td>
<span class="priority-2">SECPRS</span>
</td>
<td>This Scala random generator (scala.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67779" style="display: none;">
<a href="#PREDICTABLE_RANDOM_SCALA">Bug type PREDICTABLE_RANDOM_SCALA (click for details)</a>
<br/>In class scala.util.Random$<br/>In method scala.util.Random$.javaRandomToRandom(Random)<br/>At Random.scala:[line 144]<br/>Value scala.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.collection.immutable.PagedSeq$<br/>In method scala.collection.immutable.PagedSeq$.fromFile(String)<br/>At PagedSeq.scala:[line 99]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source scala/collection/immutable/PagedSeq$.fromFile(Ljava/lang/String;)Lscala/collection/immutable/PagedSeq; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66333');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66333" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source$<br/>In method scala.io.Source$.fromFile(String, Codec)<br/>At Source.scala:[line 54]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source scala/io/Source$.fromFile(Ljava/lang/String;Lscala/io/Codec;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected<br/>At Source.scala:[line 60]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66417');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/net/URI;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66417" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source$<br/>In method scala.io.Source$.fromFile(URI, Codec)<br/>At Source.scala:[line 65]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/net/URI;)V<br/>Sink parameter 0<br/>Unknown source scala/io/Source$.fromFile(Ljava/net/URI;Lscala/io/Codec;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected<br/>At Source.scala:[line 70]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66501');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/net/URI;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66501" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source$<br/>In method scala.io.Source$.fromURI(URI, Codec)<br/>At Source.scala:[line 121]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/net/URI;)V<br/>Sink parameter 0<br/>Unknown source scala/io/Source$.fromURI(Ljava/net/URI;Lscala/io/Codec;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66885');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66885" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.sys.Prop$FileProp$$anonfun$$lessinit$greater$1<br/>In method scala.sys.Prop$FileProp$$anonfun$$lessinit$greater$1.apply(String)<br/>At Prop.scala:[line 83]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source scala/sys/Prop$FileProp$$anonfun$$lessinit$greater$1.apply(Ljava/lang/String;)Ljava/io/File; parameter 0<br/>Method usage not detected<br/>At Prop.scala:[line 83]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67301');">
<td>
<span class="priority-2">SECSCI</span>
</td>
<td>The command execution could be vulnerable to injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67301" style="display: none;">
<a href="#SCALA_COMMAND_INJECTION">Bug type SCALA_COMMAND_INJECTION (click for details)</a>
<br/>In class scala.sys.process.package<br/>In method scala.sys.process.package.stringSeqToProcess(Seq)<br/>In package.scala<br/>Sink method scala/sys/process/package$.stringSeqToProcess(Lscala/collection/Seq;)Lscala/sys/process/ProcessBuilder;<br/>Sink parameter 0<br/>Unknown source scala/sys/process/package.stringSeqToProcess(Lscala/collection/Seq;)Lscala/sys/process/ProcessBuilder; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67366');">
<td>
<span class="priority-2">SECSCI</span>
</td>
<td>The command execution could be vulnerable to injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67366" style="display: none;">
<a href="#SCALA_COMMAND_INJECTION">Bug type SCALA_COMMAND_INJECTION (click for details)</a>
<br/>In class scala.sys.process.package<br/>In method scala.sys.process.package.stringToProcess(String)<br/>In package.scala<br/>Sink method scala/sys/process/package$.stringToProcess(Ljava/lang/String;)Lscala/sys/process/ProcessBuilder;<br/>Sink parameter 0<br/>Unknown source scala/sys/process/package.stringToProcess(Ljava/lang/String;)Lscala/sys/process/ProcessBuilder; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67117');">
<td>
<span class="priority-2">SECSCI</span>
</td>
<td>The command execution could be vulnerable to injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67117" style="display: none;">
<a href="#SCALA_COMMAND_INJECTION">Bug type SCALA_COMMAND_INJECTION (click for details)</a>
<br/>In class scala.sys.process.ProcessImplicits$class<br/>In method scala.sys.process.ProcessImplicits$class.stringSeqToProcess(ProcessImplicits, Seq)<br/>At Process.scala:[line 222]<br/>Sink method scala/sys/process/Process$.apply(Lscala/collection/Seq;)Lscala/sys/process/ProcessBuilder;<br/>Sink parameter 0<br/>Unknown source scala/sys/process/ProcessImplicits$class.stringSeqToProcess(Lscala/sys/process/ProcessImplicits;Lscala/collection/Seq;)Lscala/sys/process/ProcessBuilder; parameter 0<br/>Method usage not detected<br/>In package.scala<br/>At package.scala:[line 202]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67209');">
<td>
<span class="priority-2">SECSCI</span>
</td>
<td>The command execution could be vulnerable to injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67209" style="display: none;">
<a href="#SCALA_COMMAND_INJECTION">Bug type SCALA_COMMAND_INJECTION (click for details)</a>
<br/>In class scala.sys.process.ProcessImplicits$class<br/>In method scala.sys.process.ProcessImplicits$class.stringToProcess(ProcessImplicits, String)<br/>At Process.scala:[line 215]<br/>Sink method scala/sys/process/Process$.apply(Ljava/lang/String;)Lscala/sys/process/ProcessBuilder;<br/>Sink parameter 0<br/>Unknown source scala/sys/process/ProcessImplicits$class.stringToProcess(Lscala/sys/process/ProcessImplicits;Ljava/lang/String;)Lscala/sys/process/ProcessBuilder; parameter 0<br/>Method usage not detected<br/>In package.scala<br/>At package.scala:[line 202]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66723');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66723" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class scala.io.Source$<br/>In method scala.io.Source$.fromURL(URL, Codec)<br/>At Source.scala:[line 141]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source scala/io/Source$.fromURL(Ljava/net/URL;Lscala/io/Codec;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected<br/>At Source.scala:[line 126]<br/>At Source.scala:[line 131]<br/>At Source.scala:[line 136]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66969');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66969" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class scala.sys.process.ProcessBuilderImpl$URLInput$$anonfun$$lessinit$greater$1<br/>In method scala.sys.process.ProcessBuilderImpl$URLInput$$anonfun$$lessinit$greater$1.apply()<br/>At ProcessBuilderImpl.scala:[line 31]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source scala/sys/process/ProcessBuilderImpl$URLInput$$anonfun$$lessinit$greater$1.url$1<br/>At ProcessBuilderImpl.scala:[line 31]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66065');">
<td>
<span class="priority-2">SSECPTI</span>
</td>
<td>This Scala API (scala/io/Source$.fromFile(Ljava/lang/String;Ljava/lang/String;)Lscala/io/BufferedSource;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66065" style="display: none;">
<a href="#SCALA_PATH_TRAVERSAL_IN">Bug type SCALA_PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source<br/>In method scala.io.Source.fromFile(String, String)<br/>In Source.scala<br/>Sink method scala/io/Source$.fromFile(Ljava/lang/String;Ljava/lang/String;)Lscala/io/BufferedSource;<br/>Sink parameter 1<br/>Unknown source scala/io/Source.fromFile(Ljava/lang/String;Ljava/lang/String;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66132');">
<td>
<span class="priority-2">SSECPTI</span>
</td>
<td>This Scala API (scala/io/Source$.fromFile(Ljava/lang/String;Lscala/io/Codec;)Lscala/io/BufferedSource;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66132" style="display: none;">
<a href="#SCALA_PATH_TRAVERSAL_IN">Bug type SCALA_PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source<br/>In method scala.io.Source.fromFile(String, Codec)<br/>In Source.scala<br/>Sink method scala/io/Source$.fromFile(Ljava/lang/String;Lscala/io/Codec;)Lscala/io/BufferedSource;<br/>Sink parameter 1<br/>Unknown source scala/io/Source.fromFile(Ljava/lang/String;Lscala/io/Codec;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66199');">
<td>
<span class="priority-2">SSECPTI</span>
</td>
<td>This Scala API (scala/io/Source$.fromFile(Ljava/net/URI;Ljava/lang/String;)Lscala/io/BufferedSource;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66199" style="display: none;">
<a href="#SCALA_PATH_TRAVERSAL_IN">Bug type SCALA_PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source<br/>In method scala.io.Source.fromFile(URI, String)<br/>In Source.scala<br/>Sink method scala/io/Source$.fromFile(Ljava/net/URI;Ljava/lang/String;)Lscala/io/BufferedSource;<br/>Sink parameter 1<br/>Unknown source scala/io/Source.fromFile(Ljava/net/URI;Ljava/lang/String;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66266');">
<td>
<span class="priority-2">SSECPTI</span>
</td>
<td>This Scala API (scala/io/Source$.fromFile(Ljava/net/URI;Lscala/io/Codec;)Lscala/io/BufferedSource;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66266" style="display: none;">
<a href="#SCALA_PATH_TRAVERSAL_IN">Bug type SCALA_PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source<br/>In method scala.io.Source.fromFile(URI, Codec)<br/>In Source.scala<br/>Sink method scala/io/Source$.fromFile(Ljava/net/URI;Lscala/io/Codec;)Lscala/io/BufferedSource;<br/>Sink parameter 1<br/>Unknown source scala/io/Source.fromFile(Ljava/net/URI;Lscala/io/Codec;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66575');">
<td>
<span class="priority-2">SSECPTI</span>
</td>
<td>This Scala API (scala/io/Source$.fromFile(Ljava/lang/String;Lscala/io/Codec;)Lscala/io/BufferedSource;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66575" style="display: none;">
<a href="#SCALA_PATH_TRAVERSAL_IN">Bug type SCALA_PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source$<br/>In method scala.io.Source$.fromFile(String, String)<br/>At Source.scala:[line 60]<br/>Sink method scala/io/Source$.fromFile(Ljava/lang/String;Lscala/io/Codec;)Lscala/io/BufferedSource;<br/>Sink parameter 1<br/>Unknown source scala/io/Source$.fromFile(Ljava/lang/String;Ljava/lang/String;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66649');">
<td>
<span class="priority-2">SSECPTI</span>
</td>
<td>This Scala API (scala/io/Source$.fromFile(Ljava/net/URI;Lscala/io/Codec;)Lscala/io/BufferedSource;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66649" style="display: none;">
<a href="#SCALA_PATH_TRAVERSAL_IN">Bug type SCALA_PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class scala.io.Source$<br/>In method scala.io.Source$.fromFile(URI, String)<br/>At Source.scala:[line 70]<br/>Sink method scala/io/Source$.fromFile(Ljava/net/URI;Lscala/io/Codec;)Lscala/io/BufferedSource;<br/>Sink parameter 1<br/>Unknown source scala/io/Source$.fromFile(Ljava/net/URI;Ljava/lang/String;)Lscala/io/BufferedSource; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="COMMAND_INJECTION">COMMAND_INJECTION: Potential Command Injection</a>
</h2>
            
<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>import java.lang.Runtime;

Runtime r = Runtime.getRuntime();
r.exec("/bin/sh -c some_tool" + input);</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>
</p>

        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM_SCALA">PREDICTABLE_RANDOM_SCALA: Predictable pseudorandom number generator (Scala)</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <b>java.security.SecureRandom</b>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>import scala.util.Random

def generateSecretToken() {
    val result = Seq.fill(16)(Random.nextInt)
    return result.map("%02x" format _).mkString
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>import java.security.SecureRandom

def generateSecretToken() {
    val rand = new SecureRandom()
    val value = Array.ofDim[Byte](16)
    rand.nextBytes(value)
    return value.map("%02x" format _).mkString
}</pre>
</p>
<!--<p>
<b>Solution:</b>
<pre>import java.security.SecureRandom
import scala.util.Random._

def generateSecretToken() {
    val secRandom = javaRandomToRandom(new SecureRandom())
    val result = Seq.fill(16)(secRandom.nextInt)
    return result.map("%02x" format _).mkString
}</pre>
</p>-->
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (http://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SCALA_COMMAND_INJECTION">SCALA_COMMAND_INJECTION: Potential Command Injection (Scala)</a>
</h2>
            
<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>def executeCommand(value:String) = Action {
    val result = value.!
    Ok("Result:\n"+result)
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="SCALA_PATH_TRAVERSAL_IN">SCALA_PATH_TRAVERSAL_IN: Potential Path Traversal using Scala API (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>def getWordList(value:String) = Action {
  if (!Files.exists(Paths.get("public/lists/" + value))) {
    NotFound("File not found")
  } else {
    val result = Source.fromFile("public/lists/" + value).getLines().mkString // Weak point
    Ok(result)
  }
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

def getWordList(value:String) = Action {
  val filename = "public/lists/" + FilenameUtils.getName(value)

  if (!Files.exists(Paths.get(filename))) {
    NotFound("File not found")
  } else {
    val result = Source.fromFile(filename).getLines().mkString // Fix
    Ok(result)
  }
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        </body>
</html>
