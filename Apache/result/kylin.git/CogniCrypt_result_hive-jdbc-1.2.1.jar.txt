[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 434.8 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 7 analysis seeds within 0 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 7
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.14

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 8
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.25

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 8
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 8
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 9
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 9
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 9
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 9
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: r3
		Type: java.security.KeyStore
		Statement: r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer630)
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()>
		SHA-256: 9a03699f876168e30d337aff6f49bb33d4455125609fc4cd278ebe128e9936
		Secure: false
	Object:
		Variable: $r26
		Type: java.security.SecureRandom
		Statement: specialinvoke $r26.<java.security.SecureRandom: void <init>()>()
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()>
		SHA-256: 5bf8a0e874a7cdc7683461ffdc838234d70f23e3b0fd15fd4d1cc5551431cea6
		Secure: true
	Object:
		Variable: r30
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r30 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.lang.String)>(varReplacer635, varReplacer636)
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()>
		SHA-256: 71e0cc271d9a6377f310ce854720831cf0750ca438bc7db884e6ff04c68682c
		Secure: false
	Object:
		Variable: $r24
		Type: javax.net.ssl.KeyManager[]
		Statement: $r24 = virtualinvoke r30.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()>
		SHA-256: 5d303024dc0684a31fc3c79a3c07f3efca699a971b9cb96d8f2232b0919cf669
		Secure: false
	Object:
		Variable: r8
		Type: javax.net.ssl.SSLContext
		Statement: r8 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer628)
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()>
		SHA-256: ccf2a7f1bfd3985885484f65aa745f6d7cec114e9334221e6df65e59fa77b2c2
		Secure: false
	Object:
		Variable: r5
		Type: java.security.KeyStore
		Statement: r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer603)
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.impl.client.CloseableHttpClient getHttpClient(java.lang.Boolean)>
		SHA-256: 92daf50bb749b53c9822c63ee45b7fb66df0f0c48f0dbc19d1e235c388f85511
		Secure: false
	Object:
		Variable: $r25
		Type: javax.net.ssl.TrustManager[]
		Statement: $r25 = virtualinvoke r4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()>
		SHA-256: 4c73b3b12e58e306e7e65734a9f081bc273934509f6e80d72b02aa90af67c7f1
		Secure: false
	Object:
		Variable: r7
		Type: java.security.KeyStore
		Statement: r7 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer633)
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()>
		SHA-256: aebbabd8670719993c7c4d7a99bf21197885d73dfac2ad27980e10138182dfc7
		Secure: false
	Object:
		Variable: r4
		Type: javax.net.ssl.TrustManagerFactory
		Statement: r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer634)
		Method: <org.apache.hive.jdbc.HiveConnection: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()>
		SHA-256: c020634d3e5eb8c90191dd47278d91f8d6c6e9ed15373a946ceb892177be8bea
		Secure: false

Findings in Java Class: org.apache.hive.jdbc.HiveConnection

	 in Method: org.apache.http.impl.client.CloseableHttpClient getHttpClient(java.lang.Boolean)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #92daf50bb749b53c9822c63ee45b7fb66df0f0c48f0dbc19d1e235c388f85511)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r5.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r80, $r29)


	 in Method: org.apache.http.conn.ssl.SSLSocketFactory getTwoWaySSLSocketFactory()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r30.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r3, $r16)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.TrustManagerFactory (on Object #c020634d3e5eb8c90191dd47278d91f8d6c6e9ed15373a946ceb892177be8bea)
			Operation on object of type javax.net.ssl.TrustManagerFactory object not completed. Expected call to init
			at statement: r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer634)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ccf2a7f1bfd3985885484f65aa745f6d7cec114e9334221e6df65e59fa77b2c2)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: r8 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer628)

		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #9a03699f876168e30d337aff6f49bb33d4455125609fc4cd278ebe128e9936)
			Operation on object of type java.security.KeyStore object not completed. Expected call to load
			at statement: r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer630)

		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #aebbabd8670719993c7c4d7a99bf21197885d73dfac2ad27980e10138182dfc7)
			Operation on object of type java.security.KeyStore object not completed. Expected call to load
			at statement: r7 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer633)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r8.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r24, $r25, $r26)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r8.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r24, $r25, $r26)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #71e0cc271d9a6377f310ce854720831cf0750ca438bc7db884e6ff04c68682c)
			Operation on object of type javax.net.ssl.KeyManagerFactory object not completed. Expected call to init
			at statement: r30 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.lang.String)>(varReplacer635, varReplacer636)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #9a03699f876168e30d337aff6f49bb33d4455125609fc4cd278ebe128e9936)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r14, $r15)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #aebbabd8670719993c7c4d7a99bf21197885d73dfac2ad27980e10138182dfc7)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r7.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r22, $r23)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #71e0cc271d9a6377f310ce854720831cf0750ca438bc7db884e6ff04c68682c)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r30.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r3, $r16)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r4.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r7)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 9

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 1
	IncompleteOperationError: 4
	RequiredPredicateError: 4
	NeverTypeOfError: 4
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 0 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 1.902 s

