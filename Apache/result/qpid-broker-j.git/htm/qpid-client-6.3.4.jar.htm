<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/qpid-broker-j.git/qpid-client-6.3.4.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>42120 lines of code analyzed,
	in 834 classes, 
	in 49 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">2</td>
<td align="right">0.05</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">33</td>
<td align="right">0.78</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>35</b>
</td>
<td align="right">
<b>0.83</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">35</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>35</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.qpid.client.AMQDestination<br/>In method new org.apache.qpid.client.AMQDestination(BindingURL)<br/>At AMQDestination.java:[line 306]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/client/AMQDestination._destSyntax<br/>Unknown source org/apache/qpid/client/AMQDestination.&lt;init&gt;(Lorg/apache/qpid/url/BindingURL;)V parameter 0<br/>Method usage with tainted arguments detected<br/>At AMQDestination.java:[line 306]<br/>At AMQQueue.java:[line 58]<br/>At AMQTopic.java:[line 61]<br/>At ObjectFactory.java:[line 209]<br/>At ObjectFactory.java:[line 220]<br/>At PropertiesFileInitialContextFactory.java:[line 88]<br/>At PropertiesFileInitialContextFactory.java:[line 91]<br/>At PropertiesFileInitialContextFactory.java:[line 96]<br/>At PropertiesFileInitialContextFactory.java:[line 98]<br/>At PropertiesFileInitialContextFactory.java:[line 100]<br/>At PropertiesFileInitialContextFactory.java:[line 101]<br/>At PropertiesFileInitialContextFactory.java:[line 122]<br/>At PropertiesFileInitialContextFactory.java:[line 124]<br/>At PropertiesFileInitialContextFactory.java:[line 189]<br/>At PropertiesFileInitialContextFactory.java:[line 191]<br/>At PropertiesFileInitialContextFactory.java:[line 196]<br/>At PropertiesFileInitialContextFactory.java:[line 207]<br/>At PropertiesFileInitialContextFactory.java:[line 209]<br/>At PropertiesFileInitialContextFactory.java:[line 214]<br/>At PropertiesFileInitialContextFactory.java:[line 283]<br/>At PropertiesFileInitialContextFactory.java:[line 307]<br/>At PropertiesFileInitialContextFactory.java:[line 324]<br/>At Strings.java:[line 254]<br/>At Strings.java:[line 277]<br/>At Strings.java:[line 286]<br/>At Strings.java:[line 289]<br/>At Strings.java:[line 290]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66066');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66066" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.qpid.client.security.DynamicSaslRegistrar<br/>In method org.apache.qpid.client.security.DynamicSaslRegistrar.parseProperties(Properties)<br/>At DynamicSaslRegistrar.java:[line 199]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Properties.propertyNames()Ljava/util/Enumeration;<br/>Unknown source org/apache/qpid/client/security/DynamicSaslRegistrar.parseProperties(Ljava/util/Properties;)Ljava/util/Map; parameter 0<br/>Unknown source java/util/Enumeration.nextElement()Ljava/lang/Object;<br/>Method usage with tainted arguments detected<br/>At DynamicSaslRegistrar.java:[line 82]<br/>At DynamicSaslRegistrar.java:[line 86]<br/>At DynamicSaslRegistrar.java:[line 180]<br/>At DynamicSaslRegistrar.java:[line 187]<br/>At DynamicSaslRegistrar.java:[line 199]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66200');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.error(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66200" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.qpid.client.security.DynamicSaslRegistrar<br/>In method org.apache.qpid.client.security.DynamicSaslRegistrar.parseProperties(Properties)<br/>At DynamicSaslRegistrar.java:[line 204]<br/>Sink method org/slf4j/Logger.error(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/client/security/DynamicSaslRegistrar.parseProperties(Ljava/util/Properties;)Ljava/util/Map; parameter 0<br/>Unknown source java/util/Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;<br/>Method usage with tainted arguments detected<br/>At DynamicSaslRegistrar.java:[line 82]<br/>At DynamicSaslRegistrar.java:[line 86]<br/>At DynamicSaslRegistrar.java:[line 188]<br/>At DynamicSaslRegistrar.java:[line 204]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66319');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66319" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.qpid.client.security.DynamicSaslRegistrar<br/>In method org.apache.qpid.client.security.DynamicSaslRegistrar.registerSaslProviders()<br/>At DynamicSaslRegistrar.java:[line 84]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>At DynamicSaslRegistrar.java:[line 82]<br/>At DynamicSaslRegistrar.java:[line 84]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66408');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66408" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.qpid.client.security.JCAProvider<br/>In method org.apache.qpid.client.security.JCAProvider.register(Map)<br/>At JCAProvider.java:[line 72]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Unknown source java/util/Map.entrySet()Ljava/util/Set;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/apache/qpid/client/security/JCAProvider.register(Ljava/util/Map;)V parameter 0<br/>Method usage with tainted arguments detected<br/>At DynamicSaslRegistrar.java:[line 82]<br/>At DynamicSaslRegistrar.java:[line 86]<br/>At DynamicSaslRegistrar.java:[line 91]<br/>At DynamicSaslRegistrar.java:[line 180]<br/>At DynamicSaslRegistrar.java:[line 187]<br/>At DynamicSaslRegistrar.java:[line 192]<br/>At DynamicSaslRegistrar.java:[line 200]<br/>At JCAProvider.java:[line 59]<br/>At JCAProvider.java:[line 69]<br/>At JCAProvider.java:[line 72]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66897');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66897" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.qpid.jndi.PropertiesFileInitialContextFactory<br/>In method org.apache.qpid.jndi.PropertiesFileInitialContextFactory.createTopics(Map, Hashtable)<br/>At PropertiesFileInitialContextFactory.java:[line 226]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Unknown source org/apache/qpid/client/AMQDestination._routingKey<br/>Unknown source org/apache/qpid/client/AMQTopic.getBindingKeys()[Ljava/lang/String;<br/>Unknown source java/util/Hashtable.entrySet()Ljava/util/Set;<br/>Unknown source org/apache/qpid/client/AMQDestination._bindingKeys<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/apache/qpid/jndi/PropertiesFileInitialContextFactory.createTopics(Ljava/util/Map;Ljava/util/Hashtable;)V parameter 0<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source java/lang/Object.toString()Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Method usage with tainted arguments detected<br/>At AMQDestination.java:[line 517]<br/>At AMQDestination.java:[line 523]<br/>At PropertiesFileInitialContextFactory.java:[line 88]<br/>At PropertiesFileInitialContextFactory.java:[line 91]<br/>At PropertiesFileInitialContextFactory.java:[line 96]<br/>At PropertiesFileInitialContextFactory.java:[line 98]<br/>At PropertiesFileInitialContextFactory.java:[line 100]<br/>At PropertiesFileInitialContextFactory.java:[line 101]<br/>At PropertiesFileInitialContextFactory.java:[line 124]<br/>At PropertiesFileInitialContextFactory.java:[line 207]<br/>At PropertiesFileInitialContextFactory.java:[line 209]<br/>At PropertiesFileInitialContextFactory.java:[line 210]<br/>At PropertiesFileInitialContextFactory.java:[line 213]<br/>At PropertiesFileInitialContextFactory.java:[line 220]<br/>At PropertiesFileInitialContextFactory.java:[line 221]<br/>At PropertiesFileInitialContextFactory.java:[line 223]<br/>At PropertiesFileInitialContextFactory.java:[line 226]<br/>At Strings.java:[line 254]<br/>At Strings.java:[line 277]<br/>At Strings.java:[line 286]<br/>At Strings.java:[line 289]<br/>At Strings.java:[line 290]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68550');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68550" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.qpid.url.AMQBindingURL<br/>In method new org.apache.qpid.url.AMQBindingURL(String)<br/>At AMQBindingURL.java:[line 50]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/url/AMQBindingURL.&lt;init&gt;(Ljava/lang/String;)V parameter 0<br/>Method usage with tainted arguments detected<br/>At AMQConnection.java:[line 1707]<br/>At AMQDestination.java:[line 263]<br/>At AMQDestination.java:[line 273]<br/>At AMQDestination.java:[line 279]<br/>At AMQDestination.java:[line 282]<br/>At AMQDestination.java:[line 406]<br/>At AMQDestination.java:[line 798]<br/>At AMQDestination.java:[line 801]<br/>At AMQDestination.java:[line 1080]<br/>At AMQQueue.java:[line 48]<br/>At AMQSession.java:[line 1333]<br/>At AMQSession.java:[line 1340]<br/>At AMQSession.java:[line 1631]<br/>At AMQSession.java:[line 1638]<br/>At AMQSession.java:[line 1643]<br/>At AMQSession.java:[line 1725]<br/>At AMQTopic.java:[line 41]<br/>At AMQMessageDelegate_0_8.java:[line 280]<br/>At AMQMessageDelegate_0_8.java:[line 292]<br/>At AMQMessageDelegate_0_8.java:[line 299]<br/>At AMQMessageDelegate_0_8.java:[line 318]<br/>At AbstractAMQMessageDelegate.java:[line 249]<br/>At AbstractAMQMessageDelegate.java:[line 250]<br/>At AbstractAMQMessageDelegate.java:[line 255]<br/>At AbstractAMQMessageDelegate.java:[line 269]<br/>At AbstractAMQMessageDelegate.java:[line 272]<br/>At AbstractAMQMessageDelegate.java:[line 282]<br/>At AMQShortString.java:[line 278]<br/>At BasicContentHeaderProperties.java:[line 712]<br/>At ObjectFactory.java:[line 168]<br/>At ObjectFactory.java:[line 172]<br/>At ObjectFactory.java:[line 185]<br/>At ObjectFactory.java:[line 190]<br/>At ObjectFactory.java:[line 193]<br/>At ObjectFactory.java:[line 209]<br/>At ObjectFactory.java:[line 220]<br/>At PropertiesFileInitialContextFactory.java:[line 88]<br/>At PropertiesFileInitialContextFactory.java:[line 91]<br/>At PropertiesFileInitialContextFactory.java:[line 96]<br/>At PropertiesFileInitialContextFactory.java:[line 98]<br/>At PropertiesFileInitialContextFactory.java:[line 100]<br/>At PropertiesFileInitialContextFactory.java:[line 101]<br/>At PropertiesFileInitialContextFactory.java:[line 120]<br/>At PropertiesFileInitialContextFactory.java:[line 171]<br/>At PropertiesFileInitialContextFactory.java:[line 173]<br/>At PropertiesFileInitialContextFactory.java:[line 178]<br/>At PropertiesFileInitialContextFactory.java:[line 260]<br/>At PropertiesFileInitialContextFactory.java:[line 320]<br/>At AMQBindingURL.java:[line 50]<br/>At Strings.java:[line 254]<br/>At Strings.java:[line 277]<br/>At Strings.java:[line 286]<br/>At Strings.java:[line 289]<br/>At Strings.java:[line 290]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67907');">
<td>
<span class="priority-2">SECLDAPI</span>
</td>
<td>This use of javax/naming/ldap/LdapName.&lt;init&gt;(Ljava/lang/String;)V can be vulnerable to LDAP injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67907" style="display: none;">
<a href="#LDAP_INJECTION">Bug type LDAP_INJECTION (click for details)</a>
<br/>In class org.apache.qpid.transport.network.security.ssl.SSLUtil<br/>In method org.apache.qpid.transport.network.security.ssl.SSLUtil.getIdFromSubjectDN(String)<br/>At SSLUtil.java:[line 208]<br/>Sink method javax/naming/ldap/LdapName.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/network/security/ssl/SSLUtil.getIdFromSubjectDN(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>At SSLUtil.java:[line 246]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67986');">
<td>
<span class="priority-2">SECLDAPI</span>
</td>
<td>This use of javax/naming/ldap/LdapName.&lt;init&gt;(Ljava/lang/String;)V can be vulnerable to LDAP injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67986" style="display: none;">
<a href="#LDAP_INJECTION">Bug type LDAP_INJECTION (click for details)</a>
<br/>In class org.apache.qpid.transport.network.security.ssl.SSLUtil<br/>In method org.apache.qpid.transport.network.security.ssl.SSLUtil.verifyHostname(String, X509Certificate)<br/>At SSLUtil.java:[line 131]<br/>Sink method javax/naming/ldap/LdapName.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/security/Principal.getName()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66597');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66597" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.qpid.client.security.UsernameHashedPasswordCallbackHandler<br/>In method org.apache.qpid.client.security.UsernameHashedPasswordCallbackHandler.getHash(String)<br/>At UsernameHashedPasswordCallbackHandler.java:[line 81]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65958');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.apache.qpid.client.message.JMSObjectMessage.read(ByteBuffer)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65958" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.apache.qpid.client.message.JMSObjectMessage<br/>In method org.apache.qpid.client.message.JMSObjectMessage.read(ByteBuffer)<br/>At JMSObjectMessage.java:[line 202]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65900');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65900" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.qpid.client.PooledConnectionFactory<br/>In method new org.apache.qpid.client.PooledConnectionFactory()<br/>At PooledConnectionFactory.java:[line 134]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69599');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69599" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.qpid.util.Strings<br/>In method org.apache.qpid.util.Strings.&lt;static initializer for Strings&gt;()<br/>At Strings.java:[line 49]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66739');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66739" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.configuration.CommonProperties<br/>In method org.apache.qpid.configuration.CommonProperties.loadProperties(Properties, String, boolean)<br/>At CommonProperties.java:[line 236]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/configuration/CommonProperties.loadProperties(Ljava/util/Properties;Ljava/lang/String;Z)V parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67236');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67236" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.jndi.PropertiesFileInitialContextFactory<br/>In method org.apache.qpid.jndi.PropertiesFileInitialContextFactory.getProviderUrlInputStream(String)<br/>At PropertiesFileInitialContextFactory.java:[line 140]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/jndi/PropertiesFileInitialContextFactory.getProviderUrlInputStream(Ljava/lang/String;)Ljava/io/InputStream; parameter 0<br/>Method usage not detected<br/>At PropertiesFileInitialContextFactory.java:[line 79]<br/>At PropertiesFileInitialContextFactory.java:[line 85]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67439');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67439" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.transport.ConnectionSettings<br/>In method org.apache.qpid.transport.ConnectionSettings.getKeyManagers(String, String, String, String)<br/>At ConnectionSettings.java:[line 640]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/ConnectionSettings.getKeyManagers(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Ljavax/net/ssl/KeyManager; parameter 3<br/>At ConnectionSettings.java:[line 435]<br/>At ConnectionSettings.java:[line 606]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67528');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67528" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.transport.ConnectionSettings<br/>In method org.apache.qpid.transport.ConnectionSettings.getKeyManagers(String, String, String, String)<br/>At ConnectionSettings.java:[line 641]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/ConnectionSettings.getKeyManagers(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Ljavax/net/ssl/KeyManager; parameter 2<br/>At ConnectionSettings.java:[line 445]<br/>At ConnectionSettings.java:[line 606]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67617');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67617" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.transport.ConnectionSettings<br/>In method org.apache.qpid.transport.ConnectionSettings.getKeyManagers(String, String, String, String)<br/>At ConnectionSettings.java:[line 647]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/ConnectionSettings.getKeyManagers(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Ljavax/net/ssl/KeyManager; parameter 1<br/>At ConnectionSettings.java:[line 455]<br/>At ConnectionSettings.java:[line 606]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67706');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67706" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.transport.ConnectionSettings<br/>In method org.apache.qpid.transport.ConnectionSettings.getTrustManagers(String)<br/>At ConnectionSettings.java:[line 671]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/ConnectionSettings.getTrustManagers(Ljava/lang/String;)[Ljavax/net/ssl/TrustManager; parameter 0<br/>At ConnectionSettings.java:[line 465]<br/>At ConnectionSettings.java:[line 626]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68055');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68055" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.transport.network.security.ssl.SSLUtil<br/>In method org.apache.qpid.transport.network.security.ssl.SSLUtil.getInitializedKeyStore(String, String, String)<br/>At SSLUtil.java:[line 262]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/network/security/ssl/SSLUtil.getInitializedKeyStore(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyStore; parameter 2<br/>At SSLContextFactory.java:[line 72]<br/>At SSLContextFactory.java:[line 78]<br/>At SSLContextFactory.java:[line 105]<br/>At ConnectionSettings.java:[line 335]<br/>At ConnectionSettings.java:[line 365]<br/>At ConnectionSettings.java:[line 475]<br/>At ConnectionSettings.java:[line 525]<br/>At ConnectionSettings.java:[line 598]<br/>At ConnectionSettings.java:[line 619]<br/>At ConnectionSettings.java:[line 702]<br/>At ConnectionSettings.java:[line 719]<br/>At QpidClientX509KeyManager.java:[line 49]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69164');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69164" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.util.FileUtils<br/>In method org.apache.qpid.util.FileUtils.copyRecursive(File, File)<br/>At FileUtils.java:[line 368]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/util/FileUtils.copyRecursive(Ljava/io/File;Ljava/io/File;)V parameter 0<br/>Unknown source java/io/File.toString()Ljava/lang/String;<br/>Unknown source java/io/File.getName()Ljava/lang/String;<br/>Method usage not detected<br/>At FileUtils.java:[line 368]<br/>At FileUtils.java:[line 372]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69268');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69268" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.util.FileUtils<br/>In method org.apache.qpid.util.FileUtils.copyRecursive(File, File)<br/>At FileUtils.java:[line 372]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/util/FileUtils.copyRecursive(Ljava/io/File;Ljava/io/File;)V parameter 0<br/>Unknown source java/io/File.toString()Ljava/lang/String;<br/>Unknown source java/io/File.getName()Ljava/lang/String;<br/>At FileUtils.java:[line 368]<br/>At FileUtils.java:[line 372]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69367');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69367" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.util.FileUtils<br/>In method org.apache.qpid.util.FileUtils.deleteDirectory(String)<br/>At FileUtils.java:[line 265]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/util/FileUtils.deleteDirectory(Ljava/lang/String;)Z parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69441');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69441" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.util.FileUtils<br/>In method org.apache.qpid.util.FileUtils.deleteFile(String)<br/>At FileUtils.java:[line 257]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/util/FileUtils.deleteFile(Ljava/lang/String;)Z parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69515');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69515" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.qpid.util.FileUtils<br/>In method org.apache.qpid.util.FileUtils.readFileAsBytes(String)<br/>At FileUtils.java:[line 63]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/util/FileUtils.readFileAsBytes(Ljava/lang/String;)[B parameter 0<br/>Method usage not detected<br/>At FileUtils.java:[line 83]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66655');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66655" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.qpid.configuration.ClientProperties<br/>In method org.apache.qpid.configuration.ClientProperties.ensureIsLoaded()<br/>At ClientProperties.java:[line 303]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source java/io/File.toURI()Ljava/net/URI;<br/>Unknown source java/net/URI.toURL()Ljava/net/URL;<br/>At ClientProperties.java:[line 298]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66813');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66813" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.qpid.configuration.CommonProperties<br/>In method org.apache.qpid.configuration.CommonProperties.loadProperties(Properties, String, boolean)<br/>At CommonProperties.java:[line 245]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source java/io/File.toURI()Ljava/net/URI;<br/>Unknown source java/net/URI.toURL()Ljava/net/URL;<br/>At CommonProperties.java:[line 236]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67330');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67330" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.qpid.jndi.PropertiesFileInitialContextFactory<br/>In method org.apache.qpid.jndi.PropertiesFileInitialContextFactory.getProviderUrlInputStream(String)<br/>At PropertiesFileInitialContextFactory.java:[line 135]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/jndi/PropertiesFileInitialContextFactory.getProviderUrlInputStream(Ljava/lang/String;)Ljava/io/InputStream; parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Method usage not detected<br/>At PropertiesFileInitialContextFactory.java:[line 79]<br/>At PropertiesFileInitialContextFactory.java:[line 85]<br/>At PropertiesFileInitialContextFactory.java:[line 133]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68244');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68244" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.qpid.transport.network.security.ssl.SSLUtil<br/>In method org.apache.qpid.transport.network.security.ssl.SSLUtil.getInitializedKeyStore(URL, String, String)<br/>At SSLUtil.java:[line 300]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/network/security/ssl/SSLUtil.getInitializedKeyStore(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyStore; parameter 2<br/>Method usage not detected<br/>At QpidClientX509KeyManager.java:[line 59]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68328');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68328" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.qpid.transport.network.security.ssl.SSLUtil<br/>In method org.apache.qpid.transport.network.security.ssl.SSLUtil.readCertificates(URL)<br/>At SSLUtil.java:[line 317]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/network/security/ssl/SSLUtil.readCertificates(Ljava/net/URL;)[Ljava/security/cert/X509Certificate; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68402');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68402" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.qpid.transport.network.security.ssl.SSLUtil<br/>In method org.apache.qpid.transport.network.security.ssl.SSLUtil.readCertificates(URL)<br/>At SSLUtil.java:[line 319]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/network/security/ssl/SSLUtil.readCertificates(Ljava/net/URL;)[Ljava/security/cert/X509Certificate; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68476');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68476" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.qpid.transport.network.security.ssl.SSLUtil<br/>In method org.apache.qpid.transport.network.security.ssl.SSLUtil.readPrivateKey(URL)<br/>At SSLUtil.java:[line 348]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/qpid/transport/network/security/ssl/SSLUtil.readPrivateKey(Ljava/net/URL;)Ljava/security/PrivateKey; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67795');">
<td>
<span class="priority-2">SECUS</span>
</td>
<td>Unencrypted socket to org.apache.qpid.transport.network.io.IoNetworkTransport (instead of SSLSocket)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67795" style="display: none;">
<a href="#UNENCRYPTED_SOCKET">Bug type UNENCRYPTED_SOCKET (click for details)</a>
<br/>In class org.apache.qpid.transport.network.io.IoNetworkTransport<br/>In method org.apache.qpid.transport.network.io.IoNetworkTransport.connectTcp(ConnectionSettings)<br/>At IoNetworkTransport.java:[line 112]<br/>Value remote host</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67853');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67853" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.qpid.transport.network.security.ssl.QpidPeersOnlyTrustManager<br/>In method org.apache.qpid.transport.network.security.ssl.QpidPeersOnlyTrustManager.getAcceptedIssuers()<br/>At QpidPeersOnlyTrustManager.java:[line 79]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66012');">
<td>
<span class="priority-2">STAIV</span>
</td>
<td>The initialization vector (IV) is not properly generated</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66012" style="display: none;">
<a href="#STATIC_IV">Bug type STATIC_IV (click for details)</a>
<br/>In class org.apache.qpid.client.message.MessageEncryptionHelper<br/>In method org.apache.qpid.client.message.MessageEncryptionHelper.encrypt(SecretKeySpec, byte[], byte[])<br/>At MessageEncryptionHelper.java:[line 352]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="LDAP_INJECTION">LDAP_INJECTION: Potential LDAP Injection</a>
</h2>
            
<p>
Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately, LDAP doesn't have prepared statement interfaces like SQL.
Therefore, the primary defense against LDAP injection is strong input validation of any untrusted data before including it in an LDAP query.
</p>
<p>
    <b>Code at risk:</b><br/>
    <pre>NamingEnumeration&lt;SearchResult&gt; answers = context.search("dc=People,dc=example,dc=com",
        "(uid=" + username + ")", ctrls);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246947/LDAP%20Injection">WASC-29: LDAP Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/90.html">CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</a><br/>
<a href="https://www.veracode.com/security/ldap-injection">LDAP Injection Guide: Learn How to Detect LDAP Injections and Improve LDAP Security</a>
</p>

        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNENCRYPTED_SOCKET">UNENCRYPTED_SOCKET: Unencrypted Socket</a>
</h2>
            
<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain socket (Cleartext communication):
<pre>Socket soc = new Socket("www.google.com",80);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Socket (Secure communication):
<pre>Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);</pre>
</p>
<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>

        
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        
<h2>
<a name="STATIC_IV">STATIC_IV: Static IV</a>
</h2>
            
<p>
    Initialization vector must be regenerated for each message to be encrypted.
</p>
<p><b>Vulnerable Code:</b></p>
<p>
<pre>
private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};

public void encrypt(String message) throws Exception {

    IvParameterSpec ivSpec = new IvParameterSpec(IV);
[...]
</pre>
<p><b>Solution:</b></p>
<p>
<pre>
public void encrypt(String message) throws Exception {

    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);

    IvParameterSpec ivSpec = new IvParameterSpec(iv);
[...]
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://en.wikipedia.org/wiki/Initialization_vector">Wikipedia: Initialization vector</a><br/>
<a href="https://cwe.mitre.org/data/definitions/329.html">CWE-329: Not Using a Random IV with CBC Mode</a><br/>
<a href="https://defuse.ca/cbcmodeiv.htm">Encryption - CBC Mode IV: Secret or Not?</a>
</p>
            
        </body>
</html>
