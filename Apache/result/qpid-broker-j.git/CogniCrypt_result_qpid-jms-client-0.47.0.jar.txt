[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 641.2 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 11 analysis seeds within 1 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 13
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.08

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 15
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.13

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 16
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 18
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 19
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 21
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 21
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 22
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] ERROR boomerang.callgraph.ObservableDynamicICFG - Did not find method <javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])> for class io.netty.handler.ssl.OpenSslX509KeyManagerFactory
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManager[]
		Statement: $r2 = virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.TrustManager[] loadTrustManagers(org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: 8f8c40c251a5d70f6eef771b3721fa97eaf0c7b8cb572a965ddd1a6f76de6c22
		Secure: false
	Object:
		Variable: r1
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r1 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r8)
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.KeyManager[] loadKeyManagers(org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: 34f2f6e9c862023f33f58c926340a7610a57398dfa55c0bb8e06c2a8691f748f
		Secure: false
	Object:
		Variable: r1
		Type: javax.net.ssl.TrustManagerFactory
		Statement: r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r7)
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.TrustManagerFactory loadTrustManagerFactory(org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: 9eb8b96e5cb730cc4b5e81677406bf34cce48b708cf9a4994e41bdd4a5336486
		Secure: false
	Object:
		Variable: $r50
		Type: java.security.MessageDigest
		Statement: $r50 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r49)
		Method: <org.apache.qpid.jms.sasl.AbstractScramSHAMechanism: byte[] calculateClientProof(byte[])>
		SHA-256: bd6364935afad632c8266a97c5a0f9794ea6e4b6862b9ec58b2f5cc15a8d5064
		Secure: true
	Object:
		Variable: r3
		Type: byte[]
		Statement: r3 = virtualinvoke r2.<javax.crypto.Mac: byte[] doFinal(byte[])>(r1)
		Method: <org.apache.qpid.jms.sasl.CramMD5Mechanism: byte[] getChallengeResponse(byte[])>
		SHA-256: da25f93dcaf98251fe16cd1d70f2d36d54a192ee36f126a6c98f220ad6f912f4
		Secure: true
	Object:
		Variable: r1
		Type: byte[]
		Statement: r3 = virtualinvoke r2.<javax.crypto.Mac: byte[] doFinal(byte[])>(r1)
		Method: <org.apache.qpid.jms.sasl.CramMD5Mechanism: byte[] getChallengeResponse(byte[])>
		SHA-256: 3f5c07d59e252bcdac3a6ab27ef2772848da7414c75d0862b950e9df36765609
		Secure: true
	Object:
		Variable: r13
		Type: java.lang.Object
		Statement: r13 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r12)
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.KeyManagerFactory loadKeyManagerFactory(org.apache.qpid.jms.transports.TransportOptions,io.netty.handler.ssl.SslProvider)>
		SHA-256: cc5a7eba78b4a4ad79fb125f8e5efd9082b81988697bb0341d7c33fb8b2152fd
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.Mac
		Statement: r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer2070)
		Method: <org.apache.qpid.jms.sasl.CramMD5Mechanism: byte[] getChallengeResponse(byte[])>
		SHA-256: fbeea5e640b01fe3aac5e61dd940b69dd509cb9edc4e023cd269aa1e5ae38e7b
		Secure: true
	Object:
		Variable: $r12
		Type: javax.net.ssl.KeyManager[]
		Statement: $r12 = virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.KeyManager[] loadKeyManagers(org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: eb520007f30e8150c20f963e9b9285713984086764f7acc7bd594877755c67ff
		Secure: false
	Object:
		Variable: r7
		Type: javax.net.ssl.SSLEngine
		Statement: r7 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)>($r4, $i0)
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.SSLEngine createJdkSslEngine(java.net.URI,javax.net.ssl.SSLContext,org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: 9046afeff0f734d26cdc9ecd2f38b2ea9f5b5d8f846fc4cc8319a6bdbe6c4e82
		Secure: false
	Object:
		Variable: r3
		Type: java.security.KeyStore
		Statement: r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2)
		Method: <org.apache.qpid.jms.transports.TransportSupport: java.security.KeyStore loadStore(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 693ec6c250b0ea83d33584f8da2c8d78fb92201de39f6b427cb9b29f733eb0f4
		Secure: false
	Object:
		Variable: r1
		Type: javax.net.ssl.SSLContext
		Statement: r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r8)
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.SSLContext createJdkSslContext(org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: acac21e7ae3334aa3a2a44f419edb1f6b3e97f30bf1cea62f787623e0409a521
		Secure: false
	Object:
		Variable: $r4
		Type: java.lang.String
		Statement: specialinvoke r11.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r4)
		Method: <org.apache.qpid.jms.sasl.AbstractScramSHAMechanism: javax.crypto.Mac createHmac(byte[])>
		SHA-256: ba61a3221bd4fe34ae341746cd25b3bc3f38061514516564245537f8fb5a22ea
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.SSLContext createJdkSslContext(org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: d326f5b2e90b15efe69e1d6d2de944a3e5e0e6deaa8b6ff68b879f613520561d
		Secure: true
	Object:
		Variable: r11
		Type: byte[]
		Statement: r11 = virtualinvoke $r50.<java.security.MessageDigest: byte[] digest(byte[])>(r10)
		Method: <org.apache.qpid.jms.sasl.AbstractScramSHAMechanism: byte[] calculateClientProof(byte[])>
		SHA-256: 9ca7ffdbc6a5297b560f6e659dcbc87e6f3527f87c5165b4cf178adaf039a2dc
		Secure: true
	Object:
		Variable: $r10
		Type: javax.net.ssl.KeyManager[]
		Statement: $r10 = virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.KeyManager[] loadKeyManagers(org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: b4b656b02fc2fd74f83d817ad1cd752fd7037f4c1a8d34e5a26680b9fa8d36f
		Secure: false
	Object:
		Variable: r7
		Type: javax.net.ssl.SSLEngine
		Statement: r7 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>()
		Method: <org.apache.qpid.jms.transports.TransportSupport: javax.net.ssl.SSLEngine createJdkSslEngine(java.net.URI,javax.net.ssl.SSLContext,org.apache.qpid.jms.transports.TransportOptions)>
		SHA-256: c7719835a9e384d0ea9f6eaffcb71149fa4b0a1ec48ac6f9fd5d331288fe056f
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <org.apache.qpid.jms.sasl.AbstractScramSHAMechanism: byte[] computeHmac(byte[],java.lang.String)>
		SHA-256: 9dc85bb8fc8c3de32227a6c484dded0dc1f9a2a205e24d06b519dfec124a63c8
		Secure: true
	Object:
		Variable: r3
		Type: byte[]
		Statement: r3 = virtualinvoke r2.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <org.apache.qpid.jms.sasl.AbstractScramSHAMechanism: byte[] generateSaltedPassword(byte[])>
		SHA-256: c426804113790cc44a453791f1abfa009d78aa5917e09a6fa10c93b8dbd4510e
		Secure: true
	Object:
		Variable: varReplacer2072
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2072)
		Method: <org.apache.qpid.jms.sasl.CramMD5Mechanism: byte[] getChallengeResponse(byte[])>
		SHA-256: d94cbd77dd9359ad1cd15b77bea4ca2ea3b05df3a8f6062bda452c812650036d
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.Mac
		Statement: r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <org.apache.qpid.jms.sasl.AbstractScramSHAMechanism: javax.crypto.Mac createHmac(byte[])>
		SHA-256: 85baabf28e5a4331a61f69898868fc726fe5485864a87f01526e13d4503cbdd4
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2072)
		Method: <org.apache.qpid.jms.sasl.CramMD5Mechanism: byte[] getChallengeResponse(byte[])>
		SHA-256: 7d80ee86d5bc03ae2b28c2fba250397dfc12090874a4ff4c1381eac2a49c2bf3
		Secure: false
	Object:
		Variable: r10
		Type: byte[]
		Statement: r11 = virtualinvoke $r50.<java.security.MessageDigest: byte[] digest(byte[])>(r10)
		Method: <org.apache.qpid.jms.sasl.AbstractScramSHAMechanism: byte[] calculateClientProof(byte[])>
		SHA-256: 13d4c5dbe95c5c9fb9f8652fad7300d7f98bf94510e4d8149ccd7ca5639124b5
		Secure: true
	Object:
		Variable: r11
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r11.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r4)
		Method: <org.apache.qpid.jms.sasl.AbstractScramSHAMechanism: javax.crypto.Mac createHmac(byte[])>
		SHA-256: 5005b170802ae1e0dbc9eeec57865bb0d46c82a77e366998b8ef6045e7e63dd3
		Secure: false

Findings in Java Class: org.apache.qpid.jms.sasl.AbstractScramSHAMechanism

	 in Method: byte[] generateSaltedPassword(byte[])
		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #85baabf28e5a4331a61f69898868fc726fe5485864a87f01526e13d4503cbdd4)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke r2.<javax.crypto.Mac: void update(byte[])>($r8)


	 in Method: javax.crypto.Mac createHmac(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r11.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r4)


Findings in Java Class: org.apache.qpid.jms.sasl.CramMD5Mechanism

	 in Method: byte[] getChallengeResponse(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2072)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #7d80ee86d5bc03ae2b28c2fba250397dfc12090874a4ff4c1381eac2a49c2bf3)
			Second parameter (with value "HMACMD5") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2072)


Findings in Java Class: org.apache.qpid.jms.transports.TransportSupport

	 in Method: javax.net.ssl.KeyManager[] loadKeyManagers(org.apache.qpid.jms.transports.TransportOptions)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r6, $r15)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #34f2f6e9c862023f33f58c926340a7610a57398dfa55c0bb8e06c2a8691f748f)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r6, $r15)


	 in Method: javax.net.ssl.KeyManagerFactory loadKeyManagerFactory(org.apache.qpid.jms.transports.TransportOptions,io.netty.handler.ssl.SslProvider)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r5, $r14)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #cc5a7eba78b4a4ad79fb125f8e5efd9082b81988697bb0341d7c33fb8b2152fd)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r5, $r14)


	 in Method: io.netty.handler.ssl.SslContext createOpenSslContext(org.apache.qpid.jms.transports.TransportOptions)
		IncompleteOperationError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #cc5a7eba78b4a4ad79fb125f8e5efd9082b81988697bb0341d7c33fb8b2152fd)
			Operation on object of type java.lang.Object object not completed. Expected call to init
			at statement: virtualinvoke r3.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(javax.net.ssl.KeyManagerFactory)>(r1)


	 in Method: java.security.KeyStore loadStore(java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #693ec6c250b0ea83d33584f8da2c8d78fb92201de39f6b427cb9b29f733eb0f4)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r4, $r16)


	 in Method: javax.net.ssl.SSLContext createJdkSslContext(org.apache.qpid.jms.transports.TransportOptions)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r2, r3, $r5)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r2, r3, $r5)


	 in Method: javax.net.ssl.TrustManagerFactory loadTrustManagerFactory(org.apache.qpid.jms.transports.TransportOptions)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r5)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 24

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 3
	ConstraintError: 1
	IncompleteOperationError: 1
	TypestateError: 1
	RequiredPredicateError: 7
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 1 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 4.759 s

