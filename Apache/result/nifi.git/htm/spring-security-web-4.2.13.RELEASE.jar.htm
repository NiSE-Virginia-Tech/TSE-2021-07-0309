<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/nifi.git/spring-security-web-4.2.13.RELEASE.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>8153 lines of code analyzed,
	in 283 classes, 
	in 37 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">4</td>
<td align="right">0.49</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">58</td>
<td align="right">7.11</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>62</b>
</td>
<td align="right">
<b>7.60</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">62</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>62</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70430');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70430" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.springframework.security.web.debug.Logger<br/>In method org.springframework.security.web.debug.Logger.info(String, boolean)<br/>At Logger.java:[line 44]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66661');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66661" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.access.channel.AbstractRetryEntryPoint<br/>In method org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)<br/>At AbstractRetryEntryPoint.java:[line 77]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServerName()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/access/channel/AbstractRetryEntryPoint.scheme<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>At AbstractRetryEntryPoint.java:[line 62]<br/>At AbstractRetryEntryPoint.java:[line 63]<br/>At AbstractRetryEntryPoint.java:[line 72]<br/>At AbstractRetryEntryPoint.java:[line 77]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66785');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66785" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.access.channel.ChannelProcessingFilter<br/>In method org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ServletRequest, ServletResponse, FilterChain)<br/>At ChannelProcessingFilter.java:[line 146]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 3<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 4<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Tainted source org/springframework/security/web/FilterInvocation.getRequestUrl()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/access/intercept/FilterInvocationSecurityMetadataSource.getAttributes(Ljava/lang/Object;)Ljava/util/Collection;<br/>Tainted source org/springframework/security/web/FilterInvocation.toString()Ljava/lang/String;<br/>At FilterInvocation.java:[line 136]<br/>At FilterInvocation.java:[line 149]<br/>At ChannelProcessingFilter.java:[line 147]<br/>At UrlUtils.java:[line 103]<br/>At UrlUtils.java:[line 104]<br/>At UrlUtils.java:[line 116]<br/>At UrlUtils.java:[line 118]<br/>At UrlUtils.java:[line 122]<br/>At UrlUtils.java:[line 126]<br/>At UrlUtils.java:[line 129]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66427');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66427" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator<br/>In method org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator.isAllowed(String, String, String, Authentication)<br/>At DefaultWebInvocationPrivilegeEvaluator.java:[line 123]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;Ljava/lang/Throwable;)V<br/>Sink parameter 1<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/access/DefaultWebInvocationPrivilegeEvaluator.isAllowed(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/springframework/security/core/Authentication;)Z parameter 0<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 3<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 4<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Tainted source org/springframework/security/web/FilterInvocation.getRequestUrl()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/FilterInvocation.toString()Ljava/lang/String;<br/>Unknown source java/lang/Object.toString()Ljava/lang/String;<br/>At FilterInvocation.java:[line 136]<br/>At FilterInvocation.java:[line 149]<br/>At DefaultWebInvocationPrivilegeEvaluator.java:[line 123]<br/>At UrlUtils.java:[line 103]<br/>At UrlUtils.java:[line 104]<br/>At UrlUtils.java:[line 116]<br/>At UrlUtils.java:[line 118]<br/>At UrlUtils.java:[line 122]<br/>At UrlUtils.java:[line 126]<br/>At UrlUtils.java:[line 129]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67158');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67158" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler<br/>In method org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 110]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 107]<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 110]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67247');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67247" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler<br/>In method org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 118]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getHeader(Ljava/lang/String;)Ljava/lang/String;<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 117]<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 118]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67336');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67336" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler<br/>In method org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 86]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getHeader(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/authentication/AbstractAuthenticationTargetUrlRequestHandler.defaultTargetUrl<br/>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source org/springframework/security/web/authentication/AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)Ljava/lang/String;<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 83]<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 86]<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 100]<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 107]<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 117]<br/>At AbstractAuthenticationTargetUrlRequestHandler.java:[line 122]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68684');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68684" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.authentication.switchuser.SwitchUserFilter<br/>In method org.springframework.security.web.authentication.switchuser.SwitchUserFilter.attemptSwitchUser(HttpServletRequest)<br/>At SwitchUserFilter.java:[line 227]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;<br/>At SwitchUserFilter.java:[line 220]<br/>At SwitchUserFilter.java:[line 227]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69463');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69463" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.authentication.www.DigestAuthenticationFilter<br/>In method org.springframework.security.web.authentication.www.DigestAuthenticationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)<br/>At DigestAuthenticationFilter.java:[line 132]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getHeader(Ljava/lang/String;)Ljava/lang/String;<br/>At DigestAuthenticationFilter.java:[line 123]<br/>At DigestAuthenticationFilter.java:[line 132]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69847');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69847" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.csrf.CsrfFilter<br/>In method org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)<br/>At CsrfFilter.java:[line 110]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildFullRequestUrl(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildFullRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildFullRequestUrl(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildFullRequestUrl(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 4<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildFullRequestUrl(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>At CsrfFilter.java:[line 111]<br/>At UrlUtils.java:[line 40]<br/>At UrlUtils.java:[line 41]<br/>At UrlUtils.java:[line 55]<br/>At UrlUtils.java:[line 58]<br/>At UrlUtils.java:[line 63]<br/>At UrlUtils.java:[line 68]<br/>At UrlUtils.java:[line 74]<br/>At UrlUtils.java:[line 77]<br/>At UrlUtils.java:[line 80]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70046');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.info(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70046" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.debug.Logger<br/>In method org.springframework.security.web.debug.Logger.info(String, boolean)<br/>At Logger.java:[line 54]<br/>Sink method org/apache/commons/logging/Log.info(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/debug/Logger.info(Ljava/lang/String;Z)V parameter 1<br/>Unknown source java/io/StringWriter.toString()Ljava/lang/String;<br/>Unknown source java/io/StringWriter.&lt;init&gt;()V<br/>Method usage with tainted arguments detected<br/>At DebugFilter.java:[line 70]<br/>At DebugFilter.java:[line 71]<br/>At DebugFilter.java:[line 72]<br/>At DebugFilter.java:[line 73]<br/>At DebugFilter.java:[line 74]<br/>At DebugFilter.java:[line 99]<br/>At DebugFilter.java:[line 101]<br/>At DebugFilter.java:[line 102]<br/>At DebugFilter.java:[line 103]<br/>At DebugFilter.java:[line 104]<br/>At DebugFilter.java:[line 106]<br/>At DebugFilter.java:[line 108]<br/>At DebugFilter.java:[line 111]<br/>At DebugFilter.java:[line 113]<br/>At DebugFilter.java:[line 138]<br/>At DebugFilter.java:[line 166]<br/>At Logger.java:[line 34]<br/>At Logger.java:[line 40]<br/>At Logger.java:[line 43]<br/>At Logger.java:[line 44]<br/>At Logger.java:[line 49]<br/>At Logger.java:[line 52]<br/>At Logger.java:[line 54]<br/>At UrlUtils.java:[line 103]<br/>At UrlUtils.java:[line 104]<br/>At UrlUtils.java:[line 116]<br/>At UrlUtils.java:[line 118]<br/>At UrlUtils.java:[line 122]<br/>At UrlUtils.java:[line 126]<br/>At UrlUtils.java:[line 129]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65683');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65683" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.FilterChainProxy<br/>In method org.springframework.security.web.FilterChainProxy.doFilterInternal(ServletRequest, ServletResponse, FilterChain)<br/>At FilterChainProxy.java:[line 201]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 3<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 4<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>At FilterChainProxy.java:[line 201]<br/>At UrlUtils.java:[line 103]<br/>At UrlUtils.java:[line 104]<br/>At UrlUtils.java:[line 116]<br/>At UrlUtils.java:[line 118]<br/>At UrlUtils.java:[line 122]<br/>At UrlUtils.java:[line 126]<br/>At UrlUtils.java:[line 129]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65877');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65877" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.FilterChainProxy$VirtualFilterChain<br/>In method org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(ServletRequest, ServletResponse)<br/>At FilterChainProxy.java:[line 310]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 3<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 4<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>At FilterChainProxy.java:[line 310]<br/>At UrlUtils.java:[line 103]<br/>At UrlUtils.java:[line 104]<br/>At UrlUtils.java:[line 116]<br/>At UrlUtils.java:[line 118]<br/>At UrlUtils.java:[line 122]<br/>At UrlUtils.java:[line 126]<br/>At UrlUtils.java:[line 129]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66071');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66071" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.FilterChainProxy$VirtualFilterChain<br/>In method org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(ServletRequest, ServletResponse)<br/>At FilterChainProxy.java:[line 325]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Tainted source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 3<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 4<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/UrlUtils.buildRequestUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>At FilterChainProxy.java:[line 325]<br/>At FilterChainProxy.java:[line 328]<br/>At UrlUtils.java:[line 103]<br/>At UrlUtils.java:[line 104]<br/>At UrlUtils.java:[line 116]<br/>At UrlUtils.java:[line 118]<br/>At UrlUtils.java:[line 122]<br/>At UrlUtils.java:[line 126]<br/>At UrlUtils.java:[line 129]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70650');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70650" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy<br/>In method org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy.getAllowFromValue(HttpServletRequest)<br/>At AbstractRequestParameterAllowFromStrategy.java:[line 45]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;<br/>At AbstractRequestParameterAllowFromStrategy.java:[line 43]<br/>At AbstractRequestParameterAllowFromStrategy.java:[line 45]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70979');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70979" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.savedrequest.DefaultSavedRequest<br/>In method org.springframework.security.web.savedrequest.DefaultSavedRequest.propertyEquals(String, Object, Object)<br/>At DefaultSavedRequest.java:[line 364]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 0<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 1<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 2<br/>Method usage with tainted arguments detected<br/>At DefaultSavedRequest.java:[line 220]<br/>At DefaultSavedRequest.java:[line 224]<br/>At DefaultSavedRequest.java:[line 228]<br/>At DefaultSavedRequest.java:[line 242]<br/>At DefaultSavedRequest.java:[line 243]<br/>At DefaultSavedRequest.java:[line 247]<br/>At DefaultSavedRequest.java:[line 251]<br/>At DefaultSavedRequest.java:[line 255]<br/>At DefaultSavedRequest.java:[line 259]<br/>At DefaultSavedRequest.java:[line 364]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71163');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71163" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.savedrequest.DefaultSavedRequest<br/>In method org.springframework.security.web.savedrequest.DefaultSavedRequest.propertyEquals(String, Object, Object)<br/>At DefaultSavedRequest.java:[line 373]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 0<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 1<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 2<br/>Method usage with tainted arguments detected<br/>At DefaultSavedRequest.java:[line 220]<br/>At DefaultSavedRequest.java:[line 224]<br/>At DefaultSavedRequest.java:[line 228]<br/>At DefaultSavedRequest.java:[line 242]<br/>At DefaultSavedRequest.java:[line 243]<br/>At DefaultSavedRequest.java:[line 247]<br/>At DefaultSavedRequest.java:[line 251]<br/>At DefaultSavedRequest.java:[line 255]<br/>At DefaultSavedRequest.java:[line 259]<br/>At DefaultSavedRequest.java:[line 373]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71347');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71347" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.savedrequest.DefaultSavedRequest<br/>In method org.springframework.security.web.savedrequest.DefaultSavedRequest.propertyEquals(String, Object, Object)<br/>At DefaultSavedRequest.java:[line 380]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 0<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 1<br/>Unknown source org/springframework/security/web/savedrequest/DefaultSavedRequest.propertyEquals(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Z parameter 2<br/>Method usage with tainted arguments detected<br/>At DefaultSavedRequest.java:[line 220]<br/>At DefaultSavedRequest.java:[line 224]<br/>At DefaultSavedRequest.java:[line 228]<br/>At DefaultSavedRequest.java:[line 242]<br/>At DefaultSavedRequest.java:[line 243]<br/>At DefaultSavedRequest.java:[line 247]<br/>At DefaultSavedRequest.java:[line 251]<br/>At DefaultSavedRequest.java:[line 255]<br/>At DefaultSavedRequest.java:[line 259]<br/>At DefaultSavedRequest.java:[line 380]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71712');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71712" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.util.matcher.AntPathRequestMatcher<br/>In method org.springframework.security.web.util.matcher.AntPathRequestMatcher.matches(HttpServletRequest)<br/>At AntPathRequestMatcher.java:[line 156]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source org/springframework/security/web/util/matcher/AntPathRequestMatcher.getRequestPath(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Unknown source org/springframework/web/util/UrlPathHelper.getPathWithinApplication(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/matcher/AntPathRequestMatcher.pattern<br/>Unknown source org/springframework/security/web/util/matcher/AntPathRequestMatcher.httpMethod<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>At AntPathRequestMatcher.java:[line 157]<br/>At AntPathRequestMatcher.java:[line 196]<br/>At AntPathRequestMatcher.java:[line 198]<br/>At AntPathRequestMatcher.java:[line 200]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71846');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71846" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.util.matcher.AntPathRequestMatcher<br/>In method org.springframework.security.web.util.matcher.AntPathRequestMatcher.matches(HttpServletRequest)<br/>At AntPathRequestMatcher.java:[line 166]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source org/springframework/security/web/util/matcher/AntPathRequestMatcher.getRequestPath(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Unknown source org/springframework/web/util/UrlPathHelper.getPathWithinApplication(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>At AntPathRequestMatcher.java:[line 166]<br/>At AntPathRequestMatcher.java:[line 196]<br/>At AntPathRequestMatcher.java:[line 198]<br/>At AntPathRequestMatcher.java:[line 200]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71970');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71970" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.util.matcher.AntPathRequestMatcher<br/>In method org.springframework.security.web.util.matcher.AntPathRequestMatcher.matches(HttpServletRequest)<br/>At AntPathRequestMatcher.java:[line 176]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source org/springframework/security/web/util/matcher/AntPathRequestMatcher.getRequestPath(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Unknown source org/springframework/web/util/UrlPathHelper.getPathWithinApplication(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/matcher/AntPathRequestMatcher.pattern<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>At AntPathRequestMatcher.java:[line 173]<br/>At AntPathRequestMatcher.java:[line 176]<br/>At AntPathRequestMatcher.java:[line 196]<br/>At AntPathRequestMatcher.java:[line 198]<br/>At AntPathRequestMatcher.java:[line 200]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72193');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72193" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.springframework.security.web.util.matcher.RegexRequestMatcher<br/>In method org.springframework.security.web.util.matcher.RegexRequestMatcher.matches(HttpServletRequest)<br/>At RegexRequestMatcher.java:[line 109]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/util/matcher/RegexRequestMatcher.pattern<br/>Tainted source javax/servlet/http/HttpServletRequest.getPathInfo()Ljava/lang/String;<br/>At RegexRequestMatcher.java:[line 91]<br/>At RegexRequestMatcher.java:[line 92]<br/>At RegexRequestMatcher.java:[line 93]<br/>At RegexRequestMatcher.java:[line 96]<br/>At RegexRequestMatcher.java:[line 99]<br/>At RegexRequestMatcher.java:[line 103]<br/>At RegexRequestMatcher.java:[line 105]<br/>At RegexRequestMatcher.java:[line 109]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67931');">
<td>
<span class="priority-2">SECHOC</span>
</td>
<td>Cookie without the HttpOnly flag could be read by a malicious script in the browser</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67931" style="display: none;">
<a href="#HTTPONLY_COOKIE">Bug type HTTPONLY_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler<br/>In method org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler.logout(HttpServletRequest, HttpServletResponse, Authentication)<br/>At CookieClearingLogoutHandler.java:[line 44]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68096');">
<td>
<span class="priority-2">SECHOC</span>
</td>
<td>Cookie without the HttpOnly flag could be read by a malicious script in the browser</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68096" style="display: none;">
<a href="#HTTPONLY_COOKIE">Bug type HTTPONLY_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices<br/>In method org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)<br/>At AbstractRememberMeServices.java:[line 364]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68149');">
<td>
<span class="priority-2">SECHOC</span>
</td>
<td>Cookie without the HttpOnly flag could be read by a malicious script in the browser</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68149" style="display: none;">
<a href="#HTTPONLY_COOKIE">Bug type HTTPONLY_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices<br/>In method org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookie(String[], int, HttpServletRequest, HttpServletResponse)<br/>At AbstractRememberMeServices.java:[line 389]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69740');">
<td>
<span class="priority-2">SECHOC</span>
</td>
<td>Cookie without the HttpOnly flag could be read by a malicious script in the browser</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69740" style="display: none;">
<a href="#HTTPONLY_COOKIE">Bug type HTTPONLY_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.csrf.CookieCsrfTokenRepository<br/>In method org.springframework.security.web.csrf.CookieCsrfTokenRepository.saveToken(CsrfToken, HttpServletRequest, HttpServletResponse)<br/>At CookieCsrfTokenRepository.java:[line 75]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70739');">
<td>
<span class="priority-2">SECHOC</span>
</td>
<td>Cookie without the HttpOnly flag could be read by a malicious script in the browser</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70739" style="display: none;">
<a href="#HTTPONLY_COOKIE">Bug type HTTPONLY_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.jackson2.CookieDeserializer<br/>In method org.springframework.security.web.jackson2.CookieDeserializer.deserialize(JsonParser, DeserializationContext)<br/>At CookieDeserializer.java:[line 47]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71531');">
<td>
<span class="priority-2">SECHOC</span>
</td>
<td>Cookie without the HttpOnly flag could be read by a malicious script in the browser</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71531" style="display: none;">
<a href="#HTTPONLY_COOKIE">Bug type HTTPONLY_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.savedrequest.SavedCookie<br/>In method org.springframework.security.web.savedrequest.SavedCookie.getCookie()<br/>At SavedCookie.java:[line 87]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67984');">
<td>
<span class="priority-2">SECIC</span>
</td>
<td>Cookie without the secure flag could be sent in clear text if a HTTP URL is visited</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67984" style="display: none;">
<a href="#INSECURE_COOKIE">Bug type INSECURE_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler<br/>In method org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler.logout(HttpServletRequest, HttpServletResponse, Authentication)<br/>At CookieClearingLogoutHandler.java:[line 44]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68202');">
<td>
<span class="priority-2">SECIC</span>
</td>
<td>Cookie without the secure flag could be sent in clear text if a HTTP URL is visited</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68202" style="display: none;">
<a href="#INSECURE_COOKIE">Bug type INSECURE_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices<br/>In method org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.cancelCookie(HttpServletRequest, HttpServletResponse)<br/>At AbstractRememberMeServices.java:[line 364]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68256');">
<td>
<span class="priority-2">SECIC</span>
</td>
<td>Cookie without the secure flag could be sent in clear text if a HTTP URL is visited</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68256" style="display: none;">
<a href="#INSECURE_COOKIE">Bug type INSECURE_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices<br/>In method org.springframework.security.web.authentication.rememberme.AbstractRememberMeServices.setCookie(String[], int, HttpServletRequest, HttpServletResponse)<br/>At AbstractRememberMeServices.java:[line 389]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69793');">
<td>
<span class="priority-2">SECIC</span>
</td>
<td>Cookie without the secure flag could be sent in clear text if a HTTP URL is visited</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69793" style="display: none;">
<a href="#INSECURE_COOKIE">Bug type INSECURE_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.csrf.CookieCsrfTokenRepository<br/>In method org.springframework.security.web.csrf.CookieCsrfTokenRepository.saveToken(CsrfToken, HttpServletRequest, HttpServletResponse)<br/>At CookieCsrfTokenRepository.java:[line 75]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70792');">
<td>
<span class="priority-2">SECIC</span>
</td>
<td>Cookie without the secure flag could be sent in clear text if a HTTP URL is visited</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70792" style="display: none;">
<a href="#INSECURE_COOKIE">Bug type INSECURE_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.jackson2.CookieDeserializer<br/>In method org.springframework.security.web.jackson2.CookieDeserializer.deserialize(JsonParser, DeserializationContext)<br/>At CookieDeserializer.java:[line 47]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71584');">
<td>
<span class="priority-2">SECIC</span>
</td>
<td>Cookie without the secure flag could be sent in clear text if a HTTP URL is visited</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71584" style="display: none;">
<a href="#INSECURE_COOKIE">Bug type INSECURE_COOKIE (click for details)</a>
<br/>In class org.springframework.security.web.savedrequest.SavedCookie<br/>In method org.springframework.security.web.savedrequest.SavedCookie.getCookie()<br/>At SavedCookie.java:[line 87]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68626');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68626" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices<br/>In method org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices.makeTokenSignature(long, String, String)<br/>At TokenBasedRememberMeServices.java:[line 153]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69336');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69336" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.springframework.security.web.authentication.www.DigestAuthUtils<br/>In method org.springframework.security.web.authentication.www.DigestAuthUtils.md5Hex(String)<br/>At DigestAuthUtils.java:[line 222]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66275');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66275" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.security.web.access.AccessDeniedHandlerImpl<br/>In method org.springframework.security.web.access.AccessDeniedHandlerImpl.handle(HttpServletRequest, HttpServletResponse, AccessDeniedException)<br/>At AccessDeniedHandlerImpl.java:[line 72]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/security/web/access/AccessDeniedHandlerImpl.errorPage<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>At AccessDeniedHandlerImpl.java:[line 71]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67480');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67480" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler<br/>In method org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler.onAuthenticationFailure(HttpServletRequest, HttpServletResponse, AuthenticationException)<br/>At ForwardAuthenticationFailureHandler.java:[line 51]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/security/web/authentication/ForwardAuthenticationFailureHandler.forwardUrl<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>At ForwardAuthenticationFailureHandler.java:[line 51]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67563');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67563" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler<br/>In method org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler.onAuthenticationSuccess(HttpServletRequest, HttpServletResponse, Authentication)<br/>At ForwardAuthenticationSuccessHandler.java:[line 50]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/springframework/security/web/authentication/ForwardAuthenticationSuccessHandler.forwardUrl<br/>At ForwardAuthenticationSuccessHandler.java:[line 50]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67646');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67646" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint<br/>In method org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint.commence(HttpServletRequest, HttpServletResponse, AuthenticationException)<br/>At LoginUrlAuthenticationEntryPoint.java:[line 157]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/security/web/authentication/LoginUrlAuthenticationEntryPoint.determineUrlToUseForThisRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Lorg/springframework/security/core/AuthenticationException;)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/authentication/LoginUrlAuthenticationEntryPoint.loginFormUrl<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/springframework/security/web/authentication/LoginUrlAuthenticationEntryPoint.getLoginFormUrl()Ljava/lang/String;<br/>At LoginUrlAuthenticationEntryPoint.java:[line 127]<br/>At LoginUrlAuthenticationEntryPoint.java:[line 148]<br/>At LoginUrlAuthenticationEntryPoint.java:[line 155]<br/>At LoginUrlAuthenticationEntryPoint.java:[line 256]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67769');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67769" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler<br/>In method org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler.onAuthenticationFailure(HttpServletRequest, HttpServletResponse, AuthenticationException)<br/>At SimpleUrlAuthenticationFailureHandler.java:[line 87]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/security/web/authentication/SimpleUrlAuthenticationFailureHandler.defaultFailureUrl<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>At SimpleUrlAuthenticationFailureHandler.java:[line 86]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70484');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70484" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.security.web.firewall.RequestWrapper$FirewalledRequestAwareRequestDispatcher<br/>In method org.springframework.security.web.firewall.RequestWrapper$FirewalledRequestAwareRequestDispatcher.forward(ServletRequest, ServletResponse)<br/>At RequestWrapper.java:[line 154]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/security/web/firewall/RequestWrapper.access$001(Lorg/springframework/security/web/firewall/RequestWrapper;Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/springframework/security/web/firewall/RequestWrapper$FirewalledRequestAwareRequestDispatcher.getDelegateDispatcher()Ljavax/servlet/RequestDispatcher;<br/>At RequestWrapper.java:[line 154]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70567');">
<td>
<span class="priority-2">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70567" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.springframework.security.web.firewall.RequestWrapper$FirewalledRequestAwareRequestDispatcher<br/>In method org.springframework.security.web.firewall.RequestWrapper$FirewalledRequestAwareRequestDispatcher.include(ServletRequest, ServletResponse)<br/>At RequestWrapper.java:[line 159]<br/>Sink method javax/servlet/RequestDispatcher.include(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/springframework/security/web/firewall/RequestWrapper.access$001(Lorg/springframework/security/web/firewall/RequestWrapper;Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/springframework/security/web/firewall/RequestWrapper$FirewalledRequestAwareRequestDispatcher.getDelegateDispatcher()Ljavax/servlet/RequestDispatcher;<br/>At RequestWrapper.java:[line 159]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68310');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68310" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl<br/>In method org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl.createNewToken(PersistentRememberMeToken)<br/>At JdbcTokenRepositoryImpl.java:[line 67]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/web/authentication/rememberme/JdbcTokenRepositoryImpl.insertTokenSql<br/>At JdbcTokenRepositoryImpl.java:[line 67]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68389');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.queryForObject(Ljava/lang/String;Lorg/springframework/jdbc/core/RowMapper;[Ljava/lang/Object;)Ljava/lang/Object; can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68389" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl<br/>In method org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl.getTokenForSeries(String)<br/>At JdbcTokenRepositoryImpl.java:[line 87]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.queryForObject(Ljava/lang/String;Lorg/springframework/jdbc/core/RowMapper;[Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 2<br/>Unknown source org/springframework/security/web/authentication/rememberme/JdbcTokenRepositoryImpl.tokensBySeriesSql<br/>At JdbcTokenRepositoryImpl.java:[line 87]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68468');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68468" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl<br/>In method org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl.removeUserTokens(String)<br/>At JdbcTokenRepositoryImpl.java:[line 114]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/web/authentication/rememberme/JdbcTokenRepositoryImpl.removeUserTokensSql<br/>At JdbcTokenRepositoryImpl.java:[line 114]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68547');">
<td>
<span class="priority-2">SECSQLISPRJDBC</span>
</td>
<td>This use of org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I can be vulnerable to SQL injection (with Spring JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68547" style="display: none;">
<a href="#SQL_INJECTION_SPRING_JDBC">Bug type SQL_INJECTION_SPRING_JDBC (click for details)</a>
<br/>In class org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl<br/>In method org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl.updateToken(String, String, Date)<br/>At JdbcTokenRepositoryImpl.java:[line 72]<br/>Sink method org/springframework/jdbc/core/JdbcTemplate.update(Ljava/lang/String;[Ljava/lang/Object;)I<br/>Sink parameter 1<br/>Unknown source org/springframework/security/web/authentication/rememberme/JdbcTokenRepositoryImpl.updateTokenSql<br/>At JdbcTokenRepositoryImpl.java:[line 72]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69552');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69552" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.springframework.security.web.authentication.www.DigestAuthenticationFilter<br/>In method org.springframework.security.web.authentication.www.DigestAuthenticationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)<br/>At DigestAuthenticationFilter.java:[line 173]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/authentication/www/DigestAuthenticationFilter$DigestData.response<br/>Unknown source org/springframework/security/web/authentication/www/DigestAuthenticationFilter$DigestData.getResponse()Ljava/lang/String;<br/>At DigestAuthenticationFilter.java:[line 173]<br/>At DigestAuthenticationFilter.java:[line 458]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69646');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69646" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.springframework.security.web.authentication.www.DigestAuthenticationFilter<br/>In method org.springframework.security.web.authentication.www.DigestAuthenticationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)<br/>At DigestAuthenticationFilter.java:[line 198]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/authentication/www/DigestAuthenticationFilter$DigestData.response<br/>Unknown source org/springframework/security/web/authentication/www/DigestAuthenticationFilter$DigestData.getResponse()Ljava/lang/String;<br/>At DigestAuthenticationFilter.java:[line 198]<br/>At DigestAuthenticationFilter.java:[line 458]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70846');">
<td>
<span class="priority-1">SECUJDES</span>
</td>
<td>Unsafe Jackson deserialization configuration used in org.springframework.security.web.jackson2.WebJackson2Module.setupModule(Module$SetupContext) org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper) WebJackson2Module.java:[line 56]</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70846" style="display: none;">
<a href="#JACKSON_UNSAFE_DESERIALIZATION">Bug type JACKSON_UNSAFE_DESERIALIZATION (click for details)</a>
<br/>In class org.springframework.security.web.jackson2.WebJackson2Module<br/>In method org.springframework.security.web.jackson2.WebJackson2Module.setupModule(Module$SetupContext)<br/>Called method org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper)<br/>At WebJackson2Module.java:[line 56]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.springframework.security.web.DefaultRedirectStrategy<br/>In method org.springframework.security.web.DefaultRedirectStrategy.sendRedirect(HttpServletRequest, HttpServletResponse, String)<br/>At DefaultRedirectStrategy.java:[line 57]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/servlet/http/HttpServletResponse.encodeRedirectURL(Ljava/lang/String;)Ljava/lang/String;<br/>At DefaultRedirectStrategy.java:[line 54]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65630');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65630" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.springframework.security.web.DefaultRedirectStrategy<br/>In method org.springframework.security.web.DefaultRedirectStrategy.sendRedirect(HttpServletRequest, HttpServletResponse, String)<br/>At DefaultRedirectStrategy.java:[line 51]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66358');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66358" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.security.web.access.AccessDeniedHandlerImpl<br/>In method org.springframework.security.web.access.AccessDeniedHandlerImpl.handle(HttpServletRequest, HttpServletResponse, AccessDeniedException)<br/>At AccessDeniedHandlerImpl.java:[line 75]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/access/AccessDeniedException.getMessage()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67852');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67852" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler<br/>In method org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler.onAuthenticationFailure(HttpServletRequest, HttpServletResponse, AuthenticationException)<br/>At SimpleUrlAuthenticationFailureHandler.java:[line 77]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/core/AuthenticationException.getMessage()Ljava/lang/String;<br/>At SimpleUrlAuthenticationFailureHandler.java:[line 78]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68773');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.write(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68773" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter<br/>In method org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(ServletRequest, ServletResponse, FilterChain)<br/>At DefaultLoginPageGeneratingFilter.java:[line 172]<br/>Sink method java/io/PrintWriter.write(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.passwordParameter<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.rememberMeParameter<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.generateLoginPageHtml(Ljavax/servlet/http/HttpServletRequest;ZZ)Ljava/lang/String;<br/>Unknown source org/springframework/security/web/csrf/CsrfToken.getToken()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.openIDauthenticationUrl<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.usernameParameter<br/>Unknown source org/springframework/security/web/csrf/CsrfToken.getParameterName()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.openIDrememberMeParameter<br/>Unknown source org/springframework/security/core/AuthenticationException.getMessage()Ljava/lang/String;<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.openIDusernameParameter<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.authenticationUrl<br/>Unknown source org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.renderHiddenInputs(Ljava/lang/StringBuilder;Ljavax/servlet/http/HttpServletRequest;)V parameter 1<br/>At DefaultLoginPageGeneratingFilter.java:[line 168]<br/>At DefaultLoginPageGeneratingFilter.java:[line 199]<br/>At DefaultLoginPageGeneratingFilter.java:[line 200]<br/>At DefaultLoginPageGeneratingFilter.java:[line 204]<br/>At DefaultLoginPageGeneratingFilter.java:[line 205]<br/>At DefaultLoginPageGeneratingFilter.java:[line 206]<br/>At DefaultLoginPageGeneratingFilter.java:[line 210]<br/>At DefaultLoginPageGeneratingFilter.java:[line 214]<br/>At DefaultLoginPageGeneratingFilter.java:[line 215]<br/>At DefaultLoginPageGeneratingFilter.java:[line 216]<br/>At DefaultLoginPageGeneratingFilter.java:[line 217]<br/>At DefaultLoginPageGeneratingFilter.java:[line 218]<br/>At DefaultLoginPageGeneratingFilter.java:[line 219]<br/>At DefaultLoginPageGeneratingFilter.java:[line 220]<br/>At DefaultLoginPageGeneratingFilter.java:[line 221]<br/>At DefaultLoginPageGeneratingFilter.java:[line 224]<br/>At DefaultLoginPageGeneratingFilter.java:[line 225]<br/>At DefaultLoginPageGeneratingFilter.java:[line 226]<br/>At DefaultLoginPageGeneratingFilter.java:[line 229]<br/>At DefaultLoginPageGeneratingFilter.java:[line 231]<br/>At DefaultLoginPageGeneratingFilter.java:[line 232]<br/>At DefaultLoginPageGeneratingFilter.java:[line 236]<br/>At DefaultLoginPageGeneratingFilter.java:[line 237]<br/>At DefaultLoginPageGeneratingFilter.java:[line 238]<br/>At DefaultLoginPageGeneratingFilter.java:[line 239]<br/>At DefaultLoginPageGeneratingFilter.java:[line 240]<br/>At DefaultLoginPageGeneratingFilter.java:[line 241]<br/>At DefaultLoginPageGeneratingFilter.java:[line 244]<br/>At DefaultLoginPageGeneratingFilter.java:[line 245]<br/>At DefaultLoginPageGeneratingFilter.java:[line 246]<br/>At DefaultLoginPageGeneratingFilter.java:[line 249]<br/>At DefaultLoginPageGeneratingFilter.java:[line 250]<br/>At DefaultLoginPageGeneratingFilter.java:[line 252]<br/>At DefaultLoginPageGeneratingFilter.java:[line 255]<br/>At DefaultLoginPageGeneratingFilter.java:[line 257]<br/>At DefaultLoginPageGeneratingFilter.java:[line 264]<br/>At DefaultLoginPageGeneratingFilter.java:[line 265]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69267');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69267" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint<br/>In method org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint.commence(HttpServletRequest, HttpServletResponse, AuthenticationException)<br/>At BasicAuthenticationEntryPoint.java:[line 60]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/core/AuthenticationException.getMessage()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69394');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69394" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint<br/>In method org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint.commence(HttpServletRequest, HttpServletResponse, AuthenticationException)<br/>At DigestAuthenticationEntryPoint.java:[line 112]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/core/AuthenticationException.getMessage()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71638');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponseWrapper.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71638" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.springframework.security.web.util.OnCommittedResponseWrapper<br/>In method org.springframework.security.web.util.OnCommittedResponseWrapper.sendError(int, String)<br/>At OnCommittedResponseWrapper.java:[line 119]<br/>Sink method javax/servlet/http/HttpServletResponseWrapper.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/util/OnCommittedResponseWrapper.sendError(ILjava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68038');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68038" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever<br/>In method org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever.getDocument(InputStream)<br/>At WebXmlMappableAttributesRetriever.java:[line 114]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67014');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67014" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource<br/>In method org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.processMap(LinkedHashMap, ExpressionParser)<br/>At ExpressionBasedFilterInvocationSecurityMetadataSource.java:[line 81]<br/>Sink method org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Unknown source org/springframework/security/web/access/expression/ExpressionBasedFilterInvocationSecurityMetadataSource.processMap(Ljava/util/LinkedHashMap;Lorg/springframework/expression/ExpressionParser;)Ljava/util/LinkedHashMap; parameter 1<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/springframework/security/access/ConfigAttribute.getAttribute()Ljava/lang/String;<br/>Unknown source java/util/LinkedHashMap.entrySet()Ljava/util/Set;<br/>Method usage not detected<br/>At ExpressionBasedFilterInvocationSecurityMetadataSource.java:[line 53]<br/>At ExpressionBasedFilterInvocationSecurityMetadataSource.java:[line 66]<br/>At ExpressionBasedFilterInvocationSecurityMetadataSource.java:[line 67]<br/>At ExpressionBasedFilterInvocationSecurityMetadataSource.java:[line 68]<br/>At ExpressionBasedFilterInvocationSecurityMetadataSource.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70910');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70910" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver<br/>In method org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver.resolveArgument(MethodParameter, ModelAndViewContainer, NativeWebRequest, WebDataBinderFactory)<br/>At AuthenticationPrincipalArgumentResolver.java:[line 133]<br/>Sink method org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/security/core/annotation/AuthenticationPrincipal.expression()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72109');">
<td>
<span class="priority-2">SPELI</span>
</td>
<td>This use of org/springframework/expression/spel/standard/SpelExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72109" style="display: none;">
<a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
<br/>In class org.springframework.security.web.util.matcher.ELRequestMatcher<br/>In method new org.springframework.security.web.util.matcher.ELRequestMatcher(String)<br/>At ELRequestMatcher.java:[line 50]<br/>Sink method org/springframework/expression/spel/standard/SpelExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/security/web/util/matcher/ELRequestMatcher.&lt;init&gt;(Ljava/lang/String;)V parameter 0<br/>Method usage not detected<br/>At RequestMatcherEditor.java:[line 36]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="HTTPONLY_COOKIE">HTTPONLY_COOKIE: Cookie without the HttpOnly flag</a>
</h2>
            
<p>
A new cookie is created without the <code>HttpOnly</code> flag set.
The <code>HttpOnly</code> flag is a directive to the browser to make sure that the cookie can not be red by
malicious script. When a user is the target of a "Cross-Site Scripting", the attacker would benefit greatly from getting
the session id for example.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
Cookie cookie = new Cookie("email",userName);
response.addCookie(cookie);
</pre>
</p>

<p>
<b>Solution (Specific configuration):</b><br/>
<pre>
Cookie cookie = new Cookie("email",userName);
cookie.setSecure(true);
cookie.setHttpOnly(true); //HttpOnly flag
</pre>
</p>

<p>
<b>Solution (Servlet 3.0 configuration):</b><br/>
<pre>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0"&gt;
[...]
&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;http-only&gt;true&lt;/http-only&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;
&lt;/web-app&gt;
</pre>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="https://blog.codinghorror.com/protecting-your-cookies-httponly/">Coding Horror blog: Protecting Your Cookies: HttpOnly</a><br/>
<a href="https://www.owasp.org/index.php/HttpOnly">OWASP: HttpOnly</a><br/>
<a href="https://www.rapid7.com/db/vulnerabilities/http-cookie-http-only-flag">Rapid7: Missing HttpOnly Flag From Cookie</a>
</p>

        
<h2>
<a name="INSECURE_COOKIE">INSECURE_COOKIE: Cookie without the secure flag</a>
</h2>
            
<p>
A new cookie is created without the <code>Secure</code> flag set.
The <code>Secure</code> flag is a directive to the browser to make sure that the cookie is not sent for insecure
communication (<code>http://</code>).
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
Cookie cookie = new Cookie("userName",userName);
response.addCookie(cookie);
</pre>
</p>

<p>
<b>Solution (Specific configuration):</b><br/>
<pre>
Cookie cookie = new Cookie("userName",userName);
cookie.setSecure(true); // Secure flag
cookie.setHttpOnly(true);
</pre>
</p>

<p>
<b>Solution (Servlet 3.0 configuration):</b><br/>
<pre>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0"&gt;
[...]
&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;http-only&gt;true&lt;/http-only&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;
&lt;/web-app&gt;
</pre>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="https://cwe.mitre.org/data/definitions/614.html">CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a><br/>
<a href="https://cwe.mitre.org/data/definitions/315.html">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a><br/>
<a href="https://cwe.mitre.org/data/definitions/311.html">CWE-311: Missing Encryption of Sensitive Data</a><br/>
<a href="https://www.owasp.org/index.php/SecureFlag">OWASP: Secure Flag</a><br/>
<a href="https://www.rapid7.com/db/vulnerabilities/http-cookie-secure-flag">Rapid7: Missing Secure Flag From SSL Cookie</a>
</p>

        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="REQUESTDISPATCHER_FILE_DISCLOSURE">REQUESTDISPATCHER_FILE_DISCLOSURE: RequestDispatcher File Disclosure</a>
</h2>
            
<p>
Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>
An attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting <code>"http://example.com/?jspFile=../applicationContext.xml%3F"</code> would display the application's <code>applicationContext.xml</code> file. The attacker would be able to locate and download the <code>applicationContext.xml</code> referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>...
String jspFile = request.getParameter("jspFile");
request.getRequestDispatcher("/WEB-INF/jsps/" + jspFile + ".jsp").include(request, response);
...</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid constructing server-side redirects using user controlled input.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/552.html">CWE-552: Files or Directories Accessible to External Parties</a><br/>
</p>
            
        
<h2>
<a name="SQL_INJECTION_SPRING_JDBC">SQL_INJECTION_SPRING_JDBC: Potential JDBC Injection (Spring JDBC)</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>JdbcTemplate jdbc = new JdbcTemplate();
int count = jdbc.queryForObject("select count(*) from Users where name = '"+paramName+"'", Integer.class);
</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>JdbcTemplate jdbc = new JdbcTemplate();
int count = jdbc.queryForObject("select count(*) from Users where name = ?", Integer.class, paramName);</pre>
</p>
<br/>

<b>References (Spring JDBC)</b><br/>
<a href="https://spring.io/guides/gs/relational-data-access/">Spring Official Documentation: Data access with JDBC</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        
<h2>
<a name="JACKSON_UNSAFE_DESERIALIZATION">JACKSON_UNSAFE_DESERIALIZATION: Unsafe Jackson deserialization configuration</a>
</h2>
            
<p>When the Jackson databind library is used incorrectly the deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows the trigger of malicious operation.

<p>
<b>Solutions:</b><br/>
<p>
Explicitly define what types and subtypes you want to be available when using polymorphism through JsonTypeInfo.Id.NAME.
Also, never call <code>ObjectMapper.enableDefaultTyping</code> (and then <code>readValue</code> a type that holds a Object or Serializable or Comparable or a known deserialization type).
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public class Example {
    static class ABean {
        public int id;
        public Object obj;
    }

    static class AnotherBean {
        @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS) // or JsonTypeInfo.Id.MINIMAL_CLASS
        public Object obj;
    }

    public void example(String json) throws JsonMappingException {
         ObjectMapper mapper = new ObjectMapper();
         mapper.enableDefaultTyping();
         mapper.readValue(json, ABean.class);
    }

    public void exampleTwo(String json) throws JsonMappingException {
         ObjectMapper mapper = new ObjectMapper();
         mapper.readValue(json, AnotherBean.class);
    }

}
</pre>
</p>

<p>
<b>References</b><br/>
<a href="https://github.com/FasterXML/jackson-databind/issues/1599">Jackson Deserializer security vulnerability</a><br>
<a href="https://github.com/mbechler/marshalsec">Java Unmarshaller Security - Turning your data into code execution</a><br>
</p>

        
<h2>
<a name="UNVALIDATED_REDIRECT">UNVALIDATED_REDIRECT: Unvalidated Redirect</a>
</h2>
            
<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>
            
        
<h2>
<a name="URL_REWRITING">URL_REWRITING: URL rewriting method</a>
</h2>
            
<p>
The implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL.<br/>
URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties. Session ID in the URL can be disclosed in many ways, for example:<br/>
<ul>
    <li>Log files,</li>
    <li>The browser history,</li>
    <li>By copy-and-pasting it into an e-mail or posting,</li>
    <li>The HTTP Referrer.</li>
</ul>
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>out.println("Click &lt;a href=" +
                res.encodeURL(HttpUtils.getRequestURL(req).toString()) +
                "&gt;here&lt;/a&gt;");</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid using those methods. If you are looking to encode a URL String or form parameters do not confuse the URL rewriting methods with the URLEncoder class.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management">OWASP Top 10 2010-A3-Broken Authentication and Session Management</a><br/>
</p>
            
        
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        
<h2>
<a name="XXE_DOCUMENT">XXE_DOCUMENT: XML parsing vulnerable to XXE (DocumentBuilder)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces2-j/features.html">Xerces2 complete features list</a>
</p>

        
<h2>
<a name="SPEL_INJECTION">SPEL_INJECTION: Potential code injection when using Spring Expression</a>
</h2>
            
<p>
    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>
public void parseExpressionInterface(Person personObj,String property) {

        ExpressionParser parser = new SpelExpressionParser();

        //Unsafe if the input is control by the user..
        Expression exp = parser.parseExpression(property+" == 'Albert'");

        StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);
        boolean result = exp.getValue(testContext, Boolean.class);
[...]</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
    <a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html">Spring Expression Language (SpEL) - Official Documentation</a><br/>
    <a href="https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf">Minded Security: Expression Language Injection</a><br/>
    <a href="https://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>
    <a href="https://gosecure.net/2018/05/15/beware-of-the-magic-spell-part-1-cve-2018-1273/">Spring Data-Commons: (CVE-2018-1273)</a><br/>
    <a href="https://gosecure.net/2018/05/17/beware-of-the-magic-spell-part-2-cve-2018-1260/">Spring OAuth2: CVE-2018-1260</a>
</p>


        </body>
</html>
