<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/nifi.git/solr-solrj-6.6.6.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>31639 lines of code analyzed,
	in 719 classes, 
	in 24 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">2</td>
<td align="right">0.06</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">41</td>
<td align="right">1.30</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>43</b>
</td>
<td align="right">
<b>1.36</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">43</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>43</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67290');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67290" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.solr.common.SolrException<br/>In method org.apache.solr.common.SolrException.toStr(Throwable)<br/>At SolrException.java:[line 179]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66276');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66276" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.PreemptiveBasicAuthConfigurer<br/>In method org.apache.solr.client.solrj.impl.PreemptiveBasicAuthConfigurer.&lt;static initializer for PreemptiveBasicAuthConfigurer&gt;()<br/>At PreemptiveBasicAuthConfigurer.java:[line 73]<br/>Sink method java/util/Properties.setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;<br/>Sink parameter 0<br/>Unknown source org/apache/solr/common/util/StrUtils.splitSmart(Ljava/lang/String;CLjava/util/List;)V parameter 0<br/>Unknown source org/apache/solr/common/util/StrUtils.splitSmart(Ljava/lang/String;CLjava/util/List;)V parameter 2<br/>Unknown source org/apache/solr/common/util/StrUtils.splitSmart(Ljava/lang/String;C)Ljava/util/List; parameter 1<br/>At StrUtils.java:[line 66]<br/>At StrUtils.java:[line 71]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65953');">
<td>
<span class="priority-2">SECHPP</span>
</td>
<td>Concatenating user-controlled input into a URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65953" style="display: none;">
<a href="#HTTP_PARAMETER_POLLUTION">Bug type HTTP_PARAMETER_POLLUTION (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.HttpSolrClient<br/>In method org.apache.solr.client.solrj.impl.HttpSolrClient.createMethod(SolrRequest, String)<br/>At HttpSolrClient.java:[line 380]<br/>Sink method org/apache/http/client/methods/HttpGet.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/solr/client/solrj/impl/HttpSolrClient.createMethod(Lorg/apache/solr/client/solrj/SolrRequest;Ljava/lang/String;)Lorg/apache/http/client/methods/HttpRequestBase; parameter 0<br/>Unknown source org/apache/solr/common/params/SolrParams.getParameterNamesIterator()Ljava/util/Iterator;<br/>Unknown source java/net/URLEncoder.encode(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/solr/client/solrj/SolrRequest.path<br/>Unknown source org/apache/solr/client/solrj/SolrRequest.getPath()Ljava/lang/String;<br/>Unknown source org/apache/solr/common/params/SolrParams.getParams(Ljava/lang/String;)[Ljava/lang/String;<br/>Unknown source org/apache/solr/client/solrj/impl/HttpSolrClient.baseUrl<br/>Unknown source org/apache/solr/common/params/ModifiableSolrParams.toQueryString()Ljava/lang/String;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/apache/solr/client/solrj/request/RequestWriter.getPath(Lorg/apache/solr/client/solrj/SolrRequest;)Ljava/lang/String;<br/>At SolrRequest.java:[line 94]<br/>At ConcurrentUpdateSolrClient.java:[line 419]<br/>At ConcurrentUpdateSolrClient.java:[line 430]<br/>At ConcurrentUpdateSolrClient.java:[line 436]<br/>At ConcurrentUpdateSolrClient.java:[line 447]<br/>At DelegationTokenHttpSolrClient.java:[line 89]<br/>At HttpSolrClient.java:[line 268]<br/>At HttpSolrClient.java:[line 272]<br/>At HttpSolrClient.java:[line 277]<br/>At HttpSolrClient.java:[line 315]<br/>At HttpSolrClient.java:[line 351]<br/>At HttpSolrClient.java:[line 372]<br/>At HttpSolrClient.java:[line 374]<br/>At HttpSolrClient.java:[line 380]<br/>At LBHttpSolrClient.java:[line 447]<br/>At LBHttpSolrClient.java:[line 591]<br/>At LBHttpSolrClient.java:[line 617]<br/>At RequestWriter.java:[line 62]<br/>At SolrParams.java:[line 489]<br/>At SolrParams.java:[line 491]<br/>At SolrParams.java:[line 495]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.apache.solr.client.solrj.SolrResponse.deserialize(byte[])</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.apache.solr.client.solrj.SolrResponse<br/>In method org.apache.solr.client.solrj.SolrResponse.deserialize(byte[])<br/>At SolrResponse.java:[line 59]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65605');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65605" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.CloudSolrClient<br/>In method new org.apache.solr.client.solrj.impl.CloudSolrClient(String)<br/>At CloudSolrClient.java:[line 112]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65663');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65663" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.CloudSolrClient<br/>In method new org.apache.solr.client.solrj.impl.CloudSolrClient(String, HttpClient)<br/>At CloudSolrClient.java:[line 112]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65721');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65721" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.CloudSolrClient<br/>In method new org.apache.solr.client.solrj.impl.CloudSolrClient(String, LBHttpSolrClient, boolean)<br/>At CloudSolrClient.java:[line 112]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65779');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65779" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.CloudSolrClient<br/>In method new org.apache.solr.client.solrj.impl.CloudSolrClient(String, boolean, HttpClient)<br/>At CloudSolrClient.java:[line 112]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65837');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65837" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.CloudSolrClient<br/>In method new org.apache.solr.client.solrj.impl.CloudSolrClient(Collection, String, List, HttpClient, LBHttpSolrClient, LBHttpSolrClient$Builder, boolean, boolean, ClusterStateProvider)<br/>At CloudSolrClient.java:[line 112]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65895');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65895" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.CloudSolrClient<br/>In method new org.apache.solr.client.solrj.impl.CloudSolrClient(Collection, String, HttpClient)<br/>At CloudSolrClient.java:[line 112]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66863');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66863" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.sql.StatementImpl<br/>In method org.apache.solr.client.solrj.io.sql.StatementImpl.constructStream(String)<br/>At StatementImpl.java:[line 91]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66921');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66921" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.stream.FeaturesSelectionStream<br/>In method org.apache.solr.client.solrj.io.stream.FeaturesSelectionStream.getShardUrls()<br/>At FeaturesSelectionStream.java:[line 274]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67058');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67058" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.stream.RandomStream<br/>In method org.apache.solr.client.solrj.io.stream.RandomStream.open()<br/>At RandomStream.java:[line 184]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67116');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67116" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.stream.TextLogitStream<br/>In method org.apache.solr.client.solrj.io.stream.TextLogitStream.getShardUrls()<br/>At TextLogitStream.java:[line 356]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67174');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67174" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.stream.TopicStream<br/>In method org.apache.solr.client.solrj.io.stream.TopicStream.constructStreams()<br/>At TopicStream.java:[line 536]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67232');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67232" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.stream.TupleStream<br/>In method org.apache.solr.client.solrj.io.stream.TupleStream.getShards(String, String, StreamContext)<br/>At TupleStream.java:[line 151]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67460');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67460" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 195]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67534');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67534" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 197]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67608');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67608" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 201]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67682');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67682" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 203]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67756');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67756" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 207]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 0<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67830');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67830" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 209]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 0<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67904');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67904" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 215]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67978');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67978" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 216]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68052');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68052" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkConfigManager<br/>In method org.apache.solr.common.cloud.ZkConfigManager.getConfigsetPath(String, String)<br/>At ZkConfigManager.java:[line 217]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 0<br/>Unknown source org/apache/solr/common/cloud/ZkConfigManager.getConfigsetPath(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68126');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68126" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkMaintenanceUtils<br/>In method org.apache.solr.common.cloud.ZkMaintenanceUtils.uploadToZK(SolrZkClient, Path, String, Pattern)<br/>At ZkMaintenanceUtils.java:[line 256]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.uploadToZK(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/nio/file/Path;Ljava/lang/String;Ljava/util/regex/Pattern;)V parameter 2<br/>Unknown source java/nio/file/Path.toString()Ljava/lang/String;<br/>At ZkMaintenanceUtils.java:[line 136]<br/>At ZkMaintenanceUtils.java:[line 251]<br/>At ZkMaintenanceUtils.java:[line 253]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68230');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68230" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkMaintenanceUtils<br/>In method org.apache.solr.common.cloud.ZkMaintenanceUtils.zkTransfer(SolrZkClient, String, Boolean, String, Boolean, Boolean)<br/>At ZkMaintenanceUtils.java:[line 118]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 4<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68304');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68304" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkMaintenanceUtils<br/>In method org.apache.solr.common.cloud.ZkMaintenanceUtils.zkTransfer(SolrZkClient, String, Boolean, String, Boolean, Boolean)<br/>At ZkMaintenanceUtils.java:[line 119]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 4<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68378');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68378" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkMaintenanceUtils<br/>In method org.apache.solr.common.cloud.ZkMaintenanceUtils.zkTransfer(SolrZkClient, String, Boolean, String, Boolean, Boolean)<br/>At ZkMaintenanceUtils.java:[line 136]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 4<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68452');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68452" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkMaintenanceUtils<br/>In method org.apache.solr.common.cloud.ZkMaintenanceUtils.zkTransfer(SolrZkClient, String, Boolean, String, Boolean, Boolean)<br/>At ZkMaintenanceUtils.java:[line 144]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source java/nio/file/Path.toAbsolutePath()Ljava/nio/file/Path;<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String;<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String; parameter 3<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String; parameter 2<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 4<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 2<br/>Unknown source java/nio/file/Path.toString()Ljava/lang/String;<br/>Method usage not detected<br/>At ZkMaintenanceUtils.java:[line 126]<br/>At ZkMaintenanceUtils.java:[line 165]<br/>At ZkMaintenanceUtils.java:[line 174]<br/>At ZkMaintenanceUtils.java:[line 176]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68596');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68596" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkMaintenanceUtils<br/>In method org.apache.solr.common.cloud.ZkMaintenanceUtils.zkTransfer(SolrZkClient, String, Boolean, String, Boolean, Boolean)<br/>At ZkMaintenanceUtils.java:[line 149]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source java/nio/file/Path.toAbsolutePath()Ljava/nio/file/Path;<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String;<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String; parameter 3<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String; parameter 2<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 4<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 2<br/>Unknown source java/nio/file/Path.toString()Ljava/lang/String;<br/>Method usage not detected<br/>At ZkMaintenanceUtils.java:[line 126]<br/>At ZkMaintenanceUtils.java:[line 165]<br/>At ZkMaintenanceUtils.java:[line 174]<br/>At ZkMaintenanceUtils.java:[line 176]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68740');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68740" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.solr.common.cloud.ZkMaintenanceUtils<br/>In method org.apache.solr.common.cloud.ZkMaintenanceUtils.zkTransfer(SolrZkClient, String, Boolean, String, Boolean, Boolean)<br/>At ZkMaintenanceUtils.java:[line 154]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source java/nio/file/Path.toAbsolutePath()Ljava/nio/file/Path;<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String;<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String; parameter 3<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.normalizeDest(Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/lang/String; parameter 2<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 4<br/>Unknown source org/apache/solr/common/cloud/ZkMaintenanceUtils.zkTransfer(Lorg/apache/solr/common/cloud/SolrZkClient;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;)V parameter 2<br/>Unknown source java/nio/file/Path.toString()Ljava/lang/String;<br/>Method usage not detected<br/>At ZkMaintenanceUtils.java:[line 126]<br/>At ZkMaintenanceUtils.java:[line 150]<br/>At ZkMaintenanceUtils.java:[line 151]<br/>At ZkMaintenanceUtils.java:[line 165]<br/>At ZkMaintenanceUtils.java:[line 174]<br/>At ZkMaintenanceUtils.java:[line 176]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66483');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66483" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.sql.DatabaseMetaDataImpl<br/>In method org.apache.solr.client.solrj.io.sql.DatabaseMetaDataImpl.getTables(String, String, String, String[])<br/>At DatabaseMetaDataImpl.java:[line 718]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl.getTables(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet; parameter 1<br/>Unknown source org/apache/solr/client/solrj/io/sql/DatabaseMetaDataImpl.getTables(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet; parameter 2<br/>Method usage not detected<br/>At DatabaseMetaDataImpl.java:[line 718]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66626');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/solr/client/solrj/io/sql/StatementImpl.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66626" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.sql.PreparedStatementImpl<br/>In method org.apache.solr.client.solrj.io.sql.PreparedStatementImpl.execute()<br/>At PreparedStatementImpl.java:[line 60]<br/>Sink method org/apache/solr/client/solrj/io/sql/StatementImpl.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/solr/client/solrj/io/sql/PreparedStatementImpl.sql<br/>At PreparedStatementImpl.java:[line 60]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66705');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/solr/client/solrj/io/sql/StatementImpl.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66705" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.sql.PreparedStatementImpl<br/>In method org.apache.solr.client.solrj.io.sql.PreparedStatementImpl.executeQuery()<br/>At PreparedStatementImpl.java:[line 50]<br/>Sink method org/apache/solr/client/solrj/io/sql/StatementImpl.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/apache/solr/client/solrj/io/sql/PreparedStatementImpl.sql<br/>At PreparedStatementImpl.java:[line 50]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66784');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/solr/client/solrj/io/sql/StatementImpl.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66784" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.sql.PreparedStatementImpl<br/>In method org.apache.solr.client.solrj.io.sql.PreparedStatementImpl.executeUpdate()<br/>At PreparedStatementImpl.java:[line 55]<br/>Sink method org/apache/solr/client/solrj/io/sql/StatementImpl.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/apache/solr/client/solrj/io/sql/PreparedStatementImpl.sql<br/>At PreparedStatementImpl.java:[line 55]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66979');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66979" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.stream.JDBCStream<br/>In method org.apache.solr.client.solrj.io.stream.JDBCStream.open()<br/>At JDBCStream.java:[line 214]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/apache/solr/client/solrj/io/stream/JDBCStream.sqlQuery<br/>At JDBCStream.java:[line 214]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68904');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68904" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.solr.common.util.ContentStreamBase$URLStream<br/>In method org.apache.solr.common.util.ContentStreamBase$URLStream.getStream()<br/>At ContentStreamBase.java:[line 82]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/apache/solr/common/util/ContentStreamBase$URLStream.url<br/>At ContentStreamBase.java:[line 82]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66375');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66375" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.XMLResponseParser<br/>In method org.apache.solr.client.solrj.impl.XMLResponseParser.processResponse(InputStream, String)<br/>At XMLResponseParser.java:[line 108]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66429');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66429" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.solr.client.solrj.impl.XMLResponseParser<br/>In method org.apache.solr.client.solrj.impl.XMLResponseParser.processResponse(Reader)<br/>At XMLResponseParser.java:[line 95]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67344');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67344" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.solr.common.cloud.SolrZkClient<br/>In method org.apache.solr.common.cloud.SolrZkClient.prettyPrint(String, int)<br/>At SolrZkClient.java:[line 660]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67402');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67402" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.solr.common.cloud.SolrZkClient<br/>In method org.apache.solr.common.cloud.SolrZkClient.prettyPrint(String, int)<br/>At SolrZkClient.java:[line 660]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66572');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.apache.solr.client.solrj.io.sql.DatabaseMetaDataImpl.getTables(String, String, String, String[]) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66572" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.apache.solr.client.solrj.io.sql.DatabaseMetaDataImpl<br/>In method org.apache.solr.client.solrj.io.sql.DatabaseMetaDataImpl.getTables(String, String, String, String[])<br/>At DatabaseMetaDataImpl.java:[line 718]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="HARD_CODE_PASSWORD">HARD_CODE_PASSWORD: Hard coded password</a>
</h2>
            
<p>
Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>private String SECRET_PASSWORD = "letMeIn!";

Properties props = new Properties();
props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/259.html">CWE-259: Use of Hard-coded Password</a>
</p>

        
<h2>
<a name="HTTP_PARAMETER_POLLUTION">HTTP_PARAMETER_POLLUTION: HTTP Parameter Pollution</a>
</h2>
            
<p>
Concatenating unvalidated user input into a URL can allow an attacker to override the value of a request parameter. Attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user may compromise the logic of the application to perform either client-side or server-side attacks.<br/>
In the following example the programmer has not considered the possibility that an attacker could provide a parameter <code>lang</code> such as <code>en&user_id=1</code>, which would enable him to change the <code>user_id</code> at will.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>String lang = request.getParameter("lang");
GetMethod get = new GetMethod("http://www.host.com");
get.setQueryString("lang=" + lang + "&user_id=" + user_id);
get.execute();</pre>
<p>
    <b>Solution:</b><br/>
Sanitize user input before using it in HTTP parameters.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://capec.mitre.org/data/definitions/460.html">CAPEC-460: HTTP Parameter Pollution (HPP)</a>
</p>
            
        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="XXE_XMLSTREAMREADER">XXE_XMLSTREAMREADER: XML parsing vulnerable to XXE (XMLStreamReader)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution disabling External Entities:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://openjdk.java.net/jeps/185">JEP 185: Restrict Fetching of External XML Resources</a>
</p>

        
<h2>
<a name="XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY: XML parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY: XSLT parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XSLT External Entity (XXE) attacks can occur when an XSLT parser supports external entities while processing XSLT received
from an untrusted source.</p>
<p><b>Risk: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
   &lt;xsl:template match=&quot;/&quot;&gt;
       &lt;xsl:value-of select=&quot;document(&apos;/etc/passwd&apos;)&quot;&gt;
   &lt;/xsl:value-of&gt;&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>
<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE: Nonconstant string passed to execute or addBatch method on an SQL statement</a>
</h2>

  <p>The method invokes the execute or addBatch method on an SQL statement with a String that seems
to be dynamically generated. Consider using
a prepared statement instead. It is more efficient and less vulnerable to
SQL injection attacks.
</p>

    </body>
</html>
