[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 501.7 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 4 analysis seeds within 0 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 5
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.2

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 6
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 6
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 6
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 6
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: $r7
		Type: javax.net.ssl.TrustManager[]
		Statement: $r7 = virtualinvoke r61.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.apache.nifi.remote.client.SiteToSiteClient$StandardSiteToSiteClientConfig: javax.net.ssl.SSLContext getSslContext()>
		SHA-256: e3bebad548492d9761aaf1f50f0719197b7b2705c0e3747176b194c32018946c
		Secure: false
	Object:
		Variable: r61
		Type: javax.net.ssl.TrustManagerFactory
		Statement: r61 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r60)
		Method: <org.apache.nifi.remote.client.SiteToSiteClient$StandardSiteToSiteClientConfig: javax.net.ssl.SSLContext getSslContext()>
		SHA-256: d812c77fc099ac75711ad90d4f904a40b31c43e16a35a8b8df81b14c4564f6f0
		Secure: false
	Object:
		Variable: r63
		Type: javax.net.ssl.SSLContext
		Statement: r63 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer213)
		Method: <org.apache.nifi.remote.client.SiteToSiteClient$StandardSiteToSiteClientConfig: javax.net.ssl.SSLContext getSslContext()>
		SHA-256: 2869bce1635ad0f869ffa740dfa0dd175716896a65520f2d8cace0aa2e9cbe4a
		Secure: false
	Object:
		Variable: r50
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r50 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r49)
		Method: <org.apache.nifi.remote.client.SiteToSiteClient$StandardSiteToSiteClientConfig: javax.net.ssl.SSLContext getSslContext()>
		SHA-256: 18c6744a7bc49318cba5a1fed0df5cb200bc7301554de1bdba9dbffcb0d03764
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.SecureRandom
		Statement: specialinvoke $r8.<java.security.SecureRandom: void <init>()>()
		Method: <org.apache.nifi.remote.client.SiteToSiteClient$StandardSiteToSiteClientConfig: javax.net.ssl.SSLContext getSslContext()>
		SHA-256: c8d27af9c0e64445c24a52b6830721223469affdd6910828aeefffcfdd5bdb52
		Secure: true
	Object:
		Variable: $r6
		Type: javax.net.ssl.KeyManager[]
		Statement: $r6 = virtualinvoke r50.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.apache.nifi.remote.client.SiteToSiteClient$StandardSiteToSiteClientConfig: javax.net.ssl.SSLContext getSslContext()>
		SHA-256: 29f36ad5038eab65c82ac301d9cf06e639aac0518311d36af53a821e923f6a54
		Secure: false

Findings in Java Class: org.apache.nifi.remote.client.SiteToSiteClient$StandardSiteToSiteClientConfig

	 in Method: javax.net.ssl.SSLContext getSslContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #2869bce1635ad0f869ffa740dfa0dd175716896a65520f2d8cace0aa2e9cbe4a)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: r63 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer213)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r63.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r6, $r7, $r8)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r50.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r43, $r52)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r61.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r55)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #18c6744a7bc49318cba5a1fed0df5cb200bc7301554de1bdba9dbffcb0d03764)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r50.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r43, $r52)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r63.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r6, $r7, $r8)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 6

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 1
	NeverTypeOfError: 1
	RequiredPredicateError: 4
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 1 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 3.400 s

