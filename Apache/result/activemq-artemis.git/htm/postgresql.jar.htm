<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/activemq-artemis.git/postgresql.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>17012 lines of code analyzed,
	in 210 classes, 
	in 23 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">21</td>
<td align="right">1.23</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">50</td>
<td align="right">2.94</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>71</b>
</td>
<td align="right">
<b>4.17</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">71</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>71</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.postgresql.core.Logger<br/>In method org.postgresql.core.Logger.log(String, Throwable)<br/>At Logger.java:[line 93]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69970');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69970" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_cs<br/>In method org.postgresql.translation.messages_cs.&lt;static initializer for messages_cs&gt;()<br/>At messages_cs.java:[line 18]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70034');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70034" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_de<br/>In method org.postgresql.translation.messages_de.&lt;static initializer for messages_de&gt;()<br/>At messages_de.java:[line 31]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70098');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70098" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_es<br/>In method org.postgresql.translation.messages_es.&lt;static initializer for messages_es&gt;()<br/>At messages_es.java:[line 18]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70162');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70162" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_fr<br/>In method org.postgresql.translation.messages_fr.&lt;static initializer for messages_fr&gt;()<br/>At messages_fr.java:[line 30]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70226');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70226" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_it<br/>In method org.postgresql.translation.messages_it.&lt;static initializer for messages_it&gt;()<br/>At messages_it.java:[line 28]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70290');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70290" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_pl<br/>In method org.postgresql.translation.messages_pl.&lt;static initializer for messages_pl&gt;()<br/>At messages_pl.java:[line 19]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70354');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70354" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_pt_BR<br/>In method org.postgresql.translation.messages_pt_BR.&lt;static initializer for messages_pt_BR&gt;()<br/>At messages_pt_BR.java:[line 30]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70418');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70418" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_ru<br/>In method org.postgresql.translation.messages_ru.&lt;static initializer for messages_ru&gt;()<br/>At messages_ru.java:[line 16]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70482');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70482" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_sr<br/>In method org.postgresql.translation.messages_sr.&lt;static initializer for messages_sr&gt;()<br/>At messages_sr.java:[line 30]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70546');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70546" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_tr<br/>In method org.postgresql.translation.messages_tr.&lt;static initializer for messages_tr&gt;()<br/>At messages_tr.java:[line 30]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70610');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70610" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_zh_CN<br/>In method org.postgresql.translation.messages_zh_CN.&lt;static initializer for messages_zh_CN&gt;()<br/>At messages_zh_CN.java:[line 21]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70674');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70674" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.postgresql.translation.messages_zh_TW<br/>In method org.postgresql.translation.messages_zh_TW.&lt;static initializer for messages_zh_TW&gt;()<br/>At messages_zh_TW.java:[line 21]<br/>Sink method java/util/Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70738');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70738" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.postgresql.util.MD5Digest<br/>In method org.postgresql.util.MD5Digest.encode(byte[], byte[], byte[])<br/>At MD5Digest.java:[line 46]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65663');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65663" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 484]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65717');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65717" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 485]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65771');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65771" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 486]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65825');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65825" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 487]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65879');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65879" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 494]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65933');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65933" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 496]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65987');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc2/AbstractJdbc2Connection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65987" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2Connection<br/>In method org.postgresql.jdbc2.AbstractJdbc2Connection.prepareCall(String)<br/>At AbstractJdbc2Connection.java:[line 205]<br/>Sink method org/postgresql/jdbc2/AbstractJdbc2Connection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement;<br/>Sink parameter 2<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2Connection.prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66061');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc2/AbstractJdbc2Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66061" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2Connection<br/>In method org.postgresql.jdbc2.AbstractJdbc2Connection.prepareStatement(String)<br/>At AbstractJdbc2Connection.java:[line 198]<br/>Sink method org/postgresql/jdbc2/AbstractJdbc2Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;<br/>Sink parameter 2<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>Method usage not detected<br/>At AbstractJdbc3Connection.java:[line 363]<br/>At AbstractJdbc3Connection.java:[line 365]<br/>At AbstractJdbc3Connection.java:[line 417]<br/>At AbstractJdbc3Connection.java:[line 467]<br/>At AbstractJdbc3Connection.java:[line 469]<br/>At AbstractJdbc3Statement.java:[line 155]<br/>At AbstractJdbc3Statement.java:[line 157]<br/>At AbstractJdbc3Statement.java:[line 159]<br/>At AbstractJdbc3Statement.java:[line 160]<br/>At AbstractJdbc3Statement.java:[line 163]<br/>At AbstractJdbc3Statement.java:[line 172]<br/>At AbstractJdbc3Statement.java:[line 175]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66871');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66871" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2ResultSet<br/>In method org.postgresql.jdbc2.AbstractJdbc2ResultSet.deleteRow()<br/>At AbstractJdbc2ResultSet.java:[line 757]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2ResultSet.onlyTable<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2ResultSet.tableName<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>At AbstractJdbc2ResultSet.java:[line 745]<br/>At AbstractJdbc2ResultSet.java:[line 750]<br/>At AbstractJdbc2ResultSet.java:[line 753]<br/>At AbstractJdbc2ResultSet.java:[line 757]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67000');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67000" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2ResultSet<br/>In method org.postgresql.jdbc2.AbstractJdbc2ResultSet.insertRow()<br/>At AbstractJdbc2ResultSet.java:[line 820]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2ResultSet.tableName<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>At AbstractJdbc2ResultSet.java:[line 796]<br/>At AbstractJdbc2ResultSet.java:[line 809]<br/>At AbstractJdbc2ResultSet.java:[line 819]<br/>At AbstractJdbc2ResultSet.java:[line 820]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67124');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67124" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2ResultSet<br/>In method org.postgresql.jdbc2.AbstractJdbc2ResultSet.refreshRow()<br/>At AbstractJdbc2ResultSet.java:[line 1194]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2ResultSet$PrimaryKey.name<br/>Unknown source org/postgresql/core/Field.getColumnName(Ljava/sql/Connection;)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2ResultSet.onlyTable<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2ResultSet.tableName<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Unknown source org/postgresql/core/Field.columnName<br/>At Field.java:[line 233]<br/>At Field.java:[line 238]<br/>At Field.java:[line 252]<br/>At AbstractJdbc2ResultSet.java:[line 1168]<br/>At AbstractJdbc2ResultSet.java:[line 1173]<br/>At AbstractJdbc2ResultSet.java:[line 1177]<br/>At AbstractJdbc2ResultSet.java:[line 1185]<br/>At AbstractJdbc2ResultSet.java:[line 1189]<br/>At AbstractJdbc2ResultSet.java:[line 1194]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67313');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67313" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2ResultSet<br/>In method org.postgresql.jdbc2.AbstractJdbc2ResultSet.updateRow()<br/>At AbstractJdbc2ResultSet.java:[line 1272]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2ResultSet.onlyTable<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc2/AbstractJdbc2ResultSet.tableName<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>At AbstractJdbc2ResultSet.java:[line 1241]<br/>At AbstractJdbc2ResultSet.java:[line 1249]<br/>At AbstractJdbc2ResultSet.java:[line 1250]<br/>At AbstractJdbc2ResultSet.java:[line 1253]<br/>At AbstractJdbc2ResultSet.java:[line 1256]<br/>At AbstractJdbc2ResultSet.java:[line 1264]<br/>At AbstractJdbc2ResultSet.java:[line 1267]<br/>At AbstractJdbc2ResultSet.java:[line 1272]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67649');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Connection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67649" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Connection<br/>In method org.postgresql.jdbc3.AbstractJdbc3Connection.prepareCall(String, int, int)<br/>At AbstractJdbc3Connection.java:[line 318]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Connection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement;<br/>Sink parameter 3<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Connection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement; parameter 2<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67723');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67723" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Connection<br/>In method org.postgresql.jdbc3.AbstractJdbc3Connection.prepareStatement(String, int)<br/>At AbstractJdbc3Connection.java:[line 365]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement; parameter 1<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Method usage not detected<br/>At AbstractJdbc3Connection.java:[line 363]<br/>At AbstractJdbc3Statement.java:[line 155]<br/>At AbstractJdbc3Statement.java:[line 157]<br/>At AbstractJdbc3Statement.java:[line 159]<br/>At AbstractJdbc3Statement.java:[line 160]<br/>At AbstractJdbc3Statement.java:[line 163]<br/>At AbstractJdbc3Statement.java:[line 172]<br/>At AbstractJdbc3Statement.java:[line 175]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67912');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67912" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Connection<br/>In method org.postgresql.jdbc3.AbstractJdbc3Connection.prepareStatement(String, int, int)<br/>At AbstractJdbc3Connection.java:[line 275]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement;<br/>Sink parameter 3<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; parameter 2<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67986');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67986" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Connection<br/>In method org.postgresql.jdbc3.AbstractJdbc3Connection.prepareStatement(String, int[])<br/>At AbstractJdbc3Connection.java:[line 417]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68060');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68060" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Connection<br/>In method org.postgresql.jdbc3.AbstractJdbc3Connection.prepareStatement(String, String[])<br/>At AbstractJdbc3Connection.java:[line 469]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Connection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Method usage not detected<br/>At AbstractJdbc3Connection.java:[line 467]<br/>At AbstractJdbc3Statement.java:[line 155]<br/>At AbstractJdbc3Statement.java:[line 157]<br/>At AbstractJdbc3Statement.java:[line 159]<br/>At AbstractJdbc3Statement.java:[line 160]<br/>At AbstractJdbc3Statement.java:[line 163]<br/>At AbstractJdbc3Statement.java:[line 172]<br/>At AbstractJdbc3Statement.java:[line 175]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68254');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68254" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.execute(String, int)<br/>At AbstractJdbc3Statement.java:[line 271]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;I)Z parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68328');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68328" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.execute(String, int)<br/>At AbstractJdbc3Statement.java:[line 276]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;I)Z parameter 1<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Method usage not detected<br/>At AbstractJdbc3Statement.java:[line 155]<br/>At AbstractJdbc3Statement.java:[line 157]<br/>At AbstractJdbc3Statement.java:[line 159]<br/>At AbstractJdbc3Statement.java:[line 160]<br/>At AbstractJdbc3Statement.java:[line 163]<br/>At AbstractJdbc3Statement.java:[line 172]<br/>At AbstractJdbc3Statement.java:[line 175]<br/>At AbstractJdbc3Statement.java:[line 273]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68517');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68517" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.execute(String, int[])<br/>At AbstractJdbc3Statement.java:[line 317]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;[I)Z parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68591');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68591" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.execute(String, String[])<br/>At AbstractJdbc3Statement.java:[line 361]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;[Ljava/lang/String;)Z parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68665');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68665" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.execute(String, String[])<br/>At AbstractJdbc3Statement.java:[line 366]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;[Ljava/lang/String;)Z parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.execute(Ljava/lang/String;[Ljava/lang/String;)Z parameter 0<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Method usage not detected<br/>At AbstractJdbc3Statement.java:[line 155]<br/>At AbstractJdbc3Statement.java:[line 157]<br/>At AbstractJdbc3Statement.java:[line 159]<br/>At AbstractJdbc3Statement.java:[line 160]<br/>At AbstractJdbc3Statement.java:[line 163]<br/>At AbstractJdbc3Statement.java:[line 172]<br/>At AbstractJdbc3Statement.java:[line 175]<br/>At AbstractJdbc3Statement.java:[line 363]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68859');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68859" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.executeUpdate(String, int)<br/>At AbstractJdbc3Statement.java:[line 142]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;I)I parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68933');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68933" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.executeUpdate(String, int)<br/>At AbstractJdbc3Statement.java:[line 147]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;I)I parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Method usage not detected<br/>At AbstractJdbc3Statement.java:[line 144]<br/>At AbstractJdbc3Statement.java:[line 155]<br/>At AbstractJdbc3Statement.java:[line 157]<br/>At AbstractJdbc3Statement.java:[line 159]<br/>At AbstractJdbc3Statement.java:[line 160]<br/>At AbstractJdbc3Statement.java:[line 163]<br/>At AbstractJdbc3Statement.java:[line 172]<br/>At AbstractJdbc3Statement.java:[line 175]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69122');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69122" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.executeUpdate(String, int[])<br/>At AbstractJdbc3Statement.java:[line 199]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;[I)I parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69196');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69196" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.executeUpdate(String, String[])<br/>At AbstractJdbc3Statement.java:[line 224]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69270');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69270" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.jdbc3.AbstractJdbc3Statement<br/>In method org.postgresql.jdbc3.AbstractJdbc3Statement.executeUpdate(String, String[])<br/>At AbstractJdbc3Statement.java:[line 229]<br/>Sink method org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I parameter 0<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Unknown source org/postgresql/core/Utils.appendEscapedIdentifier(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/lang/StringBuffer; parameter 1<br/>Unknown source org/postgresql/jdbc3/AbstractJdbc3Statement.addReturning(Lorg/postgresql/core/BaseConnection;Ljava/lang/String;[Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Method usage not detected<br/>At AbstractJdbc3Statement.java:[line 155]<br/>At AbstractJdbc3Statement.java:[line 157]<br/>At AbstractJdbc3Statement.java:[line 159]<br/>At AbstractJdbc3Statement.java:[line 160]<br/>At AbstractJdbc3Statement.java:[line 163]<br/>At AbstractJdbc3Statement.java:[line 172]<br/>At AbstractJdbc3Statement.java:[line 175]<br/>At AbstractJdbc3Statement.java:[line 226]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70796');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70796" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.commitPrepared(Xid)<br/>At PGXAConnection.java:[line 487]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/xa/RecoveredXid.xidToString(Ljavax/transaction/xa/Xid;)Ljava/lang/String;<br/>Unknown source org/postgresql/util/Base64.encodeBytes([BIII)Ljava/lang/String;<br/>Unknown source org/postgresql/util/Base64.encodeBytes([BI)Ljava/lang/String;<br/>At Base64.java:[line 306]<br/>At Base64.java:[line 388]<br/>At Base64.java:[line 392]<br/>At PGXAConnection.java:[line 480]<br/>At PGXAConnection.java:[line 487]<br/>At RecoveredXid.java:[line 54]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70935');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70935" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.prepare(Xid)<br/>At PGXAConnection.java:[line 291]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/xa/RecoveredXid.xidToString(Ljavax/transaction/xa/Xid;)Ljava/lang/String;<br/>Unknown source org/postgresql/util/Base64.encodeBytes([BIII)Ljava/lang/String;<br/>Unknown source org/postgresql/util/Base64.encodeBytes([BI)Ljava/lang/String;<br/>At Base64.java:[line 306]<br/>At Base64.java:[line 388]<br/>At Base64.java:[line 392]<br/>At PGXAConnection.java:[line 286]<br/>At PGXAConnection.java:[line 291]<br/>At RecoveredXid.java:[line 54]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71074');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71074" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.rollback(Xid)<br/>At PGXAConnection.java:[line 396]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/xa/RecoveredXid.xidToString(Ljavax/transaction/xa/Xid;)Ljava/lang/String;<br/>Unknown source org/postgresql/util/Base64.encodeBytes([BIII)Ljava/lang/String;<br/>Unknown source org/postgresql/util/Base64.encodeBytes([BI)Ljava/lang/String;<br/>At Base64.java:[line 306]<br/>At Base64.java:[line 388]<br/>At Base64.java:[line 392]<br/>At PGXAConnection.java:[line 390]<br/>At PGXAConnection.java:[line 396]<br/>At RecoveredXid.java:[line 54]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65605');">
<td>
<span class="priority-2">SECUS</span>
</td>
<td>Unencrypted socket to org.postgresql.core.PGStream (instead of SSLSocket)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65605" style="display: none;">
<a href="#UNENCRYPTED_SOCKET">Bug type UNENCRYPTED_SOCKET (click for details)</a>
<br/>In class org.postgresql.core.PGStream<br/>In method new org.postgresql.core.PGStream(String, int)<br/>At PGStream.java:[line 62]<br/>Value remote host</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69808');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69808" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.postgresql.ssl.NonValidatingFactory$NonValidatingTM<br/>In method org.postgresql.ssl.NonValidatingFactory$NonValidatingTM.checkClientTrusted(X509Certificate[], String)<br/>At NonValidatingFactory.java:[line 49]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69862');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69862" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.postgresql.ssl.NonValidatingFactory$NonValidatingTM<br/>In method org.postgresql.ssl.NonValidatingFactory$NonValidatingTM.checkServerTrusted(X509Certificate[], String)<br/>At NonValidatingFactory.java:[line 52]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69916');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69916" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.postgresql.ssl.NonValidatingFactory$NonValidatingTM<br/>In method org.postgresql.ssl.NonValidatingFactory$NonValidatingTM.getAcceptedIssuers()<br/>At NonValidatingFactory.java:[line 45]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69464');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69464" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.postgresql.jdbc4.Jdbc4SQLXML<br/>In method org.postgresql.jdbc4.Jdbc4SQLXML.getSource(Class)<br/>At Jdbc4SQLXML.java:[line 129]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69638');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69638" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.postgresql.jdbc4.Jdbc4SQLXML<br/>In method org.postgresql.jdbc4.Jdbc4SQLXML.getSource(Class)<br/>At Jdbc4SQLXML.java:[line 143]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69522');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69522" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.postgresql.jdbc4.Jdbc4SQLXML<br/>In method org.postgresql.jdbc4.Jdbc4SQLXML.ensureInitialized()<br/>At Jdbc4SQLXML.java:[line 261]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69580');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of SAXTransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69580" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.postgresql.jdbc4.Jdbc4SQLXML<br/>In method org.postgresql.jdbc4.Jdbc4SQLXML.setResult(Class)<br/>At Jdbc4SQLXML.java:[line 188]<br/>Value SAXTransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69692');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69692" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.postgresql.jdbc4.Jdbc4SQLXML<br/>In method org.postgresql.jdbc4.Jdbc4SQLXML.ensureInitialized()<br/>At Jdbc4SQLXML.java:[line 261]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69750');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of SAXTransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69750" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.postgresql.jdbc4.Jdbc4SQLXML<br/>In method org.postgresql.jdbc4.Jdbc4SQLXML.setResult(Class)<br/>At Jdbc4SQLXML.java:[line 188]<br/>Value SAXTransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66255');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getBestRowIdentifier(String, String, String, int, boolean) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66255" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getBestRowIdentifier(String, String, String, int, boolean)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 2982]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66309');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getColumnPrivileges(String, String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66309" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getColumnPrivileges(String, String, String, String)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 2580]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66363');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getColumns(int, String, String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66363" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getColumns(int, String, String, String, String)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 2354]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66417');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getImportedExportedKeys(String, String, String, String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66417" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getImportedExportedKeys(String, String, String, String, String, String)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 3270]<br/>Another occurrence at AbstractJdbc2DatabaseMetaData.java:[line 3373]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66482');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getIndexInfo(String, String, String, boolean, boolean) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66482" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getIndexInfo(String, String, String, boolean, boolean)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 4023]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66536');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getPrimaryKeys(String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66536" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getPrimaryKeys(String, String, String)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 3158]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66590');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getProcedureColumns(String, String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66590" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getProcedureColumns(String, String, String, String)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 1758]<br/>Another occurrence at AbstractJdbc2DatabaseMetaData.java:[line 1872]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66655');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getProcedures(String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66655" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getProcedures(String, String, String)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 1654]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66709');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getTablePrivileges(String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66709" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getTablePrivileges(String, String, String)<br/>At AbstractJdbc2DatabaseMetaData.java:[line 2693]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66763');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getTables(String, String, String, String[]) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66763" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getTables(String, String, String, String[])<br/>At AbstractJdbc2DatabaseMetaData.java:[line 2069]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66817');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getUDTs(String, String, String, int[]) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66817" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData<br/>In method org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData.getUDTs(String, String, String, int[])<br/>At AbstractJdbc2DatabaseMetaData.java:[line 4236]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67487');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.postgresql.jdbc2.AbstractJdbc2ResultSet.insertRow() </td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67487" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2ResultSet<br/>In method org.postgresql.jdbc2.AbstractJdbc2ResultSet.insertRow()<br/>At AbstractJdbc2ResultSet.java:[line 820]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67541');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.postgresql.jdbc2.AbstractJdbc2ResultSet.refreshRow() </td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67541" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2ResultSet<br/>In method org.postgresql.jdbc2.AbstractJdbc2ResultSet.refreshRow()<br/>At AbstractJdbc2ResultSet.java:[line 1194]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67595');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.postgresql.jdbc2.AbstractJdbc2ResultSet.updateRow() </td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67595" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.postgresql.jdbc2.AbstractJdbc2ResultSet<br/>In method org.postgresql.jdbc2.AbstractJdbc2ResultSet.updateRow()<br/>At AbstractJdbc2ResultSet.java:[line 1272]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71213');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.xa.PGXAConnection.commitPrepared(Xid) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71213" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.commitPrepared(Xid)<br/>At PGXAConnection.java:[line 487]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71267');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.xa.PGXAConnection.prepare(Xid) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71267" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.prepare(Xid)<br/>At PGXAConnection.java:[line 291]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71321');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.postgresql.xa.PGXAConnection.rollback(Xid) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71321" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.rollback(Xid)<br/>At PGXAConnection.java:[line 396]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="HARD_CODE_PASSWORD">HARD_CODE_PASSWORD: Hard coded password</a>
</h2>
            
<p>
Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>private String SECRET_PASSWORD = "letMeIn!";

Properties props = new Properties();
props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/259.html">CWE-259: Use of Hard-coded Password</a>
</p>

        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="UNENCRYPTED_SOCKET">UNENCRYPTED_SOCKET: Unencrypted Socket</a>
</h2>
            
<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain socket (Cleartext communication):
<pre>Socket soc = new Socket("www.google.com",80);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Socket (Secure communication):
<pre>Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);</pre>
</p>
<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>

        
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        
<h2>
<a name="XXE_DOCUMENT">XXE_DOCUMENT: XML parsing vulnerable to XXE (DocumentBuilder)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces2-j/features.html">Xerces2 complete features list</a>
</p>

        
<h2>
<a name="XXE_XMLSTREAMREADER">XXE_XMLSTREAMREADER: XML parsing vulnerable to XXE (XMLStreamReader)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution disabling External Entities:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://openjdk.java.net/jeps/185">JEP 185: Restrict Fetching of External XML Resources</a>
</p>

        
<h2>
<a name="XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY: XML parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY: XSLT parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XSLT External Entity (XXE) attacks can occur when an XSLT parser supports external entities while processing XSLT received
from an untrusted source.</p>
<p><b>Risk: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
   &lt;xsl:template match=&quot;/&quot;&gt;
       &lt;xsl:value-of select=&quot;document(&apos;/etc/passwd&apos;)&quot;&gt;
   &lt;/xsl:value-of&gt;&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>
<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING: A prepared statement is generated from a nonconstant String</a>
</h2>

  <p>The code creates an SQL prepared statement from a nonconstant String.
If unchecked, tainted data from a user is used in building this String, SQL injection could
be used to make the prepared statement do something unexpected and undesirable.
</p>

    
<h2>
<a name="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE: Nonconstant string passed to execute or addBatch method on an SQL statement</a>
</h2>

  <p>The method invokes the execute or addBatch method on an SQL statement with a String that seems
to be dynamically generated. Consider using
a prepared statement instead. It is more efficient and less vulnerable to
SQL injection attacks.
</p>

    </body>
</html>
