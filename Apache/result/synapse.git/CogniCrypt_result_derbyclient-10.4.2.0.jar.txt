[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 646.5 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 15 analysis seeds within 1 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 16
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.06

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 17
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.12

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 18
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.17

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 18
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 19
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 19
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 21
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 22
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 23
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 23
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 25
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 26
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 26
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 27
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 27
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 27
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 24 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 25 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 26 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 27 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 28 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: $r12
		Type: javax.crypto.SecretKeyFactory
		Statement: $r12 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(varReplacer1978, $r11)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] decryptData(byte[],int,byte[],byte[])>
		SHA-256: e85464c35fdf5f97b46f088d0f38f0cc6af9e9aed00d6a3dc61a8a503cd10012
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: r44 = virtualinvoke r41.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] encryptData(byte[],int,byte[],byte[])>
		SHA-256: d066442d0852b4de5046c75282ee4b2c55d8e45cc1637b248e6829d3be85dd6
		Secure: false
	Object:
		Variable: varReplacer1980
		Type: java.lang.String
		Statement: specialinvoke r46.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, varReplacer1980)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] decryptData(byte[],int,byte[],byte[])>
		SHA-256: 5bb3d1963db3e025db999d9a7c6ff0336d89dba584aa732d3fed26aff44e9fe3
		Secure: false
	Object:
		Variable: r38
		Type: java.lang.Object
		Statement: r38 = virtualinvoke $r10.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r39)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] decryptData(byte[],int,byte[],byte[])>
		SHA-256: 39b74a8471f1906fc0705cae53fd297a88934aa4c951c449546618d90612a7f8
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.KeyPairGenerator
		Statement: $r9 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer1948, $r8)
		Method: <org.apache.derby.client.am.EncryptionManager: void <init>(org.apache.derby.client.am.Agent)>
		SHA-256: 49ec84822bba5af2132d121ec3618e9071445ec98130d2bd4da0f78021b078bb
		Secure: true
	Object:
		Variable: r48
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke r48.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r43)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] encryptData(byte[],int,byte[],byte[])>
		SHA-256: 50bb4b1dc2b73dcd4f95f63604b8de14829aafc7017ad68338f11e8fcc2d608
		Secure: false
	Object:
		Variable: r3
		Type: java.security.KeyStore
		Statement: r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer4224)
		Method: <org.apache.derby.client.net.NaiveTrustManager: javax.net.SocketFactory getSocketFactory()>
		SHA-256: caaf4f5b322d826e23a01e353085611c37e2004fcde0e21fb6302900fd07f69f
		Secure: false
	Object:
		Variable: $r13
		Type: javax.net.ssl.KeyManager[]
		Statement: $r13 = virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.apache.derby.client.net.NaiveTrustManager: javax.net.SocketFactory getSocketFactory()>
		SHA-256: 44948f0e76a1e09327eb7313134cfcd05060ab63298c5dd4989e71596f9c1d7d
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: $r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer1959)
		Method: <org.apache.derby.client.am.EncryptionManager: void <init>(org.apache.derby.client.am.Agent,java.lang.String)>
		SHA-256: 950ca011983b825e1a3a21ff53348f5356c499887fc66435da92b8eb6adc2a1a
		Secure: false
	Object:
		Variable: r41
		Type: javax.crypto.Cipher
		Statement: r41 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1969, $r40)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] encryptData(byte[],int,byte[],byte[])>
		SHA-256: 7127ec5a17ca2d042797361fc00c4726e4379e177bfa295c9cd6cab180c0e7e1
		Secure: false
	Object:
		Variable: r46
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r46.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, varReplacer1980)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] decryptData(byte[],int,byte[],byte[])>
		SHA-256: 88c37dfbfce83ab18c1ca9f173d66d3abec9df43c000d92133e0a41ef3dbc23b
		Secure: false
	Object:
		Variable: r46
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r46.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, varReplacer1974)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] encryptData(byte[],int,byte[],byte[])>
		SHA-256: f5c95ddfeddec3e1eaaf52677b85ae3651b12693d3ebd9833df3c14137b91877
		Secure: false
	Object:
		Variable: varReplacer1974
		Type: java.lang.String
		Statement: specialinvoke r46.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, varReplacer1974)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] encryptData(byte[],int,byte[],byte[])>
		SHA-256: de62158ee591c2dc790a68f17c0d555ba95ec0ffcd823ec3fea609e9891faa10
		Secure: false
	Object:
		Variable: r44
		Type: byte[]
		Statement: r44 = virtualinvoke r41.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] encryptData(byte[],int,byte[],byte[])>
		SHA-256: e5c3f947db975bdd9a039e3c5ab58d4cc3369d2a52a155e80d614f5e28411f94
		Secure: false
	Object:
		Variable: $r13
		Type: java.security.KeyPair
		Statement: $r13 = virtualinvoke $r12.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.apache.derby.client.am.EncryptionManager: void <init>(org.apache.derby.client.am.Agent)>
		SHA-256: 4c213164a1e407fdfbd25928ffe669657f63a1a47d293dbc94e43e81644f6eea
		Secure: false
	Object:
		Variable: r44
		Type: byte[]
		Statement: r44 = virtualinvoke r41.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] decryptData(byte[],int,byte[],byte[])>
		SHA-256: e8888ded308bba64018b8628f568731a6a079754ee7722b70401c3a9f9700c7c
		Secure: false
	Object:
		Variable: $r18
		Type: java.security.PrivateKey
		Statement: $r18 = virtualinvoke $r16.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <org.apache.derby.client.am.EncryptionManager: void <init>(org.apache.derby.client.am.Agent)>
		SHA-256: 7d74426ba388db7e50f3aff348971e782bfdf9107073893af9563c5f1decd654
		Secure: true
	Object:
		Variable: r4
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r4 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.lang.String)>(varReplacer4230, varReplacer4231)
		Method: <org.apache.derby.client.net.NaiveTrustManager: javax.net.SocketFactory getSocketFactory()>
		SHA-256: 7bf6d7362c85ee8c26e49eeca3e56d3d98599528b2a995b4d863cf2f0daeacb9
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.SecretKeyFactory
		Statement: $r12 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(varReplacer1972, $r11)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] encryptData(byte[],int,byte[],byte[])>
		SHA-256: 9fb03c24adbac5fae382268296175ab351d5fbf5db3bc5b3b2e0ad0730651a32
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r2.<java.security.SecureRandom: byte[] generateSeed(int)>(varReplacer1986)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] generateSeed()>
		SHA-256: d7d94b77f79dade3d2ec0a3d70c01ed0c455eba2355e48b57222f2761b861a74
		Secure: false
	Object:
		Variable: $r13
		Type: java.security.KeyPair
		Statement: $r13 = virtualinvoke $r12.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.apache.derby.client.am.EncryptionManager: void <init>(org.apache.derby.client.am.Agent)>
		SHA-256: a943a37c0772fe282e809d9e71a44aa96a622170808bd7e85ccfbb6763b908ab
		Secure: true
	Object:
		Variable: r48
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke r48.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r43)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] decryptData(byte[],int,byte[],byte[])>
		SHA-256: 530e366c39513f23486c3a2c7623e987c8a5799c63be679088becd59e4d8f14e
		Secure: false
	Object:
		Variable: r38
		Type: java.lang.Object
		Statement: r38 = virtualinvoke $r10.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r39)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] encryptData(byte[],int,byte[],byte[])>
		SHA-256: 9f689fd467a438ed8819392c52ecd3cd8bde54a5e21d16d7175aad8d771b0814
		Secure: false
	Object:
		Variable: r41
		Type: javax.crypto.Cipher
		Statement: r41 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1977, $r40)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] decryptData(byte[],int,byte[],byte[])>
		SHA-256: 1d379494164655726c1c790833380f7dd984f3d45d8a7ba484c3dce9da91415
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r2)
		Method: <org.apache.derby.client.am.EncryptionManager: void <init>(org.apache.derby.client.am.Agent,java.lang.String)>
		SHA-256: b4b2f81d5d7a245fb5bdf72dc9953f33d84c7d2858451a204a5dd5db6ecae517
		Secure: false
	Object:
		Variable: r0
		Type: javax.net.ssl.SSLContext
		Statement: r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4223)
		Method: <org.apache.derby.client.net.NaiveTrustManager: javax.net.SocketFactory getSocketFactory()>
		SHA-256: d7c3e411797eaa2c65689666eb83bf18240c7c1e3af51c4b28e3c4a16503eb1a
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: r44 = virtualinvoke r41.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] decryptData(byte[],int,byte[],byte[])>
		SHA-256: 3bdc5fdf3888c88a2675bee0f060604fae0822ff9cbbabe4fd5ded6d1e44fb31
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>($r7, $r6, varReplacer1951)
		Method: <org.apache.derby.client.am.EncryptionManager: void <init>(org.apache.derby.client.am.Agent)>
		SHA-256: 3c193916c05429b0564c616740edc4e332af5649a59502cf78d7e525ef93d47a
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.PublicKey
		Statement: $r4 = virtualinvoke $r3.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <org.apache.derby.client.am.EncryptionManager: byte[] obtainPublicKey()>
		SHA-256: 9ff7f8b46d245669e12de043070ddf225fbfc3f5a0afa6d2626141c9b2e690d6
		Secure: true

Findings in Java Class: org.apache.derby.client.am.EncryptionManager

	 in Method: byte[] generateSeed()
		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #950ca011983b825e1a3a21ff53348f5356c499887fc66435da92b8eb6adc2a1a)
			Unexpected call to method setSeed on object of type java.security.SecureRandom. Expect a call to one of the following methods next,generateSeed,nextBytes
			at statement: virtualinvoke $r3.<java.security.SecureRandom: void setSeed(byte[])>($r4)


	 in Method: void <init>(org.apache.derby.client.am.Agent,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b4b2f81d5d7a245fb5bdf72dc9953f33d84c7d2858451a204a5dd5db6ecae517)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r2)


	 in Method: byte[] encryptData(byte[],int,byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #7127ec5a17ca2d042797361fc00c4726e4379e177bfa295c9cd6cab180c0e7e1)
			First parameter (with value "DES/CBC/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r41 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1969, $r40)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r46.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, varReplacer1974)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r38 = virtualinvoke $r10.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r39)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r41.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1968, r57, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke r48.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r43)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke r41.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1968, r57, r4)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #9fb03c24adbac5fae382268296175ab351d5fbf5db3bc5b3b2e0ad0730651a32)
			First parameter (with value "DES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r12 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(varReplacer1972, $r11)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #f5c95ddfeddec3e1eaaf52677b85ae3651b12693d3ebd9833df3c14137b91877)
			Second parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r46.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, varReplacer1974)


	 in Method: byte[] decryptData(byte[],int,byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r41.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1982, r57, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r46.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, varReplacer1980)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #e85464c35fdf5f97b46f088d0f38f0cc6af9e9aed00d6a3dc61a8a503cd10012)
			First parameter (with value "DES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r12 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(varReplacer1978, $r11)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #88c37dfbfce83ab18c1ca9f173d66d3abec9df43c000d92133e0a41ef3dbc23b)
			Second parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r46.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, varReplacer1980)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r38 = virtualinvoke $r10.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r39)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke r48.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r43)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #1d379494164655726c1c790833380f7dd984f3d45d8a7ba484c3dce9da91415)
			First parameter (with value "DES/CBC/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r41 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1977, $r40)


Findings in Java Class: org.apache.derby.client.net.NaiveTrustManager

	 in Method: javax.net.SocketFactory getSocketFactory()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r3, $r12)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #7bf6d7362c85ee8c26e49eeca3e56d3d98599528b2a995b4d863cf2f0daeacb9)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r3, $r12)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #caaf4f5b322d826e23a01e353085611c37e2004fcde0e21fb6302900fd07f69f)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r20, $r11)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, $r14, varReplacer4221)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #d7c3e411797eaa2c65689666eb83bf18240c7c1e3af51c4b28e3c4a16503eb1a)
			First parameter (with value "SSL") should be any of {TLSv1.2}
			at statement: r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4223)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, $r14, varReplacer4221)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 29

	CogniCrypt found the following violations. For details see description above.
	TypestateError: 1
	RequiredPredicateError: 12
	ConstraintError: 8
	NeverTypeOfError: 2
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 19 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 24.07 s

