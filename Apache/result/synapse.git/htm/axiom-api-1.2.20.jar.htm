<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/synapse.git/axiom-api-1.2.20.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>12365 lines of code analyzed,
	in 353 classes, 
	in 38 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">37</td>
<td align="right">2.99</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>37</b>
</td>
<td align="right">
<b>2.99</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">37</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>37</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66167');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66167" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.axiom.om.util.CommonUtils<br/>In method org.apache.axiom.om.util.CommonUtils.stackToString(Throwable)<br/>At CommonUtils.java:[line 91]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66221');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66221" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.axiom.om.util.DetachableInputStream<br/>In method org.apache.axiom.om.util.DetachableInputStream.stackToString(Throwable)<br/>At DetachableInputStream.java:[line 189]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66443');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66443" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.loadFactoryProperties(String)<br/>At StAXUtils.java:[line 406]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source java/util/Map$Entry.getValue()Ljava/lang/Object;<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Tainted source java/util/Properties.entrySet()Ljava/util/Set;<br/>Tainted source java/util/Map.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/apache/axiom/om/util/StAXUtils.loadFactoryProperties(Ljava/lang/String;)Ljava/util/Map; parameter 0<br/>Tainted source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Tainted source java/util/Iterator.next()Ljava/lang/Object;<br/>At StAXUtils.java:[line 388]<br/>At StAXUtils.java:[line 389]<br/>At StAXUtils.java:[line 390]<br/>At StAXUtils.java:[line 403]<br/>At StAXUtils.java:[line 406]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66592');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.error(Ljava/lang/Object;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66592" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.loadFactoryProperties(String)<br/>At StAXUtils.java:[line 410]<br/>Sink method org/apache/commons/logging/Log.error(Ljava/lang/Object;Ljava/lang/Throwable;)V<br/>Sink parameter 1<br/>Tainted source java/util/Map$Entry.getValue()Ljava/lang/Object;<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Tainted source java/util/Properties.entrySet()Ljava/util/Set;<br/>Tainted source java/util/Map.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/apache/axiom/om/util/StAXUtils.loadFactoryProperties(Ljava/lang/String;)Ljava/util/Map; parameter 0<br/>Tainted source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Tainted source java/util/Iterator.next()Ljava/lang/Object;<br/>At StAXUtils.java:[line 388]<br/>At StAXUtils.java:[line 389]<br/>At StAXUtils.java:[line 390]<br/>At StAXUtils.java:[line 403]<br/>At StAXUtils.java:[line 406]<br/>At StAXUtils.java:[line 410]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67130');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67130" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.axiom.util.UIDGenerator<br/>In method org.apache.axiom.util.UIDGenerator.&lt;static initializer for UIDGenerator&gt;()<br/>At UIDGenerator.java:[line 83]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.attachments.AttachmentCacheMonitor<br/>In method org.apache.axiom.attachments.AttachmentCacheMonitor._deleteFile(String)<br/>At AttachmentCacheMonitor.java:[line 267]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/attachments/AttachmentCacheMonitor._deleteFile(Ljava/lang/String;)Ljava/lang/Boolean; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65625');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65625" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl<br/>In method org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl.create(String)<br/>At LifecycleManagerImpl.java:[line 54]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/attachments/lifecycle/impl/LifecycleManagerImpl.create(Ljava/lang/String;)Lorg/apache/axiom/attachments/lifecycle/impl/FileAccessor; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65699');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65699" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl<br/>In method org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl.create(String)<br/>At LifecycleManagerImpl.java:[line 68]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/util/UIDGenerator.generateUID()Ljava/lang/String;<br/>At LifecycleManagerImpl.java:[line 65]<br/>At LifecycleManagerImpl.java:[line 67]<br/>At UIDGenerator.java:[line 221]<br/>At UIDGenerator.java:[line 222]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65808');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65808" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.blob.TempFileBlobFactory<br/>In method org.apache.axiom.blob.TempFileBlobFactory.createTempFile()<br/>At TempFileBlobFactory.java:[line 40]<br/>Sink method java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/blob/TempFileBlobFactory.tempDirectory<br/>At TempFileBlobFactory.java:[line 40]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66019');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66019" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.om.impl.builder.StAXOMBuilder<br/>In method new org.apache.axiom.om.impl.builder.StAXOMBuilder(String)<br/>At StAXOMBuilder.java:[line 140]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/impl/builder/StAXOMBuilder.&lt;init&gt;(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66093');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66093" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.om.impl.builder.XOPAwareStAXOMBuilder<br/>In method new org.apache.axiom.om.impl.builder.XOPAwareStAXOMBuilder(String, Attachments)<br/>At XOPAwareStAXOMBuilder.java:[line 72]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/impl/builder/XOPAwareStAXOMBuilder.&lt;init&gt;(Ljava/lang/String;Lorg/apache/axiom/attachments/Attachments;)V parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66967');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66967" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.om.xpath.DocumentNavigator<br/>In method org.apache.axiom.om.xpath.DocumentNavigator.getDocument(String)<br/>At DocumentNavigator.java:[line 546]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/xpath/DocumentNavigator.getDocument(Ljava/lang/String;)Ljava/lang/Object; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67188');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "([0-9]+(\\.[0-9]+)*)([\\.-].*)?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67188" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ([0-9]+(\\.[0-9]+)*)([\\.-].*)?<br/>In class org.apache.axiom.util.stax.dialect.Version<br/>In method org.apache.axiom.util.stax.dialect.Version.&lt;static initializer for Version&gt;()<br/>At Version.java:[line 25]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65887');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65887" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.axiom.locator.ImplementationFactory<br/>In method org.apache.axiom.locator.ImplementationFactory.parseDescriptor(Loader, URL)<br/>At ImplementationFactory.java:[line 88]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/locator/ImplementationFactory.parseDescriptor(Lorg/apache/axiom/locator/Loader;Ljava/net/URL;)Ljava/util/List; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67041');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67041" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.axiom.om.xpath.DocumentNavigator<br/>In method org.apache.axiom.om.xpath.DocumentNavigator.getDocument(String)<br/>At DocumentNavigator.java:[line 549]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/xpath/DocumentNavigator.getDocument(Ljava/lang/String;)Ljava/lang/Object; parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Method usage not detected<br/>At DocumentNavigator.java:[line 548]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66275');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66275" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.axiom.om.util.DigestGenerator<br/>In method org.apache.axiom.om.util.DigestGenerator.compareOMAttribute(OMAttribute, OMAttribute, String)<br/>At DigestGenerator.java:[line 348]<br/>Sink method java/util/Arrays.equals([B[B)Z<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/util/DigestGenerator.getDigest(Lorg/apache/axiom/om/OMAttribute;Ljava/lang/String;)[B<br/>Unknown source java/security/MessageDigest.digest()[B<br/>At DigestGenerator.java:[line 348]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66359');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66359" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.axiom.om.util.DigestGenerator<br/>In method org.apache.axiom.om.util.DigestGenerator.compareOMDocument(OMDocument, OMDocument, String)<br/>At DigestGenerator.java:[line 334]<br/>Sink method java/util/Arrays.equals([B[B)Z<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/util/DigestGenerator.getDigest(Lorg/apache/axiom/om/OMDocument;Ljava/lang/String;)[B<br/>Unknown source java/security/MessageDigest.digest()[B<br/>At DigestGenerator.java:[line 334]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65961');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65961" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.apache.axiom.locator.ImplementationFactory<br/>In method org.apache.axiom.locator.ImplementationFactory.parseDescriptor(Loader, URL)<br/>At ImplementationFactory.java:[line 90]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66751');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66751" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.createXMLStreamReader(StAXParserConfiguration, InputStream)<br/>At StAXUtils.java:[line 208]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66805');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66805" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.createXMLStreamReader(StAXParserConfiguration, InputStream, String)<br/>At StAXUtils.java:[line 192]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66859');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66859" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.createXMLStreamReader(StAXParserConfiguration, Reader)<br/>At StAXUtils.java:[line 234]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66913');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66913" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.createXMLStreamReader(StAXParserConfiguration, String, InputStream)<br/>At StAXUtils.java:[line 218]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67246');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67246" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createFilteredReader(XMLEventReader, EventFilter)<br/>At XMLInputFactoryWrapper.java:[line 54]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67300');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67300" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createFilteredReader(XMLStreamReader, StreamFilter)<br/>At XMLInputFactoryWrapper.java:[line 59]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67354');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67354" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(InputStream)<br/>At XMLInputFactoryWrapper.java:[line 68]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67408');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67408" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(InputStream, String)<br/>At XMLInputFactoryWrapper.java:[line 64]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67462');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67462" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(Reader)<br/>At XMLInputFactoryWrapper.java:[line 72]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67516');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67516" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(String, InputStream)<br/>At XMLInputFactoryWrapper.java:[line 81]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67570');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67570" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(String, Reader)<br/>At XMLInputFactoryWrapper.java:[line 86]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67624');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67624" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(XMLStreamReader)<br/>At XMLInputFactoryWrapper.java:[line 90]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67678');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67678" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(Source)<br/>At XMLInputFactoryWrapper.java:[line 76]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67732');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67732" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(InputStream)<br/>At XMLInputFactoryWrapper.java:[line 99]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67786');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67786" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(InputStream, String)<br/>At XMLInputFactoryWrapper.java:[line 95]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67840');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67840" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(Reader)<br/>At XMLInputFactoryWrapper.java:[line 103]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67894');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67894" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(String, InputStream)<br/>At XMLInputFactoryWrapper.java:[line 112]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67948');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67948" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(String, Reader)<br/>At XMLInputFactoryWrapper.java:[line 117]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68002');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68002" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(Source)<br/>At XMLInputFactoryWrapper.java:[line 107]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
</h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        
<h2>
<a name="XXE_DOCUMENT">XXE_DOCUMENT: XML parsing vulnerable to XXE (DocumentBuilder)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces2-j/features.html">Xerces2 complete features list</a>
</p>

        
<h2>
<a name="XXE_XMLSTREAMREADER">XXE_XMLSTREAMREADER: XML parsing vulnerable to XXE (XMLStreamReader)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution disabling External Entities:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://openjdk.java.net/jeps/185">JEP 185: Restrict Fetching of External XML Resources</a>
</p>

        </body>
</html>
