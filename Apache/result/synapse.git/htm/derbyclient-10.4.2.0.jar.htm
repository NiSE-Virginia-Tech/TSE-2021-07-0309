<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/synapse.git/derbyclient-10.4.2.0.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>27410 lines of code analyzed,
	in 176 classes, 
	in 11 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">4</td>
<td align="right">0.15</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">50</td>
<td align="right">1.82</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>54</b>
</td>
<td align="right">
<b>1.97</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">54</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>54</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65787');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65787" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class org.apache.derby.client.am.EncryptionManager<br/>In method org.apache.derby.client.am.EncryptionManager.decryptData(byte[], int, byte[], byte[])<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65826');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65826" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class org.apache.derby.client.am.EncryptionManager<br/>In method org.apache.derby.client.am.EncryptionManager.encryptData(byte[], int, byte[], byte[])<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66112');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66112" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.client.am.ExceptionFormatter<br/>In method org.apache.derby.client.am.ExceptionFormatter.printTrace(Throwable, PrintWriter, String)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66151');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66151" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.client.am.ExceptionFormatter<br/>In method org.apache.derby.client.am.ExceptionFormatter.printTrace(SQLException, PrintWriter, String, boolean)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65995');">
<td>
<span class="priority-1">PADORA</span>
</td>
<td>The cipher is susceptible to padding oracle attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65995" style="display: none;">
<a href="#PADDING_ORACLE">Bug type PADDING_ORACLE (click for details)</a>
<br/>In class org.apache.derby.client.am.EncryptionManager<br/>In method org.apache.derby.client.am.EncryptionManager.decryptData(byte[], int, byte[], byte[])<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66034');">
<td>
<span class="priority-1">PADORA</span>
</td>
<td>The cipher is susceptible to padding oracle attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66034" style="display: none;">
<a href="#PADDING_ORACLE">Bug type PADDING_ORACLE (click for details)</a>
<br/>In class org.apache.derby.client.am.EncryptionManager<br/>In method org.apache.derby.client.am.EncryptionManager.encryptData(byte[], int, byte[], byte[])<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66315');">
<td>
<span class="priority-2">SECCONFCTRL</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.setCatalog(Ljava/lang/String;)V might be used to control configuration externally</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66315" style="display: none;">
<a href="#EXTERNAL_CONFIG_CONTROL">Bug type EXTERNAL_CONFIG_CONTROL (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.setCatalog(String)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.setCatalog(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogicalConnection.setCatalog(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65865');">
<td>
<span class="priority-2">SECDU</span>
</td>
<td>DES should be replaced with AES</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65865" style="display: none;">
<a href="#DES_USAGE">Bug type DES_USAGE (click for details)</a>
<br/>In class org.apache.derby.client.am.EncryptionManager<br/>In method org.apache.derby.client.am.EncryptionManager.decryptData(byte[], int, byte[], byte[])<br/>In &lt;Unknown&gt;<br/>Sink method javax/crypto/Cipher.getInstance(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/Cipher;<br/>Sink parameter 1</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65914');">
<td>
<span class="priority-2">SECDU</span>
</td>
<td>DES should be replaced with AES</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65914" style="display: none;">
<a href="#DES_USAGE">Bug type DES_USAGE (click for details)</a>
<br/>In class org.apache.derby.client.am.EncryptionManager<br/>In method org.apache.derby.client.am.EncryptionManager.encryptData(byte[], int, byte[], byte[])<br/>In &lt;Unknown&gt;<br/>Sink method javax/crypto/Cipher.getInstance(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/Cipher;<br/>Sink parameter 1</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65963');">
<td>
<span class="priority-2">SECHCK</span>
</td>
<td>Hard coded cryptographic key found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65963" style="display: none;">
<a href="#HARD_CODE_KEY">Bug type HARD_CODE_KEY (click for details)</a>
<br/>In class org.apache.derby.client.am.EncryptionManager<br/>Value is hard coded in field org.apache.derby.client.am.EncryptionManager.SECMEC_USRSSBPWD_PWDSEQS[B with suspicious name<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66190');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66190" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.client.am.LogWriter$1<br/>In method org.apache.derby.client.am.LogWriter$1.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogWriter$1.val$fileName<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68300');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68300" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.checkDirectory(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.infoNames<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68360');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68360" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.checkDirectory(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.checkDirectory(Ljava/lang/String;)Lorg/apache/derby/impl/tools/sysinfo/ZipInfoProperties; parameter 0<br/>Method usage not detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68425');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68425" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.checkFile(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.checkFile(Ljava/lang/String;)Lorg/apache/derby/impl/tools/sysinfo/ZipInfoProperties; parameter 0<br/>Method usage not detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68490');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68490" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.checkFile(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.checkFile(Ljava/lang/String;)Lorg/apache/derby/impl/tools/sysinfo/ZipInfoProperties; parameter 0<br/>Method usage not detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68555');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68555" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.formatURL(URL)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/net/URL.toString()Ljava/lang/String;<br/>Unknown source java/net/URLDecoder.decode(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.formatURL(Ljava/net/URL;)Ljava/lang/String; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68625');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68625" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main$6<br/>In method org.apache.derby.impl.tools.sysinfo.Main$6.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main$6.val$cpEntry<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66250');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;Z)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66250" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.derby.client.am.LogWriter$1<br/>In method org.apache.derby.client.am.LogWriter$1.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;Z)V<br/>Sink parameter 1<br/>Unknown source java/io/File.getCanonicalPath()Ljava/lang/String;<br/>Unknown source java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.CachingLogicalConnection<br/>In method org.apache.derby.client.am.CachingLogicalConnection.prepareStatement(String, int[])<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/CachingLogicalConnection.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65610');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65610" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.CachingLogicalConnection<br/>In method org.apache.derby.client.am.CachingLogicalConnection.prepareStatement(String, String[])<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/CachingLogicalConnection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65669');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/LogicalConnection40.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65669" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.CachingLogicalConnection40<br/>In method org.apache.derby.client.am.CachingLogicalConnection40.prepareStatement(String, int[])<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/LogicalConnection40.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/CachingLogicalConnection40.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65728');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/LogicalConnection40.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65728" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.CachingLogicalConnection40<br/>In method org.apache.derby.client.am.CachingLogicalConnection40.prepareStatement(String, String[])<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/LogicalConnection40.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/CachingLogicalConnection40.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66374');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.nativeSQL(Ljava/lang/String;)Ljava/lang/String; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66374" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.nativeSQL(String)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.nativeSQL(Ljava/lang/String;)Ljava/lang/String;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogicalConnection.nativeSQL(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66433');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66433" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareCall(String)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66492');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66492" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareCall(String, int, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement;<br/>Sink parameter 2<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement; parameter 2<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66551');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66551" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareCall(String, int, int, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement;<br/>Sink parameter 3<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement; parameter 3<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66610');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66610" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareStatement(String)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66669');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66669" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareStatement(String, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66728');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66728" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareStatement(String, int, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;<br/>Sink parameter 2<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; parameter 2<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66787');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66787" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareStatement(String, int, int, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement;<br/>Sink parameter 3<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement; parameter 3<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66846');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66846" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareStatement(String, int[])<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66917');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66917" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalConnection<br/>In method org.apache.derby.client.am.LogicalConnection.prepareStatement(String, String[])<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalConnection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66988');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.addBatch(Ljava/lang/String;)V can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66988" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.addBatch(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.addBatch(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.addBatch(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67047');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67047" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.execute(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.execute(Ljava/lang/String;)Z parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67106');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.execute(Ljava/lang/String;I)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67106" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.execute(String, int)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.execute(Ljava/lang/String;I)Z<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.execute(Ljava/lang/String;I)Z parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67165');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.execute(Ljava/lang/String;[I)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67165" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.execute(String, int[])<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.execute(Ljava/lang/String;[I)Z<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.execute(Ljava/lang/String;[I)Z parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67224');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.execute(Ljava/lang/String;[Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67224" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.execute(String, String[])<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.execute(Ljava/lang/String;[Ljava/lang/String;)Z<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.execute(Ljava/lang/String;[Ljava/lang/String;)Z parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67283');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67283" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.executeQuery(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67342');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67342" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.executeUpdate(Ljava/lang/String;)I parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67401');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.executeUpdate(Ljava/lang/String;I)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67401" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate(String, int)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.executeUpdate(Ljava/lang/String;I)I<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.executeUpdate(Ljava/lang/String;I)I parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67460');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.executeUpdate(Ljava/lang/String;[I)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67460" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate(String, int[])<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.executeUpdate(Ljava/lang/String;[I)I<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.executeUpdate(Ljava/lang/String;[I)I parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67519');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/PreparedStatement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67519" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.LogicalPreparedStatement<br/>In method org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate(String, String[])<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/PreparedStatement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/LogicalPreparedStatement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67578');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67578" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.ResultSet<br/>In method org.apache.derby.client.am.ResultSet.getPreparedStatementForInsert()<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/ColumnMetaData.sqlxBasename_<br/>Unknown source org/apache/derby/client/am/ResultSet.getTableName()Ljava/lang/String;<br/>Unknown source org/apache/derby/client/am/ColumnMetaData.getColumnName(I)Ljava/lang/String;<br/>Unknown source org/apache/derby/client/am/ResultSet.quoteSqlIdentifier(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source org/apache/derby/client/am/ColumnMetaData.sqlName_<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Unknown source org/apache/derby/client/am/ColumnMetaData.sqlxSchema_<br/>Unknown source org/apache/derby/client/am/ResultSet.buildInsertString()Ljava/lang/String;<br/>Unknown source org/apache/derby/client/am/ResultSet.quoteSqlIdentifier(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67689');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67689" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.StatementCacheInteractor<br/>In method org.apache.derby.client.am.StatementCacheInteractor.prepareCall(String)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/StatementCacheInteractor.prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement; parameter 0<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67760');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67760" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.StatementCacheInteractor<br/>In method org.apache.derby.client.am.StatementCacheInteractor.prepareCall(String, int, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement;<br/>Sink parameter 2<br/>Unknown source org/apache/derby/client/am/StatementCacheInteractor.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement; parameter 2<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67831');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67831" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.StatementCacheInteractor<br/>In method org.apache.derby.client.am.StatementCacheInteractor.prepareCall(String, int, int, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement;<br/>Sink parameter 3<br/>Unknown source org/apache/derby/client/am/StatementCacheInteractor.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement; parameter 3<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67902');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67902" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.StatementCacheInteractor<br/>In method org.apache.derby.client.am.StatementCacheInteractor.prepareStatement(String)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/client/am/StatementCacheInteractor.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67973');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67973" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.StatementCacheInteractor<br/>In method org.apache.derby.client.am.StatementCacheInteractor.prepareStatement(String, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/apache/derby/client/am/StatementCacheInteractor.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68044');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68044" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.StatementCacheInteractor<br/>In method org.apache.derby.client.am.StatementCacheInteractor.prepareStatement(String, int, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;<br/>Sink parameter 2<br/>Unknown source org/apache/derby/client/am/StatementCacheInteractor.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; parameter 2<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68115');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68115" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.client.am.StatementCacheInteractor<br/>In method org.apache.derby.client.am.StatementCacheInteractor.prepareStatement(String, int, int, int)<br/>In &lt;Unknown&gt;<br/>Sink method org/apache/derby/client/am/Connection.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement;<br/>Sink parameter 3<br/>Unknown source org/apache/derby/client/am/StatementCacheInteractor.prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement; parameter 3<br/>Method usage not detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68186');">
<td>
<span class="priority-2">SECSSL</span>
</td>
<td>SSLContext needs to be compatible with TLS 1.2</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68186" style="display: none;">
<a href="#SSL_CONTEXT">Bug type SSL_CONTEXT (click for details)</a>
<br/>In class org.apache.derby.client.net.NaiveTrustManager<br/>In method org.apache.derby.client.net.NaiveTrustManager.getSocketFactory()<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68224');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68224" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.derby.client.net.NaiveTrustManager<br/>In method org.apache.derby.client.net.NaiveTrustManager.checkServerTrusted(X509Certificate[], String)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68262');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68262" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.derby.client.net.NaiveTrustManager<br/>In method org.apache.derby.client.net.NaiveTrustManager.getAcceptedIssuers()<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66073');">
<td>
<span class="priority-2">STAIV</span>
</td>
<td>The initialization vector (IV) is not properly generated</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66073" style="display: none;">
<a href="#STATIC_IV">Bug type STATIC_IV (click for details)</a>
<br/>In class org.apache.derby.client.am.EncryptionManager<br/>In method org.apache.derby.client.am.EncryptionManager.encryptData(byte[], int, byte[], byte[])<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CIPHER_INTEGRITY">CIPHER_INTEGRITY: Cipher with no integrity</a>
</h2>
            
<p>
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the
    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.
</p>
<p>
    The solution is to use a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the
    existing cipher is prone to error <sup><a href="https://moxie.org/blog/the-cryptographic-doom-principle/">[1]</a></sup>. Specifically,
    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic
    functions on the data.
</p>
<p>The following modes are vulnerable because they don't provide a HMAC:<br/>
    - CBC<br/>
    - OFB<br/>
    - CTR<br/>
    - ECB<br/><br/>
    The following snippets code are some examples of vulnerable code.<br/><br/>
    <b>Code at risk:</b><br/>
    <i>AES in CBC mode</i><br/>

    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
    <br/>
    <i>Triple DES with ECB mode</i><br/>

<pre>Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="https://csrc.nist.gov/projects/block-cipher-techniques/bcm/modes-develoment#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="https://moxie.org/blog/the-cryptographic-doom-principle/">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/353.html">CWE-353: Missing Support for Integrity Check</a>
</p>

        
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="PADDING_ORACLE">PADDING_ORACLE: Cipher is susceptible to Padding Oracle</a>
</h2>
            
<p>
    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the
    message if the system exposed the difference between plaintext with invalid padding or valid padding. The distinction between
    valid and invalid padding is usually revealed through distinct error messages being returned for each condition.
</p>
<p>
    <b>Code at risk:</b>
    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://www.infobytesec.com/down/paddingoracle_openjam.pdf">Padding Oracles for the masses (by Matias Soler)</a><br/>
    <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="https://csrc.nist.gov/projects/block-cipher-techniques/bcm/modes-develoment#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="https://capec.mitre.org/data/definitions/463.html">CAPEC: Padding Oracle Crypto Attack</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/696.html">CWE-696: Incorrect Behavior Order</a>
</p>

        
<h2>
<a name="EXTERNAL_CONFIG_CONTROL">EXTERNAL_CONFIG_CONTROL: Potential external control of configuration</a>
</h2>
            
<p>
    Allowing external control of system settings can disrupt service or cause an application
    to behave in unexpected, and potentially malicious ways.
    An attacker could cause an error by providing a nonexistent catalog name
    or connect to an unauthorized portion of the database.
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>conn.setCatalog(request.getParameter("catalog"));</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/15.html">CWE-15: External Control of System or Configuration Setting</a><br/>
</p>

        
<h2>
<a name="DES_USAGE">DES_USAGE: DES is insecure</a>
</h2>
            
<p>
DES is considered strong ciphers for modern applications. Currently, NIST recommends the
usage of AES block ciphers instead of DES.
</p>
<p>
    <b>Example weak code:</b>
<pre>Cipher c = Cipher.getInstance("DES/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Example solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard">NIST Withdraws Outdated Data Encryption Standard</a><br/>
<a href="https://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a>
</p>

        
<h2>
<a name="HARD_CODE_KEY">HARD_CODE_KEY: Hard coded key</a>
</h2>
            
<p>
Cryptographic keys should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded passwords are reported separately by the <i>Hard coded password</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};
SecretKeySpec spec = new SecretKeySpec(key, "AES");
Cipher aes = Cipher.getInstance("AES");
aes.init(Cipher.ENCRYPT_MODE, spec);
return aesCipher.doFinal(secretData);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/321.html">CWE-321: Use of Hard-coded Cryptographic Key</a><br/>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_OUT">PATH_TRAVERSAL_OUT: Potential Path Traversal (file write)</a>
</h2>
            
<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="SSL_CONTEXT">SSL_CONTEXT: Weak SSLContext</a>
</h2>
            
<p>
    <b>Vulnerable Code:</b><br/>

    <pre>SSLContext.getInstance("SSL");</pre>
</p>
<p>
<p><b>Solution:</b><br/>

Upgrade your implementation to the following, and configure <code>https.protocols</code> JVM option to include TLSv1.2:</p>
<pre>SSLContext.getInstance("TLS");</pre>
<p>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https">Diagnosing TLS, SSL, and HTTPS</a>
</p>

        
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        
<h2>
<a name="STATIC_IV">STATIC_IV: Static IV</a>
</h2>
            
<p>
    Initialization vector must be regenerated for each message to be encrypted.
</p>
<p><b>Vulnerable Code:</b></p>
<p>
<pre>
private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};

public void encrypt(String message) throws Exception {

    IvParameterSpec ivSpec = new IvParameterSpec(IV);
[...]
</pre>
<p><b>Solution:</b></p>
<p>
<pre>
public void encrypt(String message) throws Exception {

    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);

    IvParameterSpec ivSpec = new IvParameterSpec(iv);
[...]
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://en.wikipedia.org/wiki/Initialization_vector">Wikipedia: Initialization vector</a><br/>
<a href="https://cwe.mitre.org/data/definitions/329.html">CWE-329: Not Using a Random IV with CBC Mode</a><br/>
<a href="https://defuse.ca/cbcmodeiv.htm">Encryption - CBC Mode IV: Secret or Not?</a>
</p>
            
        </body>
</html>
