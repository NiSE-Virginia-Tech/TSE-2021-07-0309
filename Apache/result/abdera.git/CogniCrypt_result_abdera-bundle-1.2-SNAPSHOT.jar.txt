[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 875.4 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 25 analysis seeds within 1 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 25
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.04

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 26
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.08

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 26
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.12

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 26
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.15

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 27
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 28
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.21

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 30
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 30
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 30
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 30
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 32
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 33
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 34
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 35
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 36
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 37
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 38
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 39
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 41
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 43
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 24 of 45
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 25 of 46
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 26 of 46
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 27 of 46
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 28 of 46
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 29 of 46
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 30 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 31 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 32 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 33 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 34 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 35 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 36 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 37 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 38 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 39 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 40 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 41 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 42 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 43 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 44 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 45 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 46 of 47
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: r17
		Type: java.security.MessageDigest
		Statement: r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer12346)
		Method: <org.apache.abdera.ext.wsse.WSSEAuthScheme: java.lang.String generatePasswordDigest(java.lang.String,java.lang.String,org.apache.abdera.model.AtomDate)>
		SHA-256: 7b34e334c912e77d02d404dc650cae216ae4973cd6808f29ba9767f4231ab4c7
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.apache.abdera.security.util.KeyHelper: javax.crypto.SecretKey generateSecretKey(java.lang.String,int)>
		SHA-256: e77ce6aba6fcaff7c9cc8a7a74ef29251e006d687cfef484005b1621a8939d2
		Secure: true
	Object:
		Variable: r4
		Type: java.security.KeyPairGenerator
		Statement: r4 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer11115)
		Method: <org.apache.abdera.security.util.DHContext: void init()>
		SHA-256: 8fe94e3f434af459dfb6b2c068127cac9c680486e463ed2a5b01194c1160d8a1
		Secure: false
	Object:
		Variable: r5
		Type: java.security.KeyPairGenerator
		Statement: r5 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer11126)
		Method: <org.apache.abdera.security.util.DHContext: void init(java.math.BigInteger,java.math.BigInteger,int,byte[])>
		SHA-256: b26023c4611ef30c20997f5bc9ebbf06db7313b3eb44a7418deabdd9ae8df161
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Mac
		Statement: r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r18)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String sign(java.lang.String,java.lang.String,java.security.cert.Certificate)>
		SHA-256: ba7e3ef4b711d4e2cca3f19bc3919b6940148a6181a090205d494d64e0b77c89
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,int)>(r1, r2, i0)
		Method: <org.apache.abdera.security.util.DHContext: void init(java.math.BigInteger,java.math.BigInteger,int,byte[])>
		SHA-256: b2861d62b4b969ec97331977bd426840aed957f63de9de0c96938d0803bf9395
		Secure: true
	Object:
		Variable: r12
		Type: java.security.MessageDigest
		Statement: r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1342)
		Method: <org.apache.abdera.util.EntityTag: org.apache.abdera.util.EntityTag generate(java.lang.String[])>
		SHA-256: 221bcc7034987b2bbe4c50aefa53e93560f38c4f9ee04797eee8dab5dad7e5f8
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3)
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.KeyStore loadKeystore(java.lang.String,java.lang.String)>
		SHA-256: 2fc7c1b7b4d0b1087ef7b34d762e9fb042cf59c94acda649e6fa922d8f52910a
		Secure: false
	Object:
		Variable: r2
		Type: java.security.SecureRandom
		Statement: r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer11140)
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.KeyPair generateKeyPair(java.lang.String,int)>
		SHA-256: b3685d77a3f12b620e8d4f8394c1a6b61a28e05b76ade5305be2144ca940f24e
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.KeyPair
		Statement: $r6 = virtualinvoke r4.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.apache.abdera.security.util.DHContext: void init()>
		SHA-256: 1049be7f88e65d020a27f0d26bb632c881b738802e2bda5019b1f2c2f32c9090
		Secure: false
	Object:
		Variable: r6
		Type: byte[]
		Statement: r6 = virtualinvoke r5.<javax.crypto.Mac: byte[] doFinal(byte[])>($r20)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String sign(java.lang.String,java.lang.String,java.security.cert.Certificate)>
		SHA-256: 3fd828ce96fa98300d24a78d3099f09a4f64a8bac04a5af2498704d06ed3b173
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.KeyPair
		Statement: $r7 = virtualinvoke r5.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.apache.abdera.security.util.DHContext: void init(java.math.BigInteger,java.math.BigInteger,int,byte[])>
		SHA-256: 826a766e962499a727b66861fd29f9e20abf3b1cf711fa1a59027d04841342ac
		Secure: true
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r8.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String generateNonce()>
		SHA-256: e49edeaa4a1a418068c3a80d817910f0914c9652ea62da2287f94be0d0ba1b7a
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.KeyGenerator
		Statement: r4 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r45)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String sign(java.lang.String,java.lang.String,java.security.cert.Certificate)>
		SHA-256: 575c8498caad89c1335dd4a4d44f4d1732b2de8e49d1e948091007ae7f0e866f
		Secure: true
	Object:
		Variable: $r12
		Type: javax.net.ssl.KeyManager[]
		Statement: $r12 = virtualinvoke r18.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>
		SHA-256: 91e277bfd25db39f336132f1d1a988ca523d9ec2e1c9962314d85ba3654b82a6
		Secure: false
	Object:
		Variable: $r20
		Type: byte[]
		Statement: r6 = virtualinvoke r5.<javax.crypto.Mac: byte[] doFinal(byte[])>($r20)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String sign(java.lang.String,java.lang.String,java.security.cert.Certificate)>
		SHA-256: 5c11d55c4fbae3d22fe642bda977677c0b2ccf91ea4840f21892ba3fce3c7e0a
		Secure: true
	Object:
		Variable: r7
		Type: java.security.KeyStore
		Statement: r7 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r1)
		Method: <org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory: java.security.KeyStore initKeyStore(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: d1c9cff83bd9bfeddedf6c9f14052ed62c75dbb139dac221ff94652eb2fc7bbc
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.KeyPair
		Statement: $r7 = virtualinvoke r5.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.apache.abdera.security.util.DHContext: void init(java.math.BigInteger,java.math.BigInteger,int,byte[])>
		SHA-256: 5dab53b726a9bc381eae316c0991824418fc321db78e7d0cc0b4a39cb4c3d12f
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r8.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.apache.abdera.ext.wsse.WSSEAuthScheme: java.lang.String generateNonce()>
		SHA-256: 9d6d4bfad6bd39b14d8a3a9036147ce10100838bfd6ae9b126abbaae62956886
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.Key generateKey(java.lang.String)>
		SHA-256: aff20ffa1a467872ef07a553b699c2cb39e5899f7bdbfcc809170032cbf41ae1
		Secure: true
	Object:
		Variable: r8
		Type: java.security.SecureRandom
		Statement: r8 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer11990)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String generateNonce()>
		SHA-256: 26ee9f4d5494cadb4221da907e9dc3a0969c8436ea169f3d97d9ee11e3ad35f2
		Secure: true
	Object:
		Variable: r47
		Type: javax.crypto.Cipher
		Statement: r47 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer12000)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String sign(java.lang.String,java.lang.String,java.security.cert.Certificate)>
		SHA-256: c398d79bba50b89c5575ab5f5e0767ff2d42cd8fe219a016ae189a20c1f0cfb3
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.KeyPair
		Statement: $r4 = virtualinvoke r2.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.KeyPair generateKeyPair(java.lang.String,int,java.lang.String)>
		SHA-256: 2569526be1bd32799bb9e83d07eb159e27fe08c254a47954af6c134f303cacfd
		Secure: true
	Object:
		Variable: r4
		Type: javax.net.ssl.SSLContext
		Statement: r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r6)
		Method: <org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>
		SHA-256: 60e3396a65dfa66e48496ecc494a9534936010810e85985f449085845cd0f5dc
		Secure: false
	Object:
		Variable: r48
		Type: byte[]
		Statement: r48 = virtualinvoke r47.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r28)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String sign(java.lang.String,java.lang.String,java.security.cert.Certificate)>
		SHA-256: ceac9c88d595b398db487a724e8f574e0981c83b82fa18bf3bf011b56dc1880e
		Secure: true
	Object:
		Variable: r3
		Type: java.security.SecureRandom
		Statement: r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer11141, r1)
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.KeyPair generateKeyPair(java.lang.String,int,java.lang.String)>
		SHA-256: e5bcf7ed5444086eeb03726e77923c514ee4c57bef3e2c0ced610235dfe05126
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.Key generateKey(java.lang.String)>
		SHA-256: 9097b7c1f1995d4f329927d9b66dced022f21bcd0e7a97963a3d1dd345aafbcc
		Secure: false
	Object:
		Variable: r16
		Type: java.security.KeyStore
		Statement: r16 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer11185)
		Method: <org.apache.abdera.security.util.filters.SignedResponseFilter: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: f50d4e888489c8b8fc99793e689d9c2eb0d84a242fe8f338f249cd0dd1591c80
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyPairGenerator
		Statement: r2 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)>(r0, r1)
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.KeyPair generateKeyPair(java.lang.String,int,java.lang.String)>
		SHA-256: cffb1da2760eb402291f74fa4b5df0db8ea5805310f5c83a2dd7b13a6beeef9
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.Key generateKey(java.lang.String)>
		SHA-256: cc087508470e62757ec351fb6c76069ee564de8b3f5236f988b2a5db0301857b
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.Key generateKey(java.lang.String)>
		SHA-256: a4555db63eb921c34584b0d1b8e39106c3dde289dbefe4caf7bb42d43b56491d
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer221)
		Method: <org.apache.abdera.protocol.client.util.SimpleSSLProtocolSocketFactory: void init(javax.net.ssl.TrustManager)>
		SHA-256: b0a65bcf70474ac2b92409baab3b2fa356c6a40ac1da9f816e0649063ea5bab8
		Secure: false
	Object:
		Variable: r3
		Type: java.security.KeyStore
		Statement: r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r0)
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.KeyStore loadKeystore(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 9319dd8c4c57f81b9fe97735a61532a08e7fb9c3d385c87321f3b627012e244b
		Secure: false
	Object:
		Variable: r18
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r18 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r7)
		Method: <org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>
		SHA-256: c8cea3848e9a8cd9092f39d00f94d9b73dd8735c14508e7b97f15d3c04ac8ac8
		Secure: false
	Object:
		Variable: $r28
		Type: byte[]
		Statement: r48 = virtualinvoke r47.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r28)
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String sign(java.lang.String,java.lang.String,java.security.cert.Certificate)>
		SHA-256: cc3b460bfcf026838d11741c2e7610b05dd9db4bfe5b08dddad76840f640cc76
		Secure: true
	Object:
		Variable: r8
		Type: java.security.SecureRandom
		Statement: r8 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer12347)
		Method: <org.apache.abdera.ext.wsse.WSSEAuthScheme: java.lang.String generateNonce()>
		SHA-256: aa034d707353b1d9e7aada0f8d2f9bcde6f2ea040bcfb40374ab37a31ae2ecce
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.apache.abdera.security.util.KeyHelper: javax.crypto.SecretKey generateSecretKey(java.lang.String,int)>
		SHA-256: a295119cc9b5c6755f935e48abc25e3de5029ebebceaf2846373b8851c926a5e
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.KeyPair
		Statement: $r3 = virtualinvoke r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.KeyPair generateKeyPair(java.lang.String,int)>
		SHA-256: 65dc1080511f5e93ab1906eb84e2f302f6c7c6c3f954effc8dbace37d27d6b9e
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.Key
		Statement: $r11 = virtualinvoke r16.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r3, $r10)
		Method: <org.apache.abdera.security.util.filters.SignedResponseFilter: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: cef9fce40eebeda582a09b680ea608bc028ca5a8d1211155fac9ca500e9711b9
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.PublicKey
		Statement: $r6 = virtualinvoke $r5.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <org.apache.abdera.security.util.DHContext: java.lang.String getResponseString()>
		SHA-256: 44014200bf357328dfbc8c5886f7c564032208e6544b61789ee52e02bb0b3885
		Secure: true
	Object:
		Variable: r14
		Type: byte[]
		Statement: r14 = virtualinvoke r12.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.apache.abdera.util.EntityTag: org.apache.abdera.util.EntityTag generate(java.lang.String[])>
		SHA-256: 9285a3e95040acc81cd7f7da09bb9b57a493dfdb84e468fad29fb972c5b88ca
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.apache.abdera.security.util.KeyHelper: javax.crypto.SecretKey generateSecretKey(java.lang.String,int,java.lang.String)>
		SHA-256: f2608ac04378d1079b5844a01b64f2da8bef5a115efdbc2f3cf3e93aa6734015
		Secure: true
	Object:
		Variable: $r11
		Type: byte[]
		Statement: $r12 = virtualinvoke r17.<java.security.MessageDigest: byte[] digest(byte[])>($r11)
		Method: <org.apache.abdera.ext.wsse.WSSEAuthScheme: java.lang.String generatePasswordDigest(java.lang.String,java.lang.String,org.apache.abdera.model.AtomDate)>
		SHA-256: a4ab9583bf478a72be660b46620ce586c2835ca944b9699ace1051967f1ccf8b
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(r0, r1)
		Method: <org.apache.abdera.security.util.KeyHelper: javax.crypto.SecretKey generateSecretKey(java.lang.String,int,java.lang.String)>
		SHA-256: e0358798d2dfd02f2d2fef524244ace7ab99d460eea81d0c80ad14e69454a0a6
		Secure: true
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r12 = virtualinvoke r17.<java.security.MessageDigest: byte[] digest(byte[])>($r11)
		Method: <org.apache.abdera.ext.wsse.WSSEAuthScheme: java.lang.String generatePasswordDigest(java.lang.String,java.lang.String,org.apache.abdera.model.AtomDate)>
		SHA-256: b8628c7350b774d5e08874c54183b8de5b9e4db1e95887b60029887ba2851ab8
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPairGenerator
		Statement: r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(r0)
		Method: <org.apache.abdera.security.util.KeyHelper: java.security.KeyPair generateKeyPair(java.lang.String,int)>
		SHA-256: fee7a060cb360d0b078cffb5579c9d87a0080b3c44d18aebb618a01b952a2032
		Secure: true
	Object:
		Variable: $r19
		Type: javax.crypto.SecretKey
		Statement: $r19 = virtualinvoke r4.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.apache.abdera.ext.oauth.OAuthScheme: java.lang.String sign(java.lang.String,java.lang.String,java.security.cert.Certificate)>
		SHA-256: 371e4cb16540d722412de16bb393790b6a5bc47ce5541b97a4c3c34062acb4e8
		Secure: true

Findings in Java Class: org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory

	 in Method: java.security.KeyStore initKeyStore(java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #d1c9cff83bd9bfeddedf6c9f14052ed62c75dbb139dac221ff94652eb2fc7bbc)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r7.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r4, $r5)


	 in Method: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r12, r25, varReplacer127)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #c8cea3848e9a8cd9092f39d00f94d9b73dd8735c14508e7b97f15d3c04ac8ac8)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r18.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r10, $r11)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r12, r25, varReplacer127)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r18.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r10, $r11)


Findings in Java Class: org.apache.abdera.protocol.client.util.SimpleSSLProtocolSocketFactory

	 in Method: void init(javax.net.ssl.TrustManager)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer219, $r4, varReplacer219)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer219, $r4, varReplacer219)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #b0a65bcf70474ac2b92409baab3b2fa356c6a40ac1da9f816e0649063ea5bab8)
			First parameter (with value "SSL") should be any of {TLSv1.2}
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer221)


Findings in Java Class: org.apache.abdera.util.EntityTag

	 in Method: org.apache.abdera.util.EntityTag generate(java.lang.String[])
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #221bcc7034987b2bbe4c50aefa53e93560f38c4f9ee04797eee8dab5dad7e5f8)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: r14 = virtualinvoke r12.<java.security.MessageDigest: byte[] digest()>()

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #221bcc7034987b2bbe4c50aefa53e93560f38c4f9ee04797eee8dab5dad7e5f8)
			First parameter (with value "md5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1342)


Findings in Java Class: org.apache.abdera.security.util.KeyHelper

	 in Method: java.security.KeyStore loadKeystore(java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #2fc7c1b7b4d0b1087ef7b34d762e9fb042cf59c94acda649e6fa922d8f52910a)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r10, $r6)


	 in Method: java.security.KeyStore loadKeystore(java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #9319dd8c4c57f81b9fe97735a61532a08e7fb9c3d385c87321f3b627012e244b)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r10, $r6)


Findings in Java Class: org.apache.abdera.security.util.filters.SignedResponseFilter

	 in Method: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #f50d4e888489c8b8fc99793e689d9c2eb0d84a242fe8f338f249cd0dd1591c80)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r16.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r7, $r9)


Findings in Java Class: org.apache.abdera.ext.wsse.WSSEAuthScheme

	 in Method: java.lang.String generatePasswordDigest(java.lang.String,java.lang.String,org.apache.abdera.model.AtomDate)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #7b34e334c912e77d02d404dc650cae216ae4973cd6808f29ba9767f4231ab4c7)
			First parameter (with value "SHA1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer12346)


Findings in Java Class: org.apache.abdera.security.util.DHContext

	 in Method: void init()
		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared D H
			at statement: virtualinvoke r4.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r3)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 47

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 3
	TypestateError: 1
	RequiredPredicateError: 6
	NeverTypeOfError: 5
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 2 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 7.884 s

