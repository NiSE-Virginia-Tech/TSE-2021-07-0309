<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/abdera.git/abdera-extensions-gdata-1.2-SNAPSHOT.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>19735 lines of code analyzed,
	in 342 classes, 
	in 26 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">3</td>
<td align="right">0.15</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">18</td>
<td align="right">0.91</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>21</b>
</td>
<td align="right">
<b>1.06</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">21</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>21</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66368');">
<td>
<span class="priority-2">SECHPP</span>
</td>
<td>Concatenating user-controlled input into a URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66368" style="display: none;">
<a href="#HTTP_PARAMETER_POLLUTION">Bug type HTTP_PARAMETER_POLLUTION (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.MethodHelper<br/>In method org.apache.abdera.protocol.client.util.MethodHelper.createMethod(String, String, RequestEntity, RequestOptions)<br/>At MethodHelper.java:[line 124]<br/>Sink method org/apache/commons/httpclient/methods/GetMethod.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/protocol/client/util/MethodHelper.createMethod(Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/httpclient/methods/RequestEntity;Lorg/apache/abdera/protocol/client/RequestOptions;)Lorg/apache/commons/httpclient/HttpMethod; parameter 2<br/>At GoogleLoginAuthScheme.java:[line 120]<br/>At AbderaClient.java:[line 206]<br/>At AbderaClient.java:[line 216]<br/>At AbderaClient.java:[line 227]<br/>At AbderaClient.java:[line 238]<br/>At AbderaClient.java:[line 249]<br/>At AbderaClient.java:[line 265]<br/>At AbderaClient.java:[line 278]<br/>At AbderaClient.java:[line 292]<br/>At AbderaClient.java:[line 306]<br/>At AbderaClient.java:[line 329]<br/>At AbderaClient.java:[line 340]<br/>At AbderaClient.java:[line 351]<br/>At AbderaClient.java:[line 376]<br/>At AbderaClient.java:[line 386]<br/>At AbderaClient.java:[line 395]<br/>At AbderaClient.java:[line 404]<br/>At AbderaClient.java:[line 414]<br/>At AbderaClient.java:[line 424]<br/>At AbderaClient.java:[line 434]<br/>At AbderaClient.java:[line 444]<br/>At AbderaClient.java:[line 454]<br/>At AbderaClient.java:[line 464]<br/>At AbderaClient.java:[line 474]<br/>At AbderaClient.java:[line 484]<br/>At AbderaClient.java:[line 493]<br/>At AbderaClient.java:[line 605]<br/>At AbderaClient.java:[line 620]<br/>At AbderaClient.java:[line 643]<br/>At AbderaClient.java:[line 671]<br/>At AbderaClient.java:[line 687]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67192');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67192" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.abdera.util.EntityTag<br/>In method org.apache.abdera.util.EntityTag.generate(String[])<br/>At EntityTag.java:[line 225]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65841');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65841" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.i18n.text.data.Generator<br/>In method org.apache.abdera.i18n.text.data.Generator.read(String)<br/>At Generator.java:[line 327]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/i18n/text/data/Generator.read(Ljava/lang/String;)Ljava/util/Scanner; parameter 0<br/>Method usage with tainted arguments detected<br/>At Generator.java:[line 40]<br/>At Generator.java:[line 45]<br/>At Generator.java:[line 310]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66284');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66284" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory<br/>In method org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory.initKeyStore(String, String, String)<br/>At ClientAuthSSLProtocolSocketFactory.java:[line 80]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/protocol/client/util/ClientAuthSSLProtocolSocketFactory.initKeyStore(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyStore; parameter 2<br/>Method usage not detected<br/>At ClientAuthSSLProtocolSocketFactory.java:[line 73]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^(?:(.*)?@)?((?:\\[.*\\])|(?:[^:]*))?(?::(\\d+))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^(?:(.*)?@)?((?:\\[.*\\])|(?:[^:]*))?(?::(\\d+))?<br/>In class org.apache.abdera.i18n.iri.IRI<br/>In method org.apache.abdera.i18n.iri.IRI.&lt;static initializer for IRI&gt;()<br/>At IRI.java:[line 593]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65609');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65609" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?<br/>In class org.apache.abdera.i18n.iri.IRI<br/>In method org.apache.abdera.i18n.iri.IRI.&lt;static initializer for IRI&gt;()<br/>At IRI.java:[line 590]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65667');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^((?:[a-zA-Z]{2,3}(?:[-_][a-zA-Z]{3}){0,3})|[a-zA-Z]{4}|[a-zA-Z]{5,8})((?:[-_][a-zA-Z]{4})?)((?:[-_](?:(?:[a-zA-Z]{2})|(?:[0-9]{3})))?)((?:[-_](?:(?:[a-zA-Z0-9]{5,8})|(?:[0-9][a-zA-Z0-9]{3})))*)((?:[-_][a-wy-zA-WY-Z0-9](?:[-_][a-zA-Z0-9]{2,8})+)*)((?:[-_][xX](?:[-_][a-zA-Z0-9]{2,8})+)?)$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65667" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^((?:[a-zA-Z]{2,3}(?:[-_][a-zA-Z]{3}){0,3})|[a-zA-Z]{4}|[a-zA-Z]{5,8})((?:[-_][a-zA-Z]{4})?)((?:[-_](?:(?:[a-zA-Z]{2})|(?:[0-9]{3})))?)((?:[-_](?:(?:[a-zA-Z0-9]{5,8})|(?:[0-9][a-zA-Z0-9]{3})))*)((?:[-_][a-wy-zA-WY-Z0-9](?:[-_][a-zA-Z0-9]{2,8})+)*)((?:[-_][xX](?:[-_][a-zA-Z0-9]{2,8})+)?)$<br/>In class org.apache.abdera.i18n.rfc4646.Lang<br/>In method org.apache.abdera.i18n.rfc4646.Lang.&lt;static initializer for Lang&gt;()<br/>At Lang.java:[line 346]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65725');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^((?:[a-zA-Z]{2,3}(?:[-_](?:[a-zA-Z]{3}|\\*)){0,3})|[a-zA-Z]{4}|[a-zA-Z]{5,8}|\\*)((?:[-_](?:[a-zA-Z]{4}|\\*))?)((?:[-_](?:(?:[a-zA-Z]{2})|(?:[0-9]{3})|\\*))?)((?:[-_](?:(?:[a-zA-Z0-9]{5,8})|(?:[0-9][a-zA-Z0-9]{3})|\\*))*)((?:[-_](?:(?:[a-wy-zA-WY-Z0-9](?:[-_][a-zA-Z0-9]{2,8})+)|\\*))*)((?:[-_](?:[xX](?:[-_][a-zA-Z0-9]{2,8})+)+|\\*)?)$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65725" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^((?:[a-zA-Z]{2,3}(?:[-_](?:[a-zA-Z]{3}|\\*)){0,3})|[a-zA-Z]{4}|[a-zA-Z]{5,8}|\\*)((?:[-_](?:[a-zA-Z]{4}|\\*))?)((?:[-_](?:(?:[a-zA-Z]{2})|(?:[0-9]{3})|\\*))?)((?:[-_](?:(?:[a-zA-Z0-9]{5,8})|(?:[0-9][a-zA-Z0-9]{3})|\\*))*)((?:[-_](?:(?:[a-wy-zA-WY-Z0-9](?:[-_][a-zA-Z0-9]{2,8})+)|\\*))*)((?:[-_](?:[xX](?:[-_][a-zA-Z0-9]{2,8})+)+|\\*)?)$<br/>In class org.apache.abdera.i18n.rfc4646.Range<br/>In method org.apache.abdera.i18n.rfc4646.Range.&lt;static initializer for Range&gt;()<br/>At Range.java:[line 322]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65783');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(?:-([^\\|]+)\\|)?(?:([^\\|]+)\\|)?(.*)" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65783" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (?:-([^\\|]+)\\|)?(?:([^\\|]+)\\|)?(.*)<br/>In class org.apache.abdera.i18n.templates.Evaluator<br/>In method org.apache.abdera.i18n.templates.Evaluator.&lt;static initializer for Evaluator&gt;()<br/>At Evaluator.java:[line 30]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66064');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(\\d{4})(?:-(\\d{2}))?(?:-(\\d{2}))?(?:([Tt])?(?:(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(?:\\.(\\d{3}))?)?([Zz])?(?:([+-])(\\d{2}):(\\d{2}))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66064" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (\\d{4})(?:-(\\d{2}))?(?:-(\\d{2}))?(?:([Tt])?(?:(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(?:\\.(\\d{3}))?)?([Zz])?(?:([+-])(\\d{2}):(\\d{2}))?<br/>In class org.apache.abdera.model.AtomDate<br/>In method org.apache.abdera.model.AtomDate.&lt;static initializer for AtomDate&gt;()<br/>At AtomDate.java:[line 241]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66961');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "\\s*([\\w\\-]+)\\s*(=)?\\s*(\\d+|\\"([^"\\\\]*(\\\\.[^"\\\\]*)*)+\\")?\\s*" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66961" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value \\s*([\\w\\-]+)\\s*(=)?\\s*(\\d+|\\"([^"\\\\]*(\\\\.[^"\\\\]*)*)+\\")?\\s*<br/>In class org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser<br/>In method org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.&lt;static initializer for CacheControlParser&gt;()<br/>At CacheControlUtil.java:[line 189]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66908');">
<td>
<span class="priority-2">SECSSL</span>
</td>
<td>SSLContext needs to be compatible with TLS 1.2</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66908" style="display: none;">
<a href="#SSL_CONTEXT">Bug type SSL_CONTEXT (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.SimpleSSLProtocolSocketFactory<br/>In method org.apache.abdera.protocol.client.util.SimpleSSLProtocolSocketFactory.init(TrustManager)<br/>At SimpleSSLProtocolSocketFactory.java:[line 46]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65945');">
<td>
<span class="priority-1">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65945" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.abdera.i18n.text.data.Generator<br/>In method org.apache.abdera.i18n.text.data.Generator.read(String)<br/>At Generator.java:[line 334]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/i18n/text/data/Generator.read(Ljava/lang/String;)Ljava/util/Scanner; parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Method usage with tainted arguments detected<br/>At Generator.java:[line 40]<br/>At Generator.java:[line 45]<br/>At Generator.java:[line 310]<br/>At Generator.java:[line 333]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67019');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67019" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.abdera.util.Discover<br/>In method org.apache.abdera.util.Discover.locateResourceAsStream(String, ClassLoader, Class)<br/>At Discover.java:[line 263]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/util/Discover.locateResource(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/Class;)Ljava/net/URL;<br/>At Discover.java:[line 261]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67098');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67098" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.abdera.util.Discover$DefaultLoader<br/>In method org.apache.abdera.util.Discover$DefaultLoader.init(boolean)<br/>At Discover.java:[line 103]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/util/Discover.locateResources(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/Class;)Ljava/util/Enumeration;<br/>Unknown source java/util/Enumeration.nextElement()Ljava/lang/Object;<br/>At Discover.java:[line 98]<br/>At Discover.java:[line 103]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66746');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66746" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.NonOpTrustManager<br/>In method org.apache.abdera.protocol.client.util.NonOpTrustManager.checkClientTrusted(X509Certificate[], String)<br/>At NonOpTrustManager.java:[line 28]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66800');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66800" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.NonOpTrustManager<br/>In method org.apache.abdera.protocol.client.util.NonOpTrustManager.checkServerTrusted(X509Certificate[], String)<br/>At NonOpTrustManager.java:[line 31]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66854');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66854" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.NonOpTrustManager<br/>In method org.apache.abdera.protocol.client.util.NonOpTrustManager.getAcceptedIssuers()<br/>At NonOpTrustManager.java:[line 34]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66122');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66122" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.abdera.parser.stax.util.FOMSniffingInputStream<br/>In method org.apache.abdera.parser.stax.util.FOMSniffingInputStream.detectEncoding()<br/>At FOMSniffingInputStream.java:[line 45]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66176');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66176" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.abdera.parser.stax.util.FOMXmlVersionInputStream<br/>In method org.apache.abdera.parser.stax.util.FOMXmlVersionInputStream.detectVersion()<br/>At FOMXmlVersionInputStream.java:[line 55]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66230');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66230" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.abdera.parser.stax.util.FOMXmlVersionReader<br/>In method org.apache.abdera.parser.stax.util.FOMXmlVersionReader.detectVersion()<br/>At FOMXmlVersionReader.java:[line 49]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="HTTP_PARAMETER_POLLUTION">HTTP_PARAMETER_POLLUTION: HTTP Parameter Pollution</a>
</h2>
            
<p>
Concatenating unvalidated user input into a URL can allow an attacker to override the value of a request parameter. Attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user may compromise the logic of the application to perform either client-side or server-side attacks.<br/>
In the following example the programmer has not considered the possibility that an attacker could provide a parameter <code>lang</code> such as <code>en&user_id=1</code>, which would enable him to change the <code>user_id</code> at will.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>String lang = request.getParameter("lang");
GetMethod get = new GetMethod("http://www.host.com");
get.setQueryString("lang=" + lang + "&user_id=" + user_id);
get.execute();</pre>
<p>
    <b>Solution:</b><br/>
Sanitize user input before using it in HTTP parameters.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://capec.mitre.org/data/definitions/460.html">CAPEC-460: HTTP Parameter Pollution (HPP)</a>
</p>
            
        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
</h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        
<h2>
<a name="SSL_CONTEXT">SSL_CONTEXT: Weak SSLContext</a>
</h2>
            
<p>
    <b>Vulnerable Code:</b><br/>

    <pre>SSLContext.getInstance("SSL");</pre>
</p>
<p>
<p><b>Solution:</b><br/>

Upgrade your implementation to the following, and configure <code>https.protocols</code> JVM option to include TLSv1.2:</p>
<pre>SSLContext.getInstance("TLS");</pre>
<p>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https">Diagnosing TLS, SSL, and HTTPS</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        
<h2>
<a name="XXE_XMLSTREAMREADER">XXE_XMLSTREAMREADER: XML parsing vulnerable to XXE (XMLStreamReader)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution disabling External Entities:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://openjdk.java.net/jeps/185">JEP 185: Restrict Fetching of External XML Resources</a>
</p>

        </body>
</html>
