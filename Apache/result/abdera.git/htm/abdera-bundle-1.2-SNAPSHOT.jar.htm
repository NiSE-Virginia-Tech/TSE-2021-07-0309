<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/abdera.git/abdera-bundle-1.2-SNAPSHOT.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>82807 lines of code analyzed,
	in 1699 classes, 
	in 157 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">6</td>
<td align="right">0.07</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">87</td>
<td align="right">1.05</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>93</b>
</td>
<td align="right">
<b>1.12</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">93</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>93</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67042');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67042" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class org.apache.abdera.ext.oauth.OAuthScheme<br/>In method org.apache.abdera.ext.oauth.OAuthScheme.sign(String, String, Certificate)<br/>At OAuthScheme.java:[line 210]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71067');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71067" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.axiom.om.util.CommonUtils<br/>In method org.apache.axiom.om.util.CommonUtils.stackToString(Throwable)<br/>At CommonUtils.java:[line 91]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71121');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71121" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.axiom.om.util.DetachableInputStream<br/>In method org.apache.axiom.om.util.DetachableInputStream.stackToString(Throwable)<br/>At DetachableInputStream.java:[line 189]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72050');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72050" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.axiom.soap.impl.llom.SOAPFaultImpl<br/>In method org.apache.axiom.soap.impl.llom.SOAPFaultImpl.putExceptionToSOAPFault(Exception)<br/>At SOAPFaultImpl.java:[line 106]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72104');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72104" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.axiom.soap.impl.llom.SOAPHeaderImpl<br/>In method org.apache.axiom.soap.impl.llom.SOAPHeaderImpl.exceptionToString(Throwable)<br/>At SOAPHeaderImpl.java:[line 205]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N73247');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N73247" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.jaxen.JaxenRuntimeException<br/>In method org.jaxen.JaxenRuntimeException.printStackTrace(PrintStream)<br/>At JaxenRuntimeException.java:[line 128]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N73301');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N73301" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.jaxen.JaxenRuntimeException<br/>In method org.jaxen.JaxenRuntimeException.printStackTrace(PrintWriter)<br/>At JaxenRuntimeException.java:[line 142]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N73413');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N73413" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.jaxen.saxpath.SAXPathException<br/>In method org.jaxen.saxpath.SAXPathException.printStackTrace(PrintStream)<br/>At SAXPathException.java:[line 154]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N73467');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N73467" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.jaxen.saxpath.SAXPathException<br/>In method org.jaxen.saxpath.SAXPathException.printStackTrace(PrintWriter)<br/>At SAXPathException.java:[line 168]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71343');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71343" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.loadFactoryProperties(String)<br/>At StAXUtils.java:[line 408]<br/>Sink method org/apache/commons/logging/Log.debug(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/util/StAXUtils.loadFactoryProperties(Ljava/lang/String;)Ljava/util/Map; parameter 0<br/>Tainted source java/util/Iterator.next()Ljava/lang/Object;<br/>Tainted source java/util/Map$Entry.getValue()Ljava/lang/Object;<br/>Tainted source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Tainted source java/util/Map.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source java/util/Properties.entrySet()Ljava/util/Set;<br/>At StAXUtils.java:[line 389]<br/>At StAXUtils.java:[line 390]<br/>At StAXUtils.java:[line 391]<br/>At StAXUtils.java:[line 392]<br/>At StAXUtils.java:[line 405]<br/>At StAXUtils.java:[line 408]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71502');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.error(Ljava/lang/Object;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71502" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.loadFactoryProperties(String)<br/>At StAXUtils.java:[line 412]<br/>Sink method org/apache/commons/logging/Log.error(Ljava/lang/Object;Ljava/lang/Throwable;)V<br/>Sink parameter 1<br/>Unknown source org/apache/axiom/om/util/StAXUtils.loadFactoryProperties(Ljava/lang/String;)Ljava/util/Map; parameter 0<br/>Tainted source java/util/Iterator.next()Ljava/lang/Object;<br/>Tainted source java/util/Map$Entry.getValue()Ljava/lang/Object;<br/>Tainted source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Tainted source java/util/Map.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source java/util/Properties.entrySet()Ljava/util/Set;<br/>At StAXUtils.java:[line 389]<br/>At StAXUtils.java:[line 390]<br/>At StAXUtils.java:[line 391]<br/>At StAXUtils.java:[line 392]<br/>At StAXUtils.java:[line 405]<br/>At StAXUtils.java:[line 408]<br/>At StAXUtils.java:[line 412]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67096');">
<td>
<span class="priority-2">SECHPP</span>
</td>
<td>Concatenating user-controlled input into a URL</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67096" style="display: none;">
<a href="#HTTP_PARAMETER_POLLUTION">Bug type HTTP_PARAMETER_POLLUTION (click for details)</a>
<br/>In class org.apache.abdera.ext.oauth.OAuthScheme<br/>In method org.apache.abdera.ext.oauth.OAuthScheme.resolveMethod(String, String)<br/>At OAuthScheme.java:[line 125]<br/>Sink method org/apache/commons/httpclient/methods/GetMethod.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/ext/oauth/OAuthScheme.resolveMethod(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/commons/httpclient/HttpMethod; parameter 0<br/>Method usage not detected<br/>At OAuthScheme.java:[line 76]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68170');">
<td>
<span class="priority-1">SECHPP</span>
</td>
<td>Concatenating user-controlled input into a URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68170" style="display: none;">
<a href="#HTTP_PARAMETER_POLLUTION">Bug type HTTP_PARAMETER_POLLUTION (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.MethodHelper<br/>In method org.apache.abdera.protocol.client.util.MethodHelper.createMethod(String, String, RequestEntity, RequestOptions)<br/>At MethodHelper.java:[line 124]<br/>Sink method org/apache/commons/httpclient/methods/GetMethod.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/protocol/client/util/MethodHelper.createMethod(Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/httpclient/methods/RequestEntity;Lorg/apache/abdera/protocol/client/RequestOptions;)Lorg/apache/commons/httpclient/HttpMethod; parameter 2<br/>Method usage with tainted arguments detected<br/>At GoogleLoginAuthScheme.java:[line 120]<br/>At HtmlHelper.java:[line 143]<br/>At HtmlHelper.java:[line 148]<br/>At JSONServlet.java:[line 61]<br/>At JSONServlet.java:[line 63]<br/>At JSONServlet.java:[line 68]<br/>At JSONServlet.java:[line 83]<br/>At AbderaClient.java:[line 206]<br/>At AbderaClient.java:[line 216]<br/>At AbderaClient.java:[line 227]<br/>At AbderaClient.java:[line 238]<br/>At AbderaClient.java:[line 249]<br/>At AbderaClient.java:[line 265]<br/>At AbderaClient.java:[line 278]<br/>At AbderaClient.java:[line 292]<br/>At AbderaClient.java:[line 306]<br/>At AbderaClient.java:[line 329]<br/>At AbderaClient.java:[line 340]<br/>At AbderaClient.java:[line 351]<br/>At AbderaClient.java:[line 376]<br/>At AbderaClient.java:[line 386]<br/>At AbderaClient.java:[line 395]<br/>At AbderaClient.java:[line 404]<br/>At AbderaClient.java:[line 414]<br/>At AbderaClient.java:[line 424]<br/>At AbderaClient.java:[line 434]<br/>At AbderaClient.java:[line 444]<br/>At AbderaClient.java:[line 454]<br/>At AbderaClient.java:[line 464]<br/>At AbderaClient.java:[line 474]<br/>At AbderaClient.java:[line 484]<br/>At AbderaClient.java:[line 493]<br/>At AbderaClient.java:[line 605]<br/>At AbderaClient.java:[line 620]<br/>At AbderaClient.java:[line 643]<br/>At AbderaClient.java:[line 671]<br/>At AbderaClient.java:[line 687]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67179');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67179" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.abdera.ext.oauth.OAuthScheme<br/>In method org.apache.abdera.ext.oauth.OAuthScheme.sign(String, String, Certificate)<br/>At OAuthScheme.java:[line 202]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70271');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70271" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.abdera.util.EntityTag<br/>In method org.apache.abdera.util.EntityTag.generate(String[])<br/>At EntityTag.java:[line 225]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72158');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72158" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.axiom.util.UIDGenerator<br/>In method org.apache.axiom.util.UIDGenerator.&lt;static initializer for UIDGenerator&gt;()<br/>At UIDGenerator.java:[line 83]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.ctc.wstx.util.URLUtil<br/>In method com.ctc.wstx.util.URLUtil.optimizedStreamFromURL(URL)<br/>At URLUtil.java:[line 110]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/ctc/wstx/util/URLUtil.optimizedStreamFromURL(Ljava/net/URL;)Ljava/io/InputStream; parameter 0<br/>Unknown source java/net/URL.getPath()Ljava/lang/String;<br/>At DTDSchemaFactory.java:[line 129]<br/>At ExtEntity.java:[line 48]<br/>At ParsedExtEntity.java:[line 77]<br/>At DefaultInputResolver.java:[line 77]<br/>At DefaultInputResolver.java:[line 85]<br/>At DefaultInputResolver.java:[line 95]<br/>At DefaultInputResolver.java:[line 96]<br/>At DefaultInputResolver.java:[line 115]<br/>At DefaultInputResolver.java:[line 147]<br/>At DefaultInputResolver.java:[line 160]<br/>At DefaultInputResolver.java:[line 222]<br/>At DefaultInputResolver.java:[line 231]<br/>At DefaultInputResolver.java:[line 256]<br/>At RelaxNGSchemaFactory.java:[line 127]<br/>At RelaxNGSchemaFactory.java:[line 140]<br/>At WstxSAXParser.java:[line 402]<br/>At WstxSAXParser.java:[line 403]<br/>At ValidatingStreamReader.java:[line 358]<br/>At ValidatingStreamReader.java:[line 468]<br/>At WstxInputFactory.java:[line 434]<br/>At WstxInputFactory.java:[line 454]<br/>At WstxInputFactory.java:[line 637]<br/>At WstxInputFactory.java:[line 700]<br/>At WstxInputFactory.java:[line 762]<br/>At URLUtil.java:[line 37]<br/>At URLUtil.java:[line 53]<br/>At URLUtil.java:[line 57]<br/>At URLUtil.java:[line 59]<br/>At URLUtil.java:[line 70]<br/>At URLUtil.java:[line 73]<br/>At URLUtil.java:[line 110]<br/>At Stax2Source.java:[line 55]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65945');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65945" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.ctc.wstx.util.URLUtil<br/>In method com.ctc.wstx.util.URLUtil.urlFromSystemId(String)<br/>At URLUtil.java:[line 48]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/ctc/wstx/util/URLUtil.urlFromSystemId(Ljava/lang/String;)Ljava/net/URL; parameter 0<br/>At FullDTDReader.java:[line 1115]<br/>At FullDTDReader.java:[line 1126]<br/>At FullDTDReader.java:[line 1136]<br/>At FullDTDReader.java:[line 1271]<br/>At FullDTDReader.java:[line 1651]<br/>At FullDTDReader.java:[line 1655]<br/>At ParsedExtEntity.java:[line 77]<br/>At DefaultInputResolver.java:[line 85]<br/>At DefaultInputResolver.java:[line 95]<br/>At DefaultInputResolver.java:[line 115]<br/>At DefaultInputResolver.java:[line 156]<br/>At DefaultInputResolver.java:[line 222]<br/>At DefaultInputResolver.java:[line 282]<br/>At DefaultInputResolver.java:[line 300]<br/>At DefaultInputResolver.java:[line 320]<br/>At WstxSAXParser.java:[line 402]<br/>At WstxSAXParser.java:[line 431]<br/>At WstxSAXParser.java:[line 991]<br/>At WstxSAXParser.java:[line 1011]<br/>At StreamScanner.java:[line 1496]<br/>At StreamScanner.java:[line 1523]<br/>At StreamScanner.java:[line 1555]<br/>At StreamScanner.java:[line 1653]<br/>At StreamScanner.java:[line 1880]<br/>At StreamScanner.java:[line 1900]<br/>At StreamScanner.java:[line 1947]<br/>At StreamScanner.java:[line 1985]<br/>At StreamScanner.java:[line 1989]<br/>At StreamScanner.java:[line 1994]<br/>At ValidatingStreamReader.java:[line 358]<br/>At ValidatingStreamReader.java:[line 436]<br/>At ValidatingStreamReader.java:[line 530]<br/>At ValidatingStreamReader.java:[line 532]<br/>At ValidatingStreamReader.java:[line 558]<br/>At MinimalInputFactory.java:[line 227]<br/>At MinimalInputFactory.java:[line 233]<br/>At MinimalInputFactory.java:[line 339]<br/>At MinimalInputFactory.java:[line 395]<br/>At WstxInputFactory.java:[line 293]<br/>At WstxInputFactory.java:[line 301]<br/>At WstxInputFactory.java:[line 348]<br/>At WstxInputFactory.java:[line 355]<br/>At WstxInputFactory.java:[line 599]<br/>At WstxInputFactory.java:[line 619]<br/>At WstxInputFactory.java:[line 629]<br/>At WstxInputFactory.java:[line 660]<br/>At WstxInputFactory.java:[line 700]<br/>At WstxInputFactory.java:[line 762]<br/>At WstxInputFactory.java:[line 770]<br/>At SymbolTable.java:[line 367]<br/>At SymbolTable.java:[line 387]<br/>At SymbolTable.java:[line 408]<br/>At SymbolTable.java:[line 410]<br/>At SymbolTable.java:[line 686]<br/>At SymbolTable.java:[line 690]<br/>At SymbolTable.java:[line 708]<br/>At URLUtil.java:[line 70]<br/>At Stax2Source.java:[line 55]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67643');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67643" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.i18n.text.data.Generator<br/>In method org.apache.abdera.i18n.text.data.Generator.read(String)<br/>At Generator.java:[line 327]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/i18n/text/data/Generator.read(Ljava/lang/String;)Ljava/util/Scanner; parameter 0<br/>Method usage with tainted arguments detected<br/>At Generator.java:[line 40]<br/>At Generator.java:[line 45]<br/>At Generator.java:[line 310]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68086');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68086" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory<br/>In method org.apache.abdera.protocol.client.util.ClientAuthSSLProtocolSocketFactory.initKeyStore(String, String, String)<br/>At ClientAuthSSLProtocolSocketFactory.java:[line 80]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/protocol/client/util/ClientAuthSSLProtocolSocketFactory.initKeyStore(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyStore; parameter 2<br/>Method usage not detected<br/>At ClientAuthSSLProtocolSocketFactory.java:[line 73]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68828');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68828" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.protocol.server.adapters.filesystem.FilesystemAdapter<br/>In method org.apache.abdera.protocol.server.adapters.filesystem.FilesystemAdapter.getFile(String, boolean)<br/>At FilesystemAdapter.java:[line 200]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/protocol/server/adapters/filesystem/FilesystemAdapter.getFile(Ljava/lang/String;Z)Ljava/io/File; parameter 1<br/>At CharUtils.java:[line 240]<br/>At CharUtils.java:[line 257]<br/>At CharUtils.java:[line 259]<br/>At Normalizer.java:[line 71]<br/>At Normalizer.java:[line 86]<br/>At Sanitizer.java:[line 45]<br/>At Sanitizer.java:[line 61]<br/>At Sanitizer.java:[line 64]<br/>At Sanitizer.java:[line 68]<br/>At Sanitizer.java:[line 70]<br/>At Sanitizer.java:[line 72]<br/>At UrlEncoding.java:[line 247]<br/>At UrlEncoding.java:[line 254]<br/>At UrlEncoding.java:[line 301]<br/>At UrlEncoding.java:[line 308]<br/>At UrlEncoding.java:[line 317]<br/>At FilesystemAdapter.java:[line 142]<br/>At FilesystemAdapter.java:[line 151]<br/>At FilesystemAdapter.java:[line 163]<br/>At FilesystemAdapter.java:[line 165]<br/>At FilesystemAdapter.java:[line 196]<br/>At FilesystemAdapter.java:[line 211]<br/>At FilesystemAdapter.java:[line 220]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69127');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69127" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.protocol.server.adapters.filesystem.FilesystemAdapter<br/>In method org.apache.abdera.protocol.server.adapters.filesystem.FilesystemAdapter.getRoot()<br/>At FilesystemAdapter.java:[line 65]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/protocol/server/provider/managed/FeedConfiguration.optionalProperties<br/>Unknown source org/apache/abdera/protocol/server/provider/managed/FeedConfiguration.getProperty(Ljava/lang/String;)Ljava/lang/Object;<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>At FilesystemAdapter.java:[line 64]<br/>At FeedConfiguration.java:[line 126]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69396');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69396" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.protocol.server.provider.managed.Configuration<br/>In method org.apache.abdera.protocol.server.provider.managed.Configuration.loadFileAsProperties(String)<br/>At Configuration.java:[line 29]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/protocol/server/provider/managed/Configuration.loadFileAsProperties(Ljava/lang/String;)Ljava/util/Properties; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69528');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69528" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.security.util.KeyHelper<br/>In method org.apache.abdera.security.util.KeyHelper.loadKeystore(String, String)<br/>At KeyHelper.java:[line 57]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/security/util/KeyHelper.loadKeystore(Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyStore; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69602');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69602" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.abdera.security.util.KeyHelper<br/>In method org.apache.abdera.security.util.KeyHelper.loadKeystore(String, String, String)<br/>At KeyHelper.java:[line 67]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/security/util/KeyHelper.loadKeystore(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyStore; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70329');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70329" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.attachments.AttachmentCacheMonitor<br/>In method org.apache.axiom.attachments.AttachmentCacheMonitor._deleteFile(String)<br/>At AttachmentCacheMonitor.java:[line 267]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/attachments/AttachmentCacheMonitor._deleteFile(Ljava/lang/String;)Ljava/lang/Boolean; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70403');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70403" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl<br/>In method org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl.create(String)<br/>At LifecycleManagerImpl.java:[line 54]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/attachments/lifecycle/impl/LifecycleManagerImpl.create(Ljava/lang/String;)Lorg/apache/axiom/attachments/lifecycle/impl/FileAccessor; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70477');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70477" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl<br/>In method org.apache.axiom.attachments.lifecycle.impl.LifecycleManagerImpl.create(String)<br/>At LifecycleManagerImpl.java:[line 68]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/util/UIDGenerator.generateUID()Ljava/lang/String;<br/>At LifecycleManagerImpl.java:[line 65]<br/>At LifecycleManagerImpl.java:[line 67]<br/>At UIDGenerator.java:[line 221]<br/>At UIDGenerator.java:[line 222]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70586');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70586" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.blob.TempFileBlobFactory<br/>In method org.apache.axiom.blob.TempFileBlobFactory.createTempFile()<br/>At TempFileBlobFactory.java:[line 40]<br/>Sink method java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/blob/TempFileBlobFactory.tempDirectory<br/>At TempFileBlobFactory.java:[line 40]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70723');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70723" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.om.impl.builder.StAXOMBuilder<br/>In method new org.apache.axiom.om.impl.builder.StAXOMBuilder(String)<br/>At StAXOMBuilder.java:[line 155]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/impl/builder/StAXOMBuilder.&lt;init&gt;(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70797');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70797" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.om.impl.builder.XOPAwareStAXOMBuilder<br/>In method new org.apache.axiom.om.impl.builder.XOPAwareStAXOMBuilder(String, Attachments)<br/>At XOPAwareStAXOMBuilder.java:[line 80]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/impl/builder/XOPAwareStAXOMBuilder.&lt;init&gt;(Ljava/lang/String;Lorg/apache/axiom/attachments/Attachments;)V parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71887');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71887" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.axiom.om.xpath.DocumentNavigator<br/>In method org.apache.axiom.om.xpath.DocumentNavigator.getDocument(String)<br/>At DocumentNavigator.java:[line 547]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/xpath/DocumentNavigator.getDocument(Ljava/lang/String;)Ljava/lang/Object; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N73084');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N73084" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.codehaus.stax2.io.Stax2URLSource<br/>In method org.codehaus.stax2.io.Stax2URLSource.constructInputStream()<br/>At Stax2URLSource.java:[line 53]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/codehaus/stax2/io/Stax2URLSource.mURL<br/>Unknown source java/net/URL.getPath()Ljava/lang/String;<br/>At Stax2URLSource.java:[line 53]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69676');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69676" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.abdera.security.util.KeyHelper<br/>In method org.apache.abdera.security.util.KeyHelper.saveKeystore(KeyStore, String, String)<br/>At KeyHelper.java:[line 49]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/security/util/KeyHelper.saveKeystore(Ljava/security/KeyStore;Ljava/lang/String;Ljava/lang/String;)V parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67353');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^(?:(.*)?@)?((?:\\[.*\\])|(?:[^:]*))?(?::(\\d+))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67353" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^(?:(.*)?@)?((?:\\[.*\\])|(?:[^:]*))?(?::(\\d+))?<br/>In class org.apache.abdera.i18n.iri.IRI<br/>In method org.apache.abdera.i18n.iri.IRI.&lt;static initializer for IRI&gt;()<br/>At IRI.java:[line 593]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67411');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67411" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?<br/>In class org.apache.abdera.i18n.iri.IRI<br/>In method org.apache.abdera.i18n.iri.IRI.&lt;static initializer for IRI&gt;()<br/>At IRI.java:[line 590]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67469');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^((?:[a-zA-Z]{2,3}(?:[-_][a-zA-Z]{3}){0,3})|[a-zA-Z]{4}|[a-zA-Z]{5,8})((?:[-_][a-zA-Z]{4})?)((?:[-_](?:(?:[a-zA-Z]{2})|(?:[0-9]{3})))?)((?:[-_](?:(?:[a-zA-Z0-9]{5,8})|(?:[0-9][a-zA-Z0-9]{3})))*)((?:[-_][a-wy-zA-WY-Z0-9](?:[-_][a-zA-Z0-9]{2,8})+)*)((?:[-_][xX](?:[-_][a-zA-Z0-9]{2,8})+)?)$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67469" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^((?:[a-zA-Z]{2,3}(?:[-_][a-zA-Z]{3}){0,3})|[a-zA-Z]{4}|[a-zA-Z]{5,8})((?:[-_][a-zA-Z]{4})?)((?:[-_](?:(?:[a-zA-Z]{2})|(?:[0-9]{3})))?)((?:[-_](?:(?:[a-zA-Z0-9]{5,8})|(?:[0-9][a-zA-Z0-9]{3})))*)((?:[-_][a-wy-zA-WY-Z0-9](?:[-_][a-zA-Z0-9]{2,8})+)*)((?:[-_][xX](?:[-_][a-zA-Z0-9]{2,8})+)?)$<br/>In class org.apache.abdera.i18n.rfc4646.Lang<br/>In method org.apache.abdera.i18n.rfc4646.Lang.&lt;static initializer for Lang&gt;()<br/>At Lang.java:[line 346]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67527');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "^((?:[a-zA-Z]{2,3}(?:[-_](?:[a-zA-Z]{3}|\\*)){0,3})|[a-zA-Z]{4}|[a-zA-Z]{5,8}|\\*)((?:[-_](?:[a-zA-Z]{4}|\\*))?)((?:[-_](?:(?:[a-zA-Z]{2})|(?:[0-9]{3})|\\*))?)((?:[-_](?:(?:[a-zA-Z0-9]{5,8})|(?:[0-9][a-zA-Z0-9]{3})|\\*))*)((?:[-_](?:(?:[a-wy-zA-WY-Z0-9](?:[-_][a-zA-Z0-9]{2,8})+)|\\*))*)((?:[-_](?:[xX](?:[-_][a-zA-Z0-9]{2,8})+)+|\\*)?)$" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67527" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ^((?:[a-zA-Z]{2,3}(?:[-_](?:[a-zA-Z]{3}|\\*)){0,3})|[a-zA-Z]{4}|[a-zA-Z]{5,8}|\\*)((?:[-_](?:[a-zA-Z]{4}|\\*))?)((?:[-_](?:(?:[a-zA-Z]{2})|(?:[0-9]{3})|\\*))?)((?:[-_](?:(?:[a-zA-Z0-9]{5,8})|(?:[0-9][a-zA-Z0-9]{3})|\\*))*)((?:[-_](?:(?:[a-wy-zA-WY-Z0-9](?:[-_][a-zA-Z0-9]{2,8})+)|\\*))*)((?:[-_](?:[xX](?:[-_][a-zA-Z0-9]{2,8})+)+|\\*)?)$<br/>In class org.apache.abdera.i18n.rfc4646.Range<br/>In method org.apache.abdera.i18n.rfc4646.Range.&lt;static initializer for Range&gt;()<br/>At Range.java:[line 322]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67585');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(?:-([^\\|]+)\\|)?(?:([^\\|]+)\\|)?(.*)" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67585" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (?:-([^\\|]+)\\|)?(?:([^\\|]+)\\|)?(.*)<br/>In class org.apache.abdera.i18n.templates.Evaluator<br/>In method org.apache.abdera.i18n.templates.Evaluator.&lt;static initializer for Evaluator&gt;()<br/>At Evaluator.java:[line 30]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67866');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(\\d{4})(?:-(\\d{2}))?(?:-(\\d{2}))?(?:([Tt])?(?:(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(?:\\.(\\d{3}))?)?([Zz])?(?:([+-])(\\d{2}):(\\d{2}))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67866" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (\\d{4})(?:-(\\d{2}))?(?:-(\\d{2}))?(?:([Tt])?(?:(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(?:\\.(\\d{3}))?)?([Zz])?(?:([+-])(\\d{2}):(\\d{2}))?<br/>In class org.apache.abdera.model.AtomDate<br/>In method org.apache.abdera.model.AtomDate.&lt;static initializer for AtomDate&gt;()<br/>At AtomDate.java:[line 241]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69470');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "\\s*([\\w\\-]+)\\s*(=)?\\s*(\\d+|\\"([^"\\\\]*(\\\\.[^"\\\\]*)*)+\\")?\\s*" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69470" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value \\s*([\\w\\-]+)\\s*(=)?\\s*(\\d+|\\"([^"\\\\]*(\\\\.[^"\\\\]*)*)+\\")?\\s*<br/>In class org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser<br/>In method org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.&lt;static initializer for CacheControlParser&gt;()<br/>At CacheControlUtil.java:[line 189]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72216');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "([0-9]+(\\.[0-9]+)*)([\\.-].*)?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72216" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ([0-9]+(\\.[0-9]+)*)([\\.-].*)?<br/>In class org.apache.axiom.util.stax.dialect.Version<br/>In method org.apache.axiom.util.stax.dialect.Version.&lt;static initializer for Version&gt;()<br/>At Version.java:[line 25]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67237');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>This API SHA1 (SHA-1) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67237" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.abdera.ext.oauth.OAuthScheme<br/>In method org.apache.abdera.ext.oauth.OAuthScheme.sign(String, String, Certificate)<br/>At OAuthScheme.java:[line 204]<br/>Value SHA1</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67295');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>This API SHA1 (SHA-1) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67295" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.abdera.ext.wsse.WSSEAuthScheme<br/>In method org.apache.abdera.ext.wsse.WSSEAuthScheme.generatePasswordDigest(String, String, AtomDate)<br/>At WSSEAuthScheme.java:[line 84]<br/>Value SHA1</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68775');">
<td>
<span class="priority-2">SECSSL</span>
</td>
<td>SSLContext needs to be compatible with TLS 1.2</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68775" style="display: none;">
<a href="#SSL_CONTEXT">Bug type SSL_CONTEXT (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.SimpleSSLProtocolSocketFactory<br/>In method org.apache.abdera.protocol.client.util.SimpleSSLProtocolSocketFactory.init(TrustManager)<br/>At SimpleSSLProtocolSocketFactory.java:[line 46]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66594');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66594" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class com.ctc.wstx.util.URLUtil<br/>In method com.ctc.wstx.util.URLUtil.optimizedStreamFromURL(URL)<br/>At URLUtil.java:[line 113]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source com/ctc/wstx/util/URLUtil.optimizedStreamFromURL(Ljava/net/URL;)Ljava/io/InputStream; parameter 0<br/>At DTDSchemaFactory.java:[line 129]<br/>At ExtEntity.java:[line 48]<br/>At ParsedExtEntity.java:[line 77]<br/>At DefaultInputResolver.java:[line 77]<br/>At DefaultInputResolver.java:[line 85]<br/>At DefaultInputResolver.java:[line 95]<br/>At DefaultInputResolver.java:[line 96]<br/>At DefaultInputResolver.java:[line 115]<br/>At DefaultInputResolver.java:[line 147]<br/>At DefaultInputResolver.java:[line 160]<br/>At DefaultInputResolver.java:[line 222]<br/>At DefaultInputResolver.java:[line 231]<br/>At DefaultInputResolver.java:[line 256]<br/>At RelaxNGSchemaFactory.java:[line 127]<br/>At RelaxNGSchemaFactory.java:[line 140]<br/>At WstxSAXParser.java:[line 402]<br/>At WstxSAXParser.java:[line 403]<br/>At ValidatingStreamReader.java:[line 358]<br/>At ValidatingStreamReader.java:[line 468]<br/>At WstxInputFactory.java:[line 434]<br/>At WstxInputFactory.java:[line 454]<br/>At WstxInputFactory.java:[line 637]<br/>At WstxInputFactory.java:[line 700]<br/>At WstxInputFactory.java:[line 762]<br/>At URLUtil.java:[line 37]<br/>At URLUtil.java:[line 53]<br/>At URLUtil.java:[line 57]<br/>At URLUtil.java:[line 59]<br/>At URLUtil.java:[line 70]<br/>At URLUtil.java:[line 73]<br/>At Stax2Source.java:[line 55]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67747');">
<td>
<span class="priority-1">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67747" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.abdera.i18n.text.data.Generator<br/>In method org.apache.abdera.i18n.text.data.Generator.read(String)<br/>At Generator.java:[line 334]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/i18n/text/data/Generator.read(Ljava/lang/String;)Ljava/util/Scanner; parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Method usage with tainted arguments detected<br/>At Generator.java:[line 40]<br/>At Generator.java:[line 45]<br/>At Generator.java:[line 310]<br/>At Generator.java:[line 333]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70098');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70098" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.abdera.util.Discover<br/>In method org.apache.abdera.util.Discover.locateResourceAsStream(String, ClassLoader, Class)<br/>At Discover.java:[line 263]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/util/Discover.locateResource(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/Class;)Ljava/net/URL;<br/>At Discover.java:[line 261]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70177');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70177" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.abdera.util.Discover$DefaultLoader<br/>In method org.apache.abdera.util.Discover$DefaultLoader.init(boolean)<br/>At Discover.java:[line 103]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/util/Discover.locateResources(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/Class;)Ljava/util/Enumeration;<br/>Unknown source java/util/Enumeration.nextElement()Ljava/lang/Object;<br/>At Discover.java:[line 98]<br/>At Discover.java:[line 103]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70871');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70871" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.axiom.om.impl.common.factory.AbstractOMMetaFactory<br/>In method org.apache.axiom.om.impl.common.factory.AbstractOMMetaFactory.createXMLStreamReader(StAXParserConfiguration, InputSource, boolean)<br/>At AbstractOMMetaFactory.java:[line 127]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/xml/sax/InputSource.getSystemId()Ljava/lang/String;<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>At AbstractOMMetaFactory.java:[line 127]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71961');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71961" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.axiom.om.xpath.DocumentNavigator<br/>In method org.apache.axiom.om.xpath.DocumentNavigator.getDocument(String)<br/>At DocumentNavigator.java:[line 550]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/xpath/DocumentNavigator.getDocument(Ljava/lang/String;)Ljava/lang/Object; parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Method usage not detected<br/>At DocumentNavigator.java:[line 549]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N73168');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N73168" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.codehaus.stax2.io.Stax2URLSource<br/>In method org.codehaus.stax2.io.Stax2URLSource.constructInputStream()<br/>At Stax2URLSource.java:[line 55]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/codehaus/stax2/io/Stax2URLSource.mURL<br/>At Stax2URLSource.java:[line 55]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71175');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71175" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.axiom.om.util.DigestGenerator<br/>In method org.apache.axiom.om.util.DigestGenerator.compareOMAttribute(OMAttribute, OMAttribute, String)<br/>At DigestGenerator.java:[line 348]<br/>Sink method java/util/Arrays.equals([B[B)Z<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/util/DigestGenerator.getDigest(Lorg/apache/axiom/om/OMAttribute;Ljava/lang/String;)[B<br/>Unknown source java/security/MessageDigest.digest()[B<br/>At DigestGenerator.java:[line 348]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71259');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71259" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.axiom.om.util.DigestGenerator<br/>In method org.apache.axiom.om.util.DigestGenerator.compareOMDocument(OMDocument, OMDocument, String)<br/>At DigestGenerator.java:[line 334]<br/>Sink method java/util/Arrays.equals([B[B)Z<br/>Sink parameter 0<br/>Unknown source org/apache/axiom/om/util/DigestGenerator.getDigest(Lorg/apache/axiom/om/OMDocument;Ljava/lang/String;)[B<br/>Unknown source java/security/MessageDigest.digest()[B<br/>At DigestGenerator.java:[line 334]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68613');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68613" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.NonOpTrustManager<br/>In method org.apache.abdera.protocol.client.util.NonOpTrustManager.checkClientTrusted(X509Certificate[], String)<br/>At NonOpTrustManager.java:[line 28]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68667');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68667" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.NonOpTrustManager<br/>In method org.apache.abdera.protocol.client.util.NonOpTrustManager.checkServerTrusted(X509Certificate[], String)<br/>At NonOpTrustManager.java:[line 31]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68721');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68721" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.abdera.protocol.client.util.NonOpTrustManager<br/>In method org.apache.abdera.protocol.client.util.NonOpTrustManager.getAcceptedIssuers()<br/>At NonOpTrustManager.java:[line 34]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66973');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66973" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.apache.abdera.ext.json.JSONServlet<br/>In method org.apache.abdera.ext.json.JSONServlet.doGet(HttpServletRequest, HttpServletResponse)<br/>At JSONServlet.java:[line 104]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/abdera/protocol/client/ClientResponse.getStatusText()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69750');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69750" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.apache.abdera.security.util.SecurityBase<br/>In method org.apache.abdera.security.util.SecurityBase.fomToDom(Document, SecurityOptions)<br/>At SecurityBase.java:[line 59]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69808');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69808" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.apache.abdera.security.util.SecurityBase<br/>In method org.apache.abdera.security.util.SecurityBase.fomToDom(Element, SecurityOptions)<br/>At SecurityBase.java:[line 91]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70665');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70665" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.apache.axiom.locator.ImplementationFactory<br/>In method org.apache.axiom.locator.ImplementationFactory.parseDescriptor(Loader, URL)<br/>At ImplementationFactory.java:[line 85]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N73355');">
<td>
<span class="priority-2">SECXXEDOC</span>
</td>
<td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N73355" style="display: none;">
<a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
<br/>In class org.jaxen.dom.DocumentNavigator<br/>In method org.jaxen.dom.DocumentNavigator.getDocument(String)<br/>At DocumentNavigator.java:[line 818]<br/>Value DocumentBuilder.parse(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71009');">
<td>
<span class="priority-2">SECXXEREAD</span>
</td>
<td>The use of XMLReader.parse(...) (XMLReader) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71009" style="display: none;">
<a href="#XXE_XMLREADER">Bug type XXE_XMLREADER (click for details)</a>
<br/>In class org.apache.axiom.om.impl.common.factory.SAXOMBuilder<br/>In method org.apache.axiom.om.impl.common.factory.SAXOMBuilder.getDocument()<br/>At SAXOMBuilder.java:[line 78]<br/>Value XMLReader.parse(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67924');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67924" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.abdera.parser.stax.util.FOMSniffingInputStream<br/>In method org.apache.abdera.parser.stax.util.FOMSniffingInputStream.detectEncoding()<br/>At FOMSniffingInputStream.java:[line 45]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67978');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67978" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.abdera.parser.stax.util.FOMXmlVersionInputStream<br/>In method org.apache.abdera.parser.stax.util.FOMXmlVersionInputStream.detectVersion()<br/>At FOMXmlVersionInputStream.java:[line 55]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68032');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68032" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.abdera.parser.stax.util.FOMXmlVersionReader<br/>In method org.apache.abdera.parser.stax.util.FOMXmlVersionReader.detectVersion()<br/>At FOMXmlVersionReader.java:[line 49]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69284');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69284" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.abdera.protocol.server.adapters.ibatis.IBatisCollectionAdapter<br/>In method org.apache.abdera.protocol.server.adapters.ibatis.IBatisCollectionAdapter.parseContent(String, Map)<br/>At IBatisCollectionAdapter.java:[line 207]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70955');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70955" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.impl.common.factory.AbstractOMMetaFactory<br/>In method org.apache.axiom.om.impl.common.factory.AbstractOMMetaFactory.createOMBuilder(OMFactory, Source)<br/>At AbstractOMMetaFactory.java:[line 190]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71671');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71671" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.createXMLStreamReader(StAXParserConfiguration, InputStream)<br/>At StAXUtils.java:[line 209]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71725');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71725" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.createXMLStreamReader(StAXParserConfiguration, InputStream, String)<br/>At StAXUtils.java:[line 193]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N71779');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N71779" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.createXMLStreamReader(StAXParserConfiguration, Reader)<br/>At StAXUtils.java:[line 235]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N71833');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N71833" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.om.util.StAXUtils<br/>In method org.apache.axiom.om.util.StAXUtils.createXMLStreamReader(StAXParserConfiguration, String, InputStream)<br/>At StAXUtils.java:[line 219]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72274');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72274" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createFilteredReader(XMLEventReader, EventFilter)<br/>At XMLInputFactoryWrapper.java:[line 54]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72328');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72328" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createFilteredReader(XMLStreamReader, StreamFilter)<br/>At XMLInputFactoryWrapper.java:[line 59]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72382');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72382" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(InputStream)<br/>At XMLInputFactoryWrapper.java:[line 68]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72436');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72436" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(InputStream, String)<br/>At XMLInputFactoryWrapper.java:[line 64]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72490');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72490" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(Reader)<br/>At XMLInputFactoryWrapper.java:[line 72]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72544');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72544" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(String, InputStream)<br/>At XMLInputFactoryWrapper.java:[line 81]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72598');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72598" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(String, Reader)<br/>At XMLInputFactoryWrapper.java:[line 86]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72652');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72652" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(XMLStreamReader)<br/>At XMLInputFactoryWrapper.java:[line 90]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72706');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72706" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLEventReader(Source)<br/>At XMLInputFactoryWrapper.java:[line 76]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72760');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72760" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(InputStream)<br/>At XMLInputFactoryWrapper.java:[line 99]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72814');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72814" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(InputStream, String)<br/>At XMLInputFactoryWrapper.java:[line 95]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72868');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72868" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(Reader)<br/>At XMLInputFactoryWrapper.java:[line 103]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N72922');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N72922" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(String, InputStream)<br/>At XMLInputFactoryWrapper.java:[line 112]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N72976');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N72976" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(String, Reader)<br/>At XMLInputFactoryWrapper.java:[line 117]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N73030');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N73030" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper<br/>In method org.apache.axiom.util.stax.wrapper.XMLInputFactoryWrapper.createXMLStreamReader(Source)<br/>At XMLInputFactoryWrapper.java:[line 107]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69226');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69226" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.abdera.protocol.server.adapters.ibatis.IBatisCollectionAdapter<br/>In method org.apache.abdera.protocol.server.adapters.ibatis.IBatisCollectionAdapter.getDocumentAsXml(Document)<br/>At IBatisCollectionAdapter.java:[line 168]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69866');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69866" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.abdera.security.util.SecurityBase<br/>In method org.apache.abdera.security.util.SecurityBase.domToFom(Document, SecurityOptions)<br/>At SecurityBase.java:[line 71]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69924');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69924" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.abdera.security.util.SecurityBase<br/>In method org.apache.abdera.security.util.SecurityBase.domToFom(Element, SecurityOptions)<br/>At SecurityBase.java:[line 103]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69338');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69338" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.abdera.protocol.server.adapters.ibatis.IBatisCollectionAdapter<br/>In method org.apache.abdera.protocol.server.adapters.ibatis.IBatisCollectionAdapter.getDocumentAsXml(Document)<br/>At IBatisCollectionAdapter.java:[line 168]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69982');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69982" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.abdera.security.util.SecurityBase<br/>In method org.apache.abdera.security.util.SecurityBase.domToFom(Document, SecurityOptions)<br/>At SecurityBase.java:[line 71]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70040');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70040" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.abdera.security.util.SecurityBase<br/>In method org.apache.abdera.security.util.SecurityBase.domToFom(Element, SecurityOptions)<br/>At SecurityBase.java:[line 103]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CIPHER_INTEGRITY">CIPHER_INTEGRITY: Cipher with no integrity</a>
</h2>
            
<p>
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the
    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.
</p>
<p>
    The solution is to use a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the
    existing cipher is prone to error <sup><a href="https://moxie.org/blog/the-cryptographic-doom-principle/">[1]</a></sup>. Specifically,
    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic
    functions on the data.
</p>
<p>The following modes are vulnerable because they don't provide a HMAC:<br/>
    - CBC<br/>
    - OFB<br/>
    - CTR<br/>
    - ECB<br/><br/>
    The following snippets code are some examples of vulnerable code.<br/><br/>
    <b>Code at risk:</b><br/>
    <i>AES in CBC mode</i><br/>

    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
    <br/>
    <i>Triple DES with ECB mode</i><br/>

<pre>Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="https://csrc.nist.gov/projects/block-cipher-techniques/bcm/modes-develoment#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="https://moxie.org/blog/the-cryptographic-doom-principle/">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/353.html">CWE-353: Missing Support for Integrity Check</a>
</p>

        
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="HTTP_PARAMETER_POLLUTION">HTTP_PARAMETER_POLLUTION: HTTP Parameter Pollution</a>
</h2>
            
<p>
Concatenating unvalidated user input into a URL can allow an attacker to override the value of a request parameter. Attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user may compromise the logic of the application to perform either client-side or server-side attacks.<br/>
In the following example the programmer has not considered the possibility that an attacker could provide a parameter <code>lang</code> such as <code>en&user_id=1</code>, which would enable him to change the <code>user_id</code> at will.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>String lang = request.getParameter("lang");
GetMethod get = new GetMethod("http://www.host.com");
get.setQueryString("lang=" + lang + "&user_id=" + user_id);
get.execute();</pre>
<p>
    <b>Solution:</b><br/>
Sanitize user input before using it in HTTP parameters.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://capec.mitre.org/data/definitions/460.html">CAPEC-460: HTTP Parameter Pollution (HPP)</a>
</p>
            
        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_OUT">PATH_TRAVERSAL_OUT: Potential Path Traversal (file write)</a>
</h2>
            
<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
</h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        
<h2>
<a name="WEAK_MESSAGE_DIGEST_SHA1">WEAK_MESSAGE_DIGEST_SHA1: SHA-1 is a weak hash function</a>
</h2>
            
<p>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other
uses. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "<b>SHA-1 for digital signature generation:</b><br/>
    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.
    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>
    <b>SHA-1 for digital signature verification:</b><br/>
    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>
    [...]<br/>
    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>

</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest sha1Digest = MessageDigest.getInstance("SHA1");
    sha1Digest.update(password.getBytes());
    byte[] hashValue = sha1Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know">Qualys blog: SHA1 Deprecation: What You Need to Know</a><br/>
<a href="https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html">Google Online Security Blog: Gradually sunsetting SHA-1</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="SSL_CONTEXT">SSL_CONTEXT: Weak SSLContext</a>
</h2>
            
<p>
    <b>Vulnerable Code:</b><br/>

    <pre>SSLContext.getInstance("SSL");</pre>
</p>
<p>
<p><b>Solution:</b><br/>

Upgrade your implementation to the following, and configure <code>https.protocols</code> JVM option to include TLSv1.2:</p>
<pre>SSLContext.getInstance("TLS");</pre>
<p>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https">Diagnosing TLS, SSL, and HTTPS</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        
<h2>
<a name="XXE_DOCUMENT">XXE_DOCUMENT: XML parsing vulnerable to XXE (DocumentBuilder)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces2-j/features.html">Xerces2 complete features list</a>
</p>

        
<h2>
<a name="XXE_XMLREADER">XXE_XMLREADER: XML parsing vulnerable to XXE (XMLReader)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setContentHandler(customHandler);
reader.parse(new InputSource(inputStream));</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
reader.setContentHandler(customHandler);

reader.parse(new InputSource(inputStream));</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
reader.setContentHandler(customHandler);

reader.parse(new InputSource(inputStream));</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://xerces.apache.org/xerces-j/features.html">Xerces complete features list</a>
</p>

        
<h2>
<a name="XXE_XMLSTREAMREADER">XXE_XMLSTREAMREADER: XML parsing vulnerable to XXE (XMLStreamReader)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution disabling External Entities:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://openjdk.java.net/jeps/185">JEP 185: Restrict Fetching of External XML Resources</a>
</p>

        
<h2>
<a name="XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY: XML parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY: XSLT parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XSLT External Entity (XXE) attacks can occur when an XSLT parser supports external entities while processing XSLT received
from an untrusted source.</p>
<p><b>Risk: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
   &lt;xsl:template match=&quot;/&quot;&gt;
       &lt;xsl:value-of select=&quot;document(&apos;/etc/passwd&apos;)&quot;&gt;
   &lt;/xsl:value-of&gt;&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>
<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        </body>
</html>
