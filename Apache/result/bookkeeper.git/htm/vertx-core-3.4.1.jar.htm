<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/bookkeeper.git/vertx-core-3.4.1.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>30642 lines of code analyzed,
	in 565 classes, 
	in 45 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">1</td>
<td align="right">0.03</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">41</td>
<td align="right">1.34</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>42</b>
</td>
<td align="right">
<b>1.37</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">42</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>42</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67285');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67285" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.ListCommand<br/>In method io.vertx.core.impl.launcher.commands.ListCommand.run()<br/>At ListCommand.java:[line 70]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67339');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67339" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.ListCommand<br/>In method io.vertx.core.impl.launcher.commands.ListCommand.run()<br/>At ListCommand.java:[line 89]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67711');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67711" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.StartCommand<br/>In method io.vertx.core.impl.launcher.commands.StartCommand.run()<br/>At StartCommand.java:[line 137]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68027');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68027" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.StopCommand<br/>In method io.vertx.core.impl.launcher.commands.StopCommand.pid()<br/>At StopCommand.java:[line 163]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68081');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68081" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.StopCommand<br/>In method io.vertx.core.impl.launcher.commands.StopCommand.terminateLinuxApplication()<br/>At StopCommand.java:[line 110]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68135');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68135" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.StopCommand<br/>In method io.vertx.core.impl.launcher.commands.StopCommand.terminateWindowsApplication()<br/>At StopCommand.java:[line 138]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67157');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67157" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.VertxCommandLauncher<br/>In method io.vertx.core.impl.launcher.VertxCommandLauncher.printGenericExecutionError(CLI, CLIException)<br/>At VertxCommandLauncher.java:[line 257]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68560');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68560" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class io.vertx.core.logging.VertxLoggerFormatter<br/>In method io.vertx.core.logging.VertxLoggerFormatter.format(LogRecord)<br/>At VertxLoggerFormatter.java:[line 50]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67472');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/ProcessBuilder.command(Ljava/util/List;)Ljava/lang/ProcessBuilder; can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67472" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.StartCommand<br/>In method io.vertx.core.impl.launcher.commands.StartCommand.run()<br/>At StartCommand.java:[line 128]<br/>Sink method java/lang/ProcessBuilder.command(Ljava/util/List;)Ljava/lang/ProcessBuilder;<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/ExecUtils.addArgument(Ljava/util/List;Ljava/lang/String;)V parameter 1<br/>Unknown source io/vertx/core/impl/launcher/commands/StartCommand.id<br/>Unknown source io/vertx/core/impl/launcher/commands/ExecUtils.addArgument(Ljava/util/List;Ljava/lang/String;)V parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/StartCommand.addJavaCommand(Ljava/util/List;)V parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/ExecUtils.quoteArgument(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/ExecUtils.quoteArgument(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/io/File.getAbsolutePath()Ljava/lang/String;<br/>At ExecUtils.java:[line 80]<br/>At ExecUtils.java:[line 85]<br/>At ExecUtils.java:[line 94]<br/>At ExecUtils.java:[line 95]<br/>At ExecUtils.java:[line 98]<br/>At ExecUtils.java:[line 99]<br/>At ExecUtils.java:[line 112]<br/>At StartCommand.java:[line 107]<br/>At StartCommand.java:[line 114]<br/>At StartCommand.java:[line 117]<br/>At StartCommand.java:[line 118]<br/>At StartCommand.java:[line 121]<br/>At StartCommand.java:[line 122]<br/>At StartCommand.java:[line 148]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67765');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67765" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.StopCommand<br/>In method io.vertx.core.impl.launcher.commands.StopCommand.pid()<br/>At StopCommand.java:[line 147]<br/>Sink method java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/StopCommand.id<br/>Unknown source java/util/Arrays.asList([Ljava/lang/Object;)Ljava/util/List;<br/>At StopCommand.java:[line 147]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67849');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67849" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.StopCommand<br/>In method io.vertx.core.impl.launcher.commands.StopCommand.terminateLinuxApplication()<br/>At StopCommand.java:[line 102]<br/>Sink method java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/StopCommand.pid()Ljava/lang/String;<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>At StopCommand.java:[line 89]<br/>At StopCommand.java:[line 100]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67943');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67943" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.StopCommand<br/>In method io.vertx.core.impl.launcher.commands.StopCommand.terminateWindowsApplication()<br/>At StopCommand.java:[line 129]<br/>Sink method java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/StopCommand.id<br/>Unknown source java/util/Arrays.asList([Ljava/lang/Object;)Ljava/util/List;<br/>At StopCommand.java:[line 119]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68189');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68189" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.Watcher<br/>In method io.vertx.core.impl.launcher.commands.Watcher.executeUserCommand(Handler)<br/>At Watcher.java:[line 342]<br/>Sink method java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/Watcher.cmd<br/>At Watcher.java:[line 333]<br/>At Watcher.java:[line 334]<br/>At Watcher.java:[line 336]<br/>At Watcher.java:[line 337]<br/>At Watcher.java:[line 340]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68614');">
<td>
<span class="priority-1">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68614" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class io.vertx.core.net.impl.KeyStoreHelper$KeyCert<br/>In method io.vertx.core.net.impl.KeyStoreHelper$KeyCert.loadStore(VertxInternal)<br/>At KeyStoreHelper.java:[line 204]<br/>Called method new java.security.KeyStore$PasswordProtection(char[])<br/>Hard coded parameter number (in reverse order) is 1<br/>Return value of String.toCharArray() of type char[]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65787');">
<td>
<span class="priority-2">SECOPFP</span>
</td>
<td>Overly permissive file permission can lead to privilege escalation or information leakage.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65787" style="display: none;">
<a href="#OVERLY_PERMISSIVE_FILE_PERMISSION">Bug type OVERLY_PERMISSIVE_FILE_PERMISSION (click for details)</a>
<br/>In class io.vertx.core.file.impl.AsyncFileImpl<br/>In method new io.vertx.core.file.impl.AsyncFileImpl(VertxInternal, String, OpenOptions, ContextImpl)<br/>At AsyncFileImpl.java:[line 99]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65729');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65729" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class io.vertx.core.dns.impl.DnsClientImpl$3<br/>In method io.vertx.core.dns.impl.DnsClientImpl$3.onSuccess(ChannelFuture)<br/>At DnsClientImpl.java:[line 230]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65840');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65840" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.file.impl.AsyncFileImpl<br/>In method new io.vertx.core.file.impl.AsyncFileImpl(VertxInternal, String, OpenOptions, ContextImpl)<br/>At AsyncFileImpl.java:[line 86]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source io/vertx/core/file/impl/AsyncFileImpl.&lt;init&gt;(Lio/vertx/core/impl/VertxInternal;Ljava/lang/String;Lio/vertx/core/file/OpenOptions;Lio/vertx/core/impl/ContextImpl;)V parameter 2<br/>At FileSystemImpl.java:[line 744]<br/>At FileSystemImpl.java:[line 738]<br/>At WindowsFileSystem.java:[line 77]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65939');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65939" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.file.impl.FileSystemImpl$3<br/>In method io.vertx.core.file.impl.FileSystemImpl$3.perform()<br/>At FileSystemImpl.java:[line 418]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source java/io/File.getAbsolutePath()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66008');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/RandomAccessFile.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66008" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.file.impl.FileSystemImpl$3<br/>In method io.vertx.core.file.impl.FileSystemImpl$3.perform()<br/>At FileSystemImpl.java:[line 422]<br/>Sink method java/io/RandomAccessFile.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 1<br/>Unknown source java/io/File.getAbsolutePath()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66077');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66077" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.DeploymentManager<br/>In method io.vertx.core.impl.DeploymentManager.getClassLoader(DeploymentOptions, ContextImpl)<br/>At DeploymentManager.java:[line 347]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/DeploymentOptions.getExtraClasspath()Ljava/util/List;<br/>Unknown source io/vertx/core/DeploymentOptions.extraClasspath<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>At DeploymentOptions.java:[line 230]<br/>At DeploymentManager.java:[line 344]<br/>At DeploymentManager.java:[line 346]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66186');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66186" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.FileResolver<br/>In method io.vertx.core.impl.FileResolver.resolveFile(String)<br/>At FileResolver.java:[line 103]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/FileResolver.resolveFile(Ljava/lang/String;)Ljava/io/File; parameter 0<br/>At AddressResolverOptions.java:[line 145]<br/>At FileResolver.java:[line 181]<br/>At FileResolver.java:[line 194]<br/>At FileResolver.java:[line 195]<br/>At VertxImpl.java:[line 706]<br/>At DnsResolverProvider.java:[line 101]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66315');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66315" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.FileResolver<br/>In method io.vertx.core.impl.FileResolver.resolveFile(String)<br/>At FileResolver.java:[line 105]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/FileResolver.resolveFile(Ljava/lang/String;)Ljava/io/File; parameter 0<br/>At AddressResolverOptions.java:[line 145]<br/>At FileResolver.java:[line 181]<br/>At FileResolver.java:[line 194]<br/>At FileResolver.java:[line 195]<br/>At VertxImpl.java:[line 706]<br/>At DnsResolverProvider.java:[line 101]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66444');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66444" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.FileResolver<br/>In method io.vertx.core.impl.FileResolver.resolveFile(String)<br/>At FileResolver.java:[line 115]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/FileResolver.resolveFile(Ljava/lang/String;)Ljava/io/File; parameter 0<br/>At AddressResolverOptions.java:[line 145]<br/>At FileResolver.java:[line 181]<br/>At FileResolver.java:[line 194]<br/>At FileResolver.java:[line 195]<br/>At VertxImpl.java:[line 706]<br/>At DnsResolverProvider.java:[line 101]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66573');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66573" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.FileResolver<br/>In method io.vertx.core.impl.FileResolver.unpackFromFileURL(URL, String, ClassLoader)<br/>At FileResolver.java:[line 153]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/FileResolver.unpackFromFileURL(Ljava/net/URL;Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/io/File; parameter 1<br/>At AddressResolverOptions.java:[line 145]<br/>At FileResolver.java:[line 122]<br/>At FileResolver.java:[line 129]<br/>At FileResolver.java:[line 170]<br/>At FileResolver.java:[line 172]<br/>At FileResolver.java:[line 181]<br/>At FileResolver.java:[line 194]<br/>At FileResolver.java:[line 195]<br/>At VertxImpl.java:[line 706]<br/>At DnsResolverProvider.java:[line 101]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66742');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66742" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.FileResolver<br/>In method io.vertx.core.impl.FileResolver.unpackFromJarURL(URL, String, ClassLoader)<br/>At FileResolver.java:[line 191]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/net/URLDecoder.decode(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/net/URL.getPath()Ljava/lang/String;<br/>Unknown source io/vertx/core/impl/FileResolver.unpackFromJarURL(Ljava/net/URL;Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/io/File; parameter 2<br/>Method usage not detected<br/>At FileResolver.java:[line 181]<br/>At FileResolver.java:[line 191]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66846');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66846" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.FileResolver<br/>In method io.vertx.core.impl.FileResolver.unpackFromJarURL(URL, String, ClassLoader)<br/>At FileResolver.java:[line 212]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/zip/ZipEntry.getName()Ljava/lang/String;<br/>At FileResolver.java:[line 212]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66925');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66925" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.FileResolver<br/>In method io.vertx.core.impl.FileResolver.unpackFromJarURL(URL, String, ClassLoader)<br/>At FileResolver.java:[line 235]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/FileResolver.unpackFromJarURL(Ljava/net/URL;Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/io/File; parameter 1<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67211');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67211" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.ClasspathHandler<br/>In method io.vertx.core.impl.launcher.commands.ClasspathHandler.lambda$createClassloader$0(String)<br/>At ClasspathHandler.java:[line 81]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/ClasspathHandler.lambda$createClassloader$0(Ljava/lang/String;)Ljava/net/URL; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67393');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67393" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.RunCommand<br/>In method io.vertx.core.impl.launcher.commands.RunCommand.getConfiguration()<br/>At RunCommand.java:[line 408]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/RunCommand.config<br/>At RunCommand.java:[line 408]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68308');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68308" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.Watcher<br/>In method io.vertx.core.impl.launcher.commands.Watcher.lambda$extractRoots$0(File, String)<br/>At Watcher.java:[line 97]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/Watcher.lambda$extractRoots$0(Ljava/io/File;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Method usage not detected<br/>At Watcher.java:[line 95]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68392');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68392" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.impl.launcher.commands.Watcher<br/>In method io.vertx.core.impl.launcher.commands.Watcher.lambda$extractRoots$0(File, String)<br/>At Watcher.java:[line 101]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/launcher/commands/Watcher.lambda$extractRoots$0(Ljava/io/File;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Method usage not detected<br/>At Watcher.java:[line 95]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.Starter<br/>In method io.vertx.core.Starter.main(String[])<br/>At Starter.java:[line 78]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source io/vertx/core/impl/Args.map<br/>At Starter.java:[line 70]<br/>At Starter.java:[line 74]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65645');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65645" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class io.vertx.core.Starter<br/>In method io.vertx.core.Starter.runVerticle(String, Args)<br/>At Starter.java:[line 305]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source io/vertx/core/impl/Args.map<br/>At Starter.java:[line 301]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68476');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68476" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class io.vertx.core.impl.verticle.CustomJavaFileObject<br/>In method io.vertx.core.impl.verticle.CustomJavaFileObject.openInputStream()<br/>At CustomJavaFileObject.java:[line 51]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source java/net/URI.toURL()Ljava/net/URL;<br/>Unknown source io/vertx/core/impl/verticle/CustomJavaFileObject.uri<br/>At CustomJavaFileObject.java:[line 51]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66999');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66999" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class io.vertx.core.impl.HAManager<br/>In method io.vertx.core.impl.HAManager.checkFailover(String, JsonObject)<br/>At HAManager.java:[line 489]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/HAManager.nodeID<br/>At HAManager.java:[line 489]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67078');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67078" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class io.vertx.core.impl.HAManager<br/>In method io.vertx.core.impl.HAManager.checkSubs(String)<br/>At HAManager.java:[line 520]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source io/vertx/core/impl/HAManager.nodeID<br/>At HAManager.java:[line 520]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68705');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68705" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class io.vertx.core.net.impl.SSLHelper$2<br/>In method io.vertx.core.net.impl.SSLHelper$2.checkClientTrusted(X509Certificate[], String)<br/>At SSLHelper.java:[line 364]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68759');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68759" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class io.vertx.core.net.impl.SSLHelper$2<br/>In method io.vertx.core.net.impl.SSLHelper$2.checkServerTrusted(X509Certificate[], String)<br/>At SSLHelper.java:[line 368]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68813');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68813" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class io.vertx.core.net.impl.SSLHelper$2<br/>In method io.vertx.core.net.impl.SSLHelper$2.getAcceptedIssuers()<br/>At SSLHelper.java:[line 372]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68867');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68867" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class io.vertx.core.net.impl.TrustAllTrustManager<br/>In method io.vertx.core.net.impl.TrustAllTrustManager.checkClientTrusted(X509Certificate[], String)<br/>At TrustAllTrustManager.java:[line 36]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68921');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68921" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class io.vertx.core.net.impl.TrustAllTrustManager<br/>In method io.vertx.core.net.impl.TrustAllTrustManager.checkServerTrusted(X509Certificate[], String)<br/>At TrustAllTrustManager.java:[line 40]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68975');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68975" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class io.vertx.core.net.impl.TrustAllTrustManager<br/>In method io.vertx.core.net.impl.TrustAllTrustManager.getAcceptedIssuers()<br/>At TrustAllTrustManager.java:[line 44]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="COMMAND_INJECTION">COMMAND_INJECTION: Potential Command Injection</a>
</h2>
            
<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>import java.lang.Runtime;

Runtime r = Runtime.getRuntime();
r.exec("/bin/sh -c some_tool" + input);</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>
</p>

        
<h2>
<a name="HARD_CODE_PASSWORD">HARD_CODE_PASSWORD: Hard coded password</a>
</h2>
            
<p>
Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>private String SECRET_PASSWORD = "letMeIn!";

Properties props = new Properties();
props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/259.html">CWE-259: Use of Hard-coded Password</a>
</p>

        
<h2>
<a name="OVERLY_PERMISSIVE_FILE_PERMISSION">OVERLY_PERMISSIVE_FILE_PERMISSION: Overly permissive file permission</a>
</h2>
            
<p>
It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users.
If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage.
</p>
<p>
It is possible that another service, running on the same host as your application, gets compromised.
Services typically run under a different user. A compromised service account could be use to read your configuration, add execution instruction to scripts or alter the data file.
To limite the damage from other services or local users, you should limited to permission of your application files.
</p>

<p>
<b>Vulnerable Code 1 (symbolic notation):</b><br/>
<pre>
Files.setPosixFilePermissions(configPath, PosixFilePermissions.fromString("rw-rw-rw-"));
</pre>
</p>

<p>
<b>Solution 1 (symbolic notation):</b><br/>
<pre>
Files.setPosixFilePermissions(configPath, PosixFilePermissions.fromString("rw-rw----"));
</pre>
</p>


<p>
<b>Vulnerable Code 2 (Object-oriented implementation):</b><br/>
<pre>
Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;&gt;();
perms.add(PosixFilePermission.OWNER_READ);
perms.add(PosixFilePermission.OWNER_WRITE);
perms.add(PosixFilePermission.OWNER_EXECUTE);

perms.add(PosixFilePermission.GROUP_READ);
perms.add(PosixFilePermission.GROUP_WRITE);
perms.add(PosixFilePermission.GROUP_EXECUTE);

perms.add(PosixFilePermission.OTHERS_READ);
perms.add(PosixFilePermission.OTHERS_WRITE);
perms.add(PosixFilePermission.OTHERS_EXECUTE);
</pre>
</p>

<p>
<b>Solution 2 (Object-oriented implementation):</b><br/>
<pre>
Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;&gt;();
perms.add(PosixFilePermission.OWNER_READ);
perms.add(PosixFilePermission.OWNER_WRITE);
perms.add(PosixFilePermission.OWNER_EXECUTE);

perms.add(PosixFilePermission.GROUP_READ);
perms.add(PosixFilePermission.GROUP_WRITE);
perms.add(PosixFilePermission.GROUP_EXECUTE);
</pre>
</p>

<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/732.html">CWE-732: Incorrect Permission Assignment for Critical Resource</a><br/>
<a href="https://payatu.com/guide-linux-privilege-escalation/">A guide to Linux Privilege Escalation</a><br/>
<a href="https://en.wikipedia.org/wiki/File_system_permissions">File system permissions</a><br/>
</p>

            
        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        </body>
</html>
