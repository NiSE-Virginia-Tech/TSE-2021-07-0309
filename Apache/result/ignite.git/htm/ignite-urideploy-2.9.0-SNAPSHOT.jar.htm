<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/ignite.git/ignite-urideploy-2.9.0-SNAPSHOT.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>1688 lines of code analyzed,
	in 37 classes, 
	in 4 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">2</td>
<td align="right">1.18</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">16</td>
<td align="right">9.48</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>18</b>
</td>
<td align="right">
<b>10.66</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">18</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>18</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65862');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65862" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor<br/>In method org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor.directoryMd5(File, IgniteLogger)<br/>At GridUriDeploymentFileProcessor.java:[line 206]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65920');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65920" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor<br/>In method org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor.fileMd5(File, IgniteLogger)<br/>At GridUriDeploymentFileProcessor.java:[line 177]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65620');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/net/URI;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65620" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor<br/>In method org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor.cleanupUnit(ClassLoader, IgniteLogger)<br/>At GridUriDeploymentFileProcessor.java:[line 310]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/net/URI;)V<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/util/IgniteUtils.classLoaderUrls(Ljava/lang/ClassLoader;)[Ljava/net/URL;<br/>Unknown source java/net/URL.toURI()Ljava/net/URI;<br/>At GridUriDeploymentFileProcessor.java:[line 310]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65704');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65704" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor<br/>In method org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor.cleanupUnit(ClassLoader, IgniteLogger)<br/>At GridUriDeploymentFileProcessor.java:[line 315]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.getName()Ljava/lang/String;<br/>At GridUriDeploymentFileProcessor.java:[line 315]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65783');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65783" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor<br/>In method org.apache.ignite.spi.deployment.uri.GridUriDeploymentFileProcessor.processFile(File, String, File, IgniteLogger)<br/>At GridUriDeploymentFileProcessor.java:[line 84]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.getName()Ljava/lang/String;<br/>At GridUriDeploymentFileProcessor.java:[line 84]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66487');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66487" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.scanners.file.UriDeploymentFileScanner<br/>In method org.apache.ignite.spi.deployment.uri.scanners.file.UriDeploymentFileScanner.createUriContext(URI, UriDeploymentScannerContext)<br/>At UriDeploymentFileScanner.java:[line 94]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/net/URI.getPath()Ljava/lang/String;<br/>Unknown source org/apache/ignite/spi/deployment/uri/scanners/file/UriDeploymentFileScanner.createUriContext(Ljava/net/URI;Lorg/apache/ignite/spi/deployment/uri/scanners/UriDeploymentScannerContext;)Lorg/apache/ignite/spi/deployment/uri/scanners/file/UriDeploymentFileScanner$URIContext; parameter 1<br/>At UriDeploymentFileScanner.java:[line 65]<br/>At UriDeploymentFileScanner.java:[line 89]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66581');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66581" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.scanners.file.UriDeploymentFileScanner$URIContext<br/>In method org.apache.ignite.spi.deployment.uri.scanners.file.UriDeploymentFileScanner$URIContext.handleFile(File, UriDeploymentScannerContext)<br/>At UriDeploymentFileScanner.java:[line 255]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.getName()Ljava/lang/String;<br/>At UriDeploymentFileScanner.java:[line 255]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66413');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66413" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.scanners.UriDeploymentScannerManager<br/>In method org.apache.ignite.spi.deployment.uri.scanners.UriDeploymentScannerManager.createTempFile(String, File)<br/>At UriDeploymentScannerManager.java:[line 189]<br/>Sink method java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/spi/deployment/uri/scanners/UriDeploymentScannerManager.createTempFile(Ljava/lang/String;Ljava/io/File;)Ljava/io/File; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65978');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65978" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.UriDeploymentSpi<br/>In method org.apache.ignite.spi.deployment.uri.UriDeploymentSpi.initializeTemporaryDirectoryPath()<br/>At UriDeploymentSpi.java:[line 1095]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/configuration/IgniteConfiguration.getNodeId()Ljava/util/UUID;<br/>Unknown source org/apache/ignite/spi/deployment/uri/UriDeploymentSpi.tmpDirPath<br/>At UriDeploymentSpi.java:[line 1089]<br/>At UriDeploymentSpi.java:[line 1094]<br/>At UriDeploymentSpi.java:[line 1095]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66082');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66082" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.UriDeploymentSpi<br/>In method org.apache.ignite.spi.deployment.uri.UriDeploymentSpi.spiStart(String)<br/>At UriDeploymentSpi.java:[line 638]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/spi/deployment/uri/UriDeploymentSpi.deployTmpDirPath<br/>At UriDeploymentSpi.java:[line 638]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66161');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66161" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.UriDeploymentSpi<br/>In method org.apache.ignite.spi.deployment.uri.UriDeploymentSpi.spiStop()<br/>At UriDeploymentSpi.java:[line 529]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/spi/deployment/uri/UriDeploymentSpi.deployTmpDirPath<br/>At UriDeploymentSpi.java:[line 529]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66334');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66334" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.UriDeploymentSpi$2<br/>In method org.apache.ignite.spi.deployment.uri.UriDeploymentSpi$2.onNewOrUpdatedFile(File, String, long)<br/>At UriDeploymentSpi.java:[line 588]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/spi/deployment/uri/UriDeploymentSpi.deployTmpDirPath<br/>At UriDeploymentSpi.java:[line 588]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.GridUriDeploymentClassLoader<br/>In method org.apache.ignite.spi.deployment.uri.GridUriDeploymentClassLoader.getResourceAsStreamIsolated(String)<br/>At GridUriDeploymentClassLoader.java:[line 160]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/spi/deployment/uri/GridUriDeploymentClassLoader.findResource(Ljava/lang/String;)Ljava/net/URL;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66768');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66768" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.scanners.http.UriDeploymentHttpScanner$URIContext<br/>In method org.apache.ignite.spi.deployment.uri.scanners.http.UriDeploymentHttpScanner$URIContext.getUrls(URL, UriDeploymentScannerContext)<br/>At UriDeploymentHttpScanner.java:[line 381]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner$URIContext.getUrls(Ljava/net/URL;Lorg/apache/ignite/spi/deployment/uri/scanners/UriDeploymentScannerContext;)Ljava/util/Set; parameter 1<br/>At UriDeploymentHttpScanner.java:[line 282]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66847');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66847" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.scanners.http.UriDeploymentHttpScanner$URIContext<br/>In method org.apache.ignite.spi.deployment.uri.scanners.http.UriDeploymentHttpScanner$URIContext.processHttp(Collection, UriDeploymentScannerContext)<br/>At UriDeploymentHttpScanner.java:[line 298]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source java/net/URL.getProtocol()Ljava/lang/String;<br/>Unknown source org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner$URIContext.getUrls(Ljava/net/URL;Lorg/apache/ignite/spi/deployment/uri/scanners/UriDeploymentScannerContext;)Ljava/util/Set;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner$URIContext.scanDir<br/>Unknown source java/net/URL.getHost()Ljava/lang/String;<br/>Unknown source org/w3c/dom/Element.getAttribute(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/net/URL.toString()Ljava/lang/String;<br/>Unknown source org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner$URIContext.findReferences(Lorg/w3c/dom/Node;Ljava/util/Set;Ljava/net/URL;Lorg/apache/ignite/spi/deployment/uri/scanners/UriDeploymentScannerContext;)V parameter 2<br/>Unknown source org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner$URIContext.findReferences(Lorg/w3c/dom/Node;Ljava/util/Set;Ljava/net/URL;Lorg/apache/ignite/spi/deployment/uri/scanners/UriDeploymentScannerContext;)V parameter 1<br/>Unknown source java/net/URL.getFile()Ljava/lang/String;<br/>Unknown source org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner$URIContext.getUrls(Ljava/net/URL;Lorg/apache/ignite/spi/deployment/uri/scanners/UriDeploymentScannerContext;)Ljava/util/Set; parameter 1<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V<br/>At UriDeploymentHttpScanner.java:[line 282]<br/>At UriDeploymentHttpScanner.java:[line 284]<br/>At UriDeploymentHttpScanner.java:[line 298]<br/>At UriDeploymentHttpScanner.java:[line 443]<br/>At UriDeploymentHttpScanner.java:[line 447]<br/>At UriDeploymentHttpScanner.java:[line 448]<br/>At UriDeploymentHttpScanner.java:[line 456]<br/>At UriDeploymentHttpScanner.java:[line 463]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66240');">
<td>
<span class="priority-2">SECUHE</span>
</td>
<td>Unsafe comparison of hash that are susceptible to timing attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66240" style="display: none;">
<a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.UriDeploymentSpi<br/>In method org.apache.ignite.spi.deployment.uri.UriDeploymentSpi.unitDeployed(String)<br/>At UriDeploymentSpi.java:[line 1347]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/spi/deployment/uri/GridUriDeploymentUnitDescriptor.getMd5()Ljava/lang/String;<br/>Unknown source org/apache/ignite/spi/deployment/uri/GridUriDeploymentUnitDescriptor.md5<br/>At GridUriDeploymentUnitDescriptor.java:[line 177]<br/>At UriDeploymentSpi.java:[line 1347]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66714');">
<td>
<span class="priority-2">SECWHV</span>
</td>
<td>HostnameVerifier that accept any signed certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66714" style="display: none;">
<a href="#WEAK_HOSTNAME_VERIFIER">Bug type WEAK_HOSTNAME_VERIFIER (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.scanners.http.UriDeploymentHttpScanner$DeploymentHostnameVerifier<br/>In method org.apache.ignite.spi.deployment.uri.scanners.http.UriDeploymentHttpScanner$DeploymentHostnameVerifier.verify(String, SSLSession)<br/>At UriDeploymentHttpScanner.java:[line 502]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66660');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66660" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class org.apache.ignite.spi.deployment.uri.scanners.http.UriDeploymentHttpScanner$1<br/>In method org.apache.ignite.spi.deployment.uri.scanners.http.UriDeploymentHttpScanner$1.getAcceptedIssuers()<br/>At UriDeploymentHttpScanner.java:[line 160]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
</h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        
<h2>
<a name="WEAK_HOSTNAME_VERIFIER">WEAK_HOSTNAME_VERIFIER: HostnameVerifier that accept any signed certificates</a>
</h2>
            
<p>A <code>HostnameVerifier</code> that accept any host are often use because of certificate reuse on many hosts.
As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a truststore for example) should be built.
Wildcard certificates should be created for reused on multiples subdomains.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>public class AllHosts implements HostnameVerifier {
    public boolean verify(final String hostname, final SSLSession session) {
        return true;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        </body>
</html>
