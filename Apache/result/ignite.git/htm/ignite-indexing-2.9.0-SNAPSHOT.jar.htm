<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/ignite.git/ignite-indexing-2.9.0-SNAPSHOT.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>21683 lines of code analyzed,
	in 371 classes, 
	in 19 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">2</td>
<td align="right">0.09</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">12</td>
<td align="right">0.55</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>14</b>
</td>
<td align="right">
<b>0.65</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">14</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>14</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.ConnectionManager<br/>In method org.apache.ignite.internal.processors.query.h2.ConnectionManager.executeStatement(String, String)<br/>At ConnectionManager.java:[line 245]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/processors/query/h2/ConnectionManager.executeStatement(Ljava/lang/String;Ljava/lang/String;)V parameter 0<br/>At H2Utils.java:[line 293]<br/>At H2Utils.java:[line 353]<br/>At IgniteH2Indexing.java:[line 402]<br/>At SchemaManager.java:[line 482]<br/>At SchemaManager.java:[line 485]<br/>At SchemaManager.java:[line 487]<br/>At SchemaManager.java:[line 620]<br/>At SchemaManager.java:[line 622]<br/>At SchemaManager.java:[line 668]<br/>At SchemaManager.java:[line 670]<br/>At SchemaManager.java:[line 690]<br/>At SchemaManager.java:[line 698]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65740');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65740" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.ConnectionManager<br/>In method org.apache.ignite.internal.processors.query.h2.ConnectionManager.executeSystemStatement(String)<br/>At ConnectionManager.java:[line 269]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/processors/query/h2/ConnectionManager.executeSystemStatement(Ljava/lang/String;)V parameter 0<br/>At H2Utils.java:[line 353]<br/>At IgniteH2Indexing.java:[line 2334]<br/>At SchemaManager.java:[line 232]<br/>At SchemaManager.java:[line 251]<br/>At SchemaManager.java:[line 286]<br/>At SchemaManager.java:[line 290]<br/>At SchemaManager.java:[line 291]<br/>At SchemaManager.java:[line 305]<br/>At SchemaManager.java:[line 355]<br/>At SchemaManager.java:[line 391]<br/>At SchemaManager.java:[line 422]<br/>At SchemaManager.java:[line 435]<br/>At SchemaManager.java:[line 500]<br/>At SchemaManager.java:[line 599]<br/>At SqlViewMetricExporterSpi.java:[line 54]<br/>At SqlViewExporterSpi.java:[line 84]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65969');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65969" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.ConnectionManager<br/>In method org.apache.ignite.internal.processors.query.h2.ConnectionManager.prepareStatementNoCache(Connection, String)<br/>At ConnectionManager.java:[line 356]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;<br/>Sink parameter 2<br/>Unknown source org/apache/ignite/internal/processors/query/h2/ConnectionManager.prepareStatementNoCache(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>At ConnectionManager.java:[line 333]<br/>At IgniteH2Indexing.java:[line 775]<br/>At IgniteH2Indexing.java:[line 855]<br/>At IgniteH2Indexing.java:[line 559]<br/>At QueryParser.java:[line 354]<br/>At GridSqlQuerySplitter.java:[line 169]<br/>At GridSqlTable.java:[line 78]<br/>At GridSqlTable.java:[line 88]<br/>At GridMapQueryExecutor.java:[line 407]<br/>At GridReduceQueryExecutor.java:[line 673]<br/>At GridReduceQueryExecutor.java:[line 1011]<br/>At GridReduceQueryExecutor.java:[line 1026]<br/>At GridReduceQueryExecutor.java:[line 1027]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66168');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66168" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.ConnectionManager<br/>In method org.apache.ignite.internal.processors.query.h2.ConnectionManager.prepareStatementNoCache(Connection, String)<br/>At ConnectionManager.java:[line 363]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;<br/>Sink parameter 2<br/>Unknown source org/apache/ignite/internal/processors/query/h2/ConnectionManager.prepareStatementNoCache(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>At ConnectionManager.java:[line 333]<br/>At IgniteH2Indexing.java:[line 775]<br/>At IgniteH2Indexing.java:[line 855]<br/>At IgniteH2Indexing.java:[line 559]<br/>At QueryParser.java:[line 354]<br/>At GridSqlQuerySplitter.java:[line 169]<br/>At GridSqlTable.java:[line 78]<br/>At GridSqlTable.java:[line 88]<br/>At GridMapQueryExecutor.java:[line 407]<br/>At GridReduceQueryExecutor.java:[line 673]<br/>At GridReduceQueryExecutor.java:[line 1011]<br/>At GridReduceQueryExecutor.java:[line 1026]<br/>At GridReduceQueryExecutor.java:[line 1027]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66614');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66614" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.dml.UpdatePlanBuilder<br/>In method org.apache.ignite.internal.processors.query.h2.dml.UpdatePlanBuilder.checkPlanCanBeDistributed(IgniteH2Indexing, boolean, QueryDescriptor, String, String)<br/>At UpdatePlanBuilder.java:[line 894]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/processors/query/h2/dml/UpdatePlanBuilder.checkPlanCanBeDistributed(Lorg/apache/ignite/internal/processors/query/h2/IgniteH2Indexing;ZLorg/apache/ignite/internal/processors/query/h2/QueryDescriptor;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/ignite/internal/processors/query/h2/dml/DmlDistributedPlanInfo; parameter 1<br/>At UpdatePlanBuilder.java:[line 258]<br/>At UpdatePlanBuilder.java:[line 434]<br/>At UpdatePlanBuilder.java:[line 439]<br/>At UpdatePlanBuilder.java:[line 468]<br/>At UpdatePlanBuilder.java:[line 473]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66367');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66367" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.H2TableEngine<br/>In method org.apache.ignite.internal.processors.query.h2.H2TableEngine.createTable(Connection, String, GridH2RowDescriptor, H2TableDescriptor)<br/>At H2TableEngine.java:[line 65]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/processors/query/h2/H2TableEngine.createTable(Ljava/sql/Connection;Ljava/lang/String;Lorg/apache/ignite/internal/processors/query/h2/opt/GridH2RowDescriptor;Lorg/apache/ignite/internal/processors/query/h2/H2TableDescriptor;)Lorg/apache/ignite/internal/processors/query/h2/opt/GridH2Table; parameter 2<br/>At H2TableEngine.java:[line 65]<br/>At SchemaManager.java:[line 542]<br/>At SchemaManager.java:[line 549]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66466');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66466" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.SchemaManager<br/>In method org.apache.ignite.internal.processors.query.h2.SchemaManager.dropTable(H2TableDescriptor)<br/>At SchemaManager.java:[line 580]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/processors/query/h2/H2TableDescriptor.fullTableName()Ljava/lang/String;<br/>Unknown source org/apache/ignite/internal/processors/query/h2/H2TableDescriptor.fullTblName<br/>At H2TableDescriptor.java:[line 153]<br/>At SchemaManager.java:[line 575]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66852');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66852" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.sql.GridSqlQuerySplitter<br/>In method org.apache.ignite.internal.processors.query.h2.sql.GridSqlQuerySplitter.prepare(Connection, String, boolean, boolean)<br/>At GridSqlQuerySplitter.java:[line 1767]<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.prepare(Ljava/sql/Connection;Ljava/lang/String;ZZ)Lorg/h2/command/Prepared; parameter 2<br/>At GridSqlQuerySplitter.java:[line 270]<br/>At GridSqlQuerySplitter.java:[line 285]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66941');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66941" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.sys.SqlSystemTableEngine<br/>In method org.apache.ignite.internal.processors.query.h2.sys.SqlSystemTableEngine.registerView(Connection, SqlSystemView)<br/>At SqlSystemTableEngine.java:[line 48]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemView.getCreateSQL()Ljava/lang/String;<br/>At SqlSystemTableEngine.java:[line 44]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67074');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67074" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.twostep.ReduceTableEngine<br/>In method org.apache.ignite.internal.processors.query.h2.twostep.ReduceTableEngine.create(Connection, int)<br/>At ReduceTableEngine.java:[line 46]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/apache/ignite/internal/processors/query/h2/sql/GridSqlTable.getBeforeAliasSql()Ljava/lang/String;<br/>Unknown source org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.mergeTableIdentifier(I)Ljava/lang/String;<br/>Unknown source org/apache/ignite/internal/processors/query/h2/sql/GridSqlTable.getAfterAliasSQL()Ljava/lang/String;<br/>Unknown source org/apache/ignite/internal/util/typedef/internal/SB.toString()Ljava/lang/String;<br/>Unknown source org/apache/ignite/internal/processors/query/h2/sql/GridSqlTable.getSQL()Ljava/lang/String;<br/>Unknown source org/h2/command/Parser.quoteIdentifier(Ljava/lang/String;)Ljava/lang/String;<br/>At GridSqlQuerySplitter.java:[line 169]<br/>At GridSqlTable.java:[line 78]<br/>At GridSqlTable.java:[line 88]<br/>At ReduceTableEngine.java:[line 46]<br/>At ReduceTableEngine.java:[line 47]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66733');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.apache.ignite.internal.processors.query.h2.dml.UpdatePlanBuilder.planForInsert(QueryDescriptor, GridSqlStatement, IgniteH2Indexing, boolean) </td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66733" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.dml.UpdatePlanBuilder<br/>In method org.apache.ignite.internal.processors.query.h2.dml.UpdatePlanBuilder.planForInsert(QueryDescriptor, GridSqlStatement, IgniteH2Indexing, boolean)<br/>At UpdatePlanBuilder.java:[line 258]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66787');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.apache.ignite.internal.processors.query.h2.dml.UpdatePlanBuilder.planForUpdate(QueryDescriptor, GridSqlStatement, IgniteH2Indexing, boolean) </td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66787" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.dml.UpdatePlanBuilder<br/>In method org.apache.ignite.internal.processors.query.h2.dml.UpdatePlanBuilder.planForUpdate(QueryDescriptor, GridSqlStatement, IgniteH2Indexing, boolean)<br/>At UpdatePlanBuilder.java:[line 473]<br/>Another occurrence at UpdatePlanBuilder.java:[line 439]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66560');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>org.apache.ignite.internal.processors.query.h2.SchemaManager.createIndex(String, String, QueryIndexDescriptorImpl, boolean, SchemaIndexCacheVisitor) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66560" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.SchemaManager<br/>In method org.apache.ignite.internal.processors.query.h2.SchemaManager.createIndex(String, String, QueryIndexDescriptorImpl, boolean, SchemaIndexCacheVisitor)<br/>At SchemaManager.java:[line 670]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67020');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.apache.ignite.internal.processors.query.h2.twostep.GridReduceQueryExecutor.query(String, GridCacheTwoStepQuery, boolean, boolean, int, GridQueryCancel, Object[], int[], boolean, MvccQueryTracker, Boolean, int) </td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67020" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.apache.ignite.internal.processors.query.h2.twostep.GridReduceQueryExecutor<br/>In method org.apache.ignite.internal.processors.query.h2.twostep.GridReduceQueryExecutor.query(String, GridCacheTwoStepQuery, boolean, boolean, int, GridQueryCancel, Object[], int[], boolean, MvccQueryTracker, Boolean, int)<br/>At GridReduceQueryExecutor.java:[line 673]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING: A prepared statement is generated from a nonconstant String</a>
</h2>

  <p>The code creates an SQL prepared statement from a nonconstant String.
If unchecked, tainted data from a user is used in building this String, SQL injection could
be used to make the prepared statement do something unexpected and undesirable.
</p>

    
<h2>
<a name="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE: Nonconstant string passed to execute or addBatch method on an SQL statement</a>
</h2>

  <p>The method invokes the execute or addBatch method on an SQL statement with a String that seems
to be dynamically generated. Consider using
a prepared statement instead. It is more efficient and less vulnerable to
SQL injection attacks.
</p>

    </body>
</html>
