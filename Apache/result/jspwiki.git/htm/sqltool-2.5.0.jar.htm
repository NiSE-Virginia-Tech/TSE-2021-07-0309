<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/jspwiki.git/sqltool-2.5.0.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>7464 lines of code analyzed,
	in 36 classes, 
	in 3 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">5</td>
<td align="right">0.67</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">26</td>
<td align="right">3.48</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>31</b>
</td>
<td align="right">
<b>4.15</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">31</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>31</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67262');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67262" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.hsqldb.lib.BasicTextJdkLogFormatter<br/>In method org.hsqldb.lib.BasicTextJdkLogFormatter.format(LogRecord)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.processSpecial(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;<br/>Sink parameter 0<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65611');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/Runtime.exec([Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65611" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.processSpecial(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/lang/Runtime.exec([Ljava/lang/String;)Ljava/lang/Process;<br/>Sink parameter 0<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>Unknown source java/util/Arrays.asList([Ljava/lang/Object;)Ljava/util/List;<br/>Unknown source org/hsqldb/cmdline/SqlFile.genWinArgs(Ljava/lang/String;)[Ljava/lang/String;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67301');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67301" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.hsqldb.lib.FrameworkLogger<br/>In method org.hsqldb.lib.FrameworkLogger.privlog(Level, String, Throwable, int, Class)<br/>In &lt;Unknown&gt;<br/>Sink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/hsqldb/lib/FrameworkLogger.privlog(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;ILjava/lang/Class;)V parameter 3<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67420');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67420" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.hsqldb.lib.FrameworkLogger<br/>In method org.hsqldb.lib.FrameworkLogger.privlog(Level, String, Throwable, int, Class)<br/>In &lt;Unknown&gt;<br/>Sink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V<br/>Sink parameter 1<br/>Unknown source org/hsqldb/lib/FrameworkLogger.privlog(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;ILjava/lang/Class;)V parameter 3<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65681');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65681" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.dereferenceAtToFile(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.dereferenceAtToFile(Ljava/lang/String;)Ljava/io/File; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65741');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65741" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.dereferenceAtToFile(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.dereferenceAtToFile(Ljava/lang/String;)Ljava/io/File; parameter 0<br/>Unknown source java/net/URL.getProtocol()Ljava/lang/String;<br/>Unknown source java/net/URL.getHost()Ljava/lang/String;<br/>Unknown source java/net/URL.getPath()Ljava/lang/String;<br/>Unknown source java/net/URL.getFile()Ljava/lang/String;<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/net/URL;Ljava/lang/String;)V<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V<br/>Unknown source org/hsqldb/cmdline/SqlFile.atBase<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65836');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65836" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.processSpecial(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65896');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65896" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.processSpecial(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlTool.DEFAULT_RCFILE<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65956');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65956" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.writeFooter(PrintWriter, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.bottomHtmlFile<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66016');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66016" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.writeHeader(PrintWriter, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.topHtmlFile<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67126');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67126" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlTool<br/>In method org.hsqldb.cmdline.SqlTool.objectMain(String[])<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlTool.objectMain([Ljava/lang/String;)V parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlTool.DEFAULT_RCFILE<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66076');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "([^"]+)?("[^"]*")?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66076" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value ([^"]+)?("[^"]*")?<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.&lt;static initializer for SqlFile&gt;()<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67539');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(?s)\\Q${\\E([^}]+?)(?:\\Q:+\\E([^}]+))?\\Q}" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67539" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (?s)\\Q${\\E([^}]+?)(?:\\Q:+\\E([^}]+))?\\Q}<br/>In class org.hsqldb.lib.RefCapablePropertyResourceBundle<br/>In method new org.hsqldb.lib.RefCapablePropertyResourceBundle(String, PropertyResourceBundle, ClassLoader)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67582');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(?s)\\Q%{\\E(\\d)(?:\\Q:+\\E([^}]+))?\\Q}" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67582" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (?s)\\Q%{\\E(\\d)(?:\\Q:+\\E([^}]+))?\\Q}<br/>In class org.hsqldb.lib.RefCapablePropertyResourceBundle<br/>In method new org.hsqldb.lib.RefCapablePropertyResourceBundle(String, PropertyResourceBundle, ClassLoader)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66119');">
<td>
<span class="priority-1">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66119" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.listTables(char, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Tainted source org/hsqldb/cmdline/SqlFile.getCurrentSchema()Ljava/lang/String;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66189');">
<td>
<span class="priority-1">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66189" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.listTables(char, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Tainted source org/hsqldb/cmdline/SqlFile.getCurrentSchema()Ljava/lang/String;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66259');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66259" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.describe(String, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.describe(Ljava/lang/String;Ljava/lang/String;)V parameter 1<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66319');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66319" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.importDsv(URL, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.url<br/>Unknown source java/util/SortedMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/hsqldb/cmdline/SqlFile.dsvTargetTable<br/>Unknown source org/hsqldb/cmdline/SqlFile.preprocessCsvQuoting(Ljava/lang/String;I)Ljava/lang/String; parameter 1<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.getName()Ljava/lang/String;<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.stringBuffer<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source java/net/URL.getPath()Ljava/lang/String;<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.nextRecord()Ljava/lang/String;<br/>Unknown source org/hsqldb/cmdline/SqlFile.preprocessCsvQuoting(Ljava/lang/String;I)Ljava/lang/String;<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66440');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66440" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.importDsv(URL, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.url<br/>Unknown source java/util/SortedMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/hsqldb/cmdline/SqlFile.dsvTargetTable<br/>Unknown source org/hsqldb/cmdline/SqlFile.preprocessCsvQuoting(Ljava/lang/String;I)Ljava/lang/String; parameter 1<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.getName()Ljava/lang/String;<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.stringBuffer<br/>Unknown source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Unknown source java/net/URL.getPath()Ljava/lang/String;<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.nextRecord()Ljava/lang/String;<br/>Unknown source org/hsqldb/cmdline/SqlFile.preprocessCsvQuoting(Ljava/lang/String;I)Ljava/lang/String;<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.&lt;init&gt;(Ljava/lang/String;)V<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66561');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66561" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.processSQL()<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.lastSqlStatement<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66621');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66621" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.processSQL()<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.lastSqlStatement<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66681');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66681" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.processSpecial(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source java/util/regex/Matcher.group(I)Ljava/lang/String;<br/>Unknown source org/hsqldb/cmdline/sqltool/Token.val<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66869');">
<td>
<span class="priority-1">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66869" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method new org.hsqldb.cmdline.SqlFile(URL, String, boolean)<br/>In &lt;Unknown&gt;<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.&lt;init&gt;(Ljava/net/URL;Ljava/lang/String;Z)V parameter 2<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66946');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66946" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method new org.hsqldb.cmdline.SqlFile(SqlFile, URL)<br/>In &lt;Unknown&gt;<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.&lt;init&gt;(Lorg/hsqldb/cmdline/SqlFile;Ljava/net/URL;)V parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67006');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67006" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.load(String, URL, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.load(Ljava/lang/String;Ljava/net/URL;Ljava/lang/String;)V parameter 1<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67066');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67066" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.loadBinary(URL)<br/>In &lt;Unknown&gt;<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/SqlFile.loadBinary(Ljava/net/URL;)[B parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67202');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67202" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.hsqldb.cmdline.sqltool.FileRecordReader<br/>In method new org.hsqldb.cmdline.sqltool.FileRecordReader(URL, String, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/hsqldb/cmdline/sqltool/FileRecordReader.url<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66746');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>org.hsqldb.cmdline.SqlFile.listTables(char, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66746" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.listTables(char, String)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66787');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>org.hsqldb.cmdline.SqlFile.importDsv(URL, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66787" style="display: none;">
<a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.importDsv(URL, String)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66828');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.hsqldb.cmdline.SqlFile.importDsv(URL, String) </td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66828" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.hsqldb.cmdline.SqlFile<br/>In method org.hsqldb.cmdline.SqlFile.importDsv(URL, String)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="COMMAND_INJECTION">COMMAND_INJECTION: Potential Command Injection</a>
</h2>
            
<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>import java.lang.Runtime;

Runtime r = Runtime.getRuntime();
r.exec("/bin/sh -c some_tool" + input);</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>
</p>

        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
</h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING: A prepared statement is generated from a nonconstant String</a>
</h2>

  <p>The code creates an SQL prepared statement from a nonconstant String.
If unchecked, tainted data from a user is used in building this String, SQL injection could
be used to make the prepared statement do something unexpected and undesirable.
</p>

    
<h2>
<a name="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE: Nonconstant string passed to execute or addBatch method on an SQL statement</a>
</h2>

  <p>The method invokes the execute or addBatch method on an SQL statement with a String that seems
to be dynamically generated. Consider using
a prepared statement instead. It is more efficient and less vulnerable to
SQL injection attacks.
</p>

    </body>
</html>
