<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/archiva.git/derbytools-10.13.1.1.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>12473 lines of code analyzed,
	in 92 classes, 
	in 11 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">6</td>
<td align="right">0.48</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">38</td>
<td align="right">3.05</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>44</b>
</td>
<td align="right">
<b>3.53</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">44</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>44</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65741');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65741" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.impl.tools.dblook.Logs<br/>In method org.apache.derby.impl.tools.dblook.Logs.debug(Exception)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65780');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65780" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.impl.tools.dblook.Logs<br/>In method org.apache.derby.impl.tools.dblook.Logs.debug(Exception)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66534');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66534" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.util<br/>In method org.apache.derby.impl.tools.ij.util.getDataSourceConnection(String, String, String, String, boolean)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67659');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67659" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.tools.JDBCDisplayUtil<br/>In method org.apache.derby.tools.JDBCDisplayUtil.ShowException(PrintStream, Throwable)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67698');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67698" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.tools.JDBCDisplayUtil<br/>In method org.apache.derby.tools.JDBCDisplayUtil.ShowException(PrintWriter, Throwable)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67737');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67737" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.tools.JDBCDisplayUtil<br/>In method org.apache.derby.tools.JDBCDisplayUtil.doTrace(PrintStream, Exception)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67776');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67776" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.derby.tools.JDBCDisplayUtil<br/>In method org.apache.derby.tools.JDBCDisplayUtil.doTrace(PrintWriter, Exception)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66059');">
<td>
<span class="priority-2">SECCI</span>
</td>
<td>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66059" style="display: none;">
<a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.ij<br/>In method org.apache.derby.impl.tools.ij.ij.Bang()<br/>In &lt;Unknown&gt;<br/>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/Token.image<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.dblook.DB_Jar<br/>In method org.apache.derby.impl.tools.dblook.DB_Jar.doCopy(String, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/dblook/DB_Jar.doCopy(Ljava/lang/String;Ljava/lang/String;)V parameter 1<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65616');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65616" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.dblook.DB_Jar<br/>In method org.apache.derby.impl.tools.dblook.DB_Jar.doJars(String, Connection, boolean)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/tools/dblook.stripQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65939');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65939" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.Main$1<br/>In method org.apache.derby.impl.tools.ij.Main$1.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/Main$1.val$inFile1<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66573');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66573" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.util<br/>In method org.apache.derby.impl.tools.ij.util.getPropertyArg(String[])<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/util.getArg(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/derby/impl/tools/ij/util.getArg(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/util.getPropertyArg([Ljava/lang/String;)Z parameter 0<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66660');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66660" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.utilMain<br/>In method org.apache.derby.impl.tools.ij.utilMain.newInput(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/utilMain.newInput(Ljava/lang/String;)V parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67112');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67112" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.planexporter.CreateHTMLFile<br/>In method org.apache.derby.impl.tools.planexporter.CreateHTMLFile.getHTML(String, String, String, boolean)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/planexporter/CreateHTMLFile.getHTML(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V parameter 2<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67334');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67334" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.checkDirectory(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 1<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.checkDirectory(Ljava/lang/String;)Lorg/apache/derby/impl/tools/sysinfo/ZipInfoProperties; parameter 0<br/>Method usage not detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67399');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67399" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.checkDirectory(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.checkDirectory(Ljava/lang/String;)Lorg/apache/derby/impl/tools/sysinfo/ZipInfoProperties; parameter 0<br/>Method usage not detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67464');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67464" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.checkFile(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.checkFile(Ljava/lang/String;)Lorg/apache/derby/impl/tools/sysinfo/ZipInfoProperties; parameter 0<br/>Method usage not detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67529');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67529" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main<br/>In method org.apache.derby.impl.tools.sysinfo.Main.formatURL(URL)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/net/URLDecoder.decode(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/net/URL.toString()Ljava/lang/String;<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main.formatURL(Ljava/net/URL;)Ljava/lang/String; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67599');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67599" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.impl.tools.sysinfo.Main$8<br/>In method org.apache.derby.impl.tools.sysinfo.Main$8.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/sysinfo/Main$8.val$cpEntry<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67875');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67875" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.derby.tools.PlanExporter$2<br/>In method org.apache.derby.tools.PlanExporter$2.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/tools/PlanExporter$2.val$fileName<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65676');">
<td>
<span class="priority-1">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65676" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.derby.impl.tools.dblook.DB_Jar<br/>In method org.apache.derby.impl.tools.dblook.DB_Jar.doCopy(String, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/dblook/DB_Jar.doCopy(Ljava/lang/String;Ljava/lang/String;)V parameter 0<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65819');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;Z)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65819" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.derby.impl.tools.dblook.Logs<br/>In method org.apache.derby.impl.tools.dblook.Logs.initLogs(String, String, boolean, boolean, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;Z)V<br/>Sink parameter 1<br/>Unknown source org/apache/derby/impl/tools/dblook/Logs.initLogs(Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;)Z parameter 3<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65999');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65999" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.Main$2<br/>In method org.apache.derby.impl.tools.ij.Main$2.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/Main$2.val$outFile<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67177');">
<td>
<span class="priority-1">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67177" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.derby.impl.tools.planexporter.CreateHTMLFile<br/>In method org.apache.derby.impl.tools.planexporter.CreateHTMLFile.getHTML(String, String, String, boolean)<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/planexporter/CreateHTMLFile.getHTML(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V parameter 1<br/>Method usage with tainted arguments detected<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67815');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67815" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.derby.tools.PlanExporter$1<br/>In method org.apache.derby.tools.PlanExporter$1.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/derby/tools/PlanExporter$1.val$fileName<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65879');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65879" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.AsyncStatement<br/>In method org.apache.derby.impl.tools.ij.AsyncStatement.run()<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/AsyncStatement.stmt<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66129');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66129" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.ij<br/>In method org.apache.derby.impl.tools.ij.ij.ExecuteStatement()<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/ij.token<br/>Unknown source org/apache/derby/impl/tools/ij/ij.jj_consume_token(I)Lorg/apache/derby/impl/tools/ij/Token;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66194');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66194" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.ij<br/>In method org.apache.derby.impl.tools.ij.ij.ExecuteStatement()<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/Token.image<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66264');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66264" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.ij<br/>In method org.apache.derby.impl.tools.ij.ij.ExecuteStatement()<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/Token.image<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66334');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66334" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.ij<br/>In method org.apache.derby.impl.tools.ij.ij.GetCursorStatement()<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/Token.image<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66404');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66404" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.ij<br/>In method org.apache.derby.impl.tools.ij.ij.PrepareStatement()<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/Token.image<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/apache/derby/impl/tools/ij/ij.stringValue(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66474');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66474" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.ij.ij<br/>In method org.apache.derby.impl.tools.ij.ij.executeImmediate(String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/ij/ij.executeImmediate(Ljava/lang/String;)Lorg/apache/derby/impl/tools/ij/ijResult; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66720');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66720" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.optional.DBMDWrapper<br/>In method org.apache.derby.impl.tools.optional.DBMDWrapper.prepareStatement(Connection, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/optional/DBMDWrapper.prepareStatement(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66821');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66821" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.impl.tools.optional.ForeignDBViews<br/>In method org.apache.derby.impl.tools.optional.ForeignDBViews.prepareStatement(Connection, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/impl/tools/optional/ForeignDBViews.prepareStatement(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67935');">
<td>
<span class="priority-2">SECSQLIJDBC</span>
</td>
<td>This use of java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67935" style="display: none;">
<a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
<br/>In class org.apache.derby.tools.SignatureChecker<br/>In method org.apache.derby.tools.SignatureChecker.prepareStatement(Connection, String)<br/>In &lt;Unknown&gt;<br/>Sink method java/sql/Connection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/apache/derby/tools/SignatureChecker.prepareStatement(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 0<br/>In &lt;Unknown&gt;<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66922');">
<td>
<span class="priority-2">SECXSLT</span>
</td>
<td>A malicious XSLT could be provided to trigger remote code execution</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66922" style="display: none;">
<a href="#MALICIOUS_XSLT">Bug type MALICIOUS_XSLT (click for details)</a>
<br/>In class org.apache.derby.impl.tools.planexporter.CreateHTMLFile<br/>In method org.apache.derby.impl.tools.planexporter.CreateHTMLFile.getHTML(String, String, String, boolean)<br/>In &lt;Unknown&gt;<br/>Sink method javax/xml/transform/TransformerFactory.newTransformer(Ljavax/xml/transform/Source;)Ljavax/xml/transform/Transformer;<br/>Sink parameter 0<br/>Unknown source java/net/URL.openStream()Ljava/io/InputStream;<br/>Unknown source javax/xml/transform/stream/StreamSource.&lt;init&gt;(Ljava/io/InputStream;)V<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66987');">
<td>
<span class="priority-2">SECXSLT</span>
</td>
<td>A malicious XSLT could be provided to trigger remote code execution</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66987" style="display: none;">
<a href="#MALICIOUS_XSLT">Bug type MALICIOUS_XSLT (click for details)</a>
<br/>In class org.apache.derby.impl.tools.planexporter.CreateHTMLFile<br/>In method org.apache.derby.impl.tools.planexporter.CreateHTMLFile.getHTML(String, String, String, boolean)<br/>In &lt;Unknown&gt;<br/>Sink method javax/xml/transform/TransformerFactory.newTransformer(Ljavax/xml/transform/Source;)Ljavax/xml/transform/Transformer;<br/>Sink parameter 0<br/>Unknown source javax/xml/transform/stream/StreamSource.&lt;init&gt;(Ljava/lang/String;)V<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67047');">
<td>
<span class="priority-2">SECXSLT</span>
</td>
<td>A malicious XSLT could be provided to trigger remote code execution</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67047" style="display: none;">
<a href="#MALICIOUS_XSLT">Bug type MALICIOUS_XSLT (click for details)</a>
<br/>In class org.apache.derby.impl.tools.planexporter.CreateHTMLFile<br/>In method org.apache.derby.impl.tools.planexporter.CreateHTMLFile.getHTML(String, String, String, boolean)<br/>In &lt;Unknown&gt;<br/>Sink method javax/xml/transform/TransformerFactory.newTransformer(Ljavax/xml/transform/Source;)Ljavax/xml/transform/Transformer;<br/>Sink parameter 0<br/>Unknown source java/net/URL.openStream()Ljava/io/InputStream;<br/>Unknown source javax/xml/transform/stream/StreamSource.&lt;init&gt;(Ljava/io/InputStream;)V<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67248');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67248" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.derby.impl.tools.planexporter.CreateHTMLFile<br/>In method org.apache.derby.impl.tools.planexporter.CreateHTMLFile.getHTML(String, String, String, boolean)<br/>In &lt;Unknown&gt;<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67291');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67291" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.derby.impl.tools.planexporter.CreateHTMLFile<br/>In method org.apache.derby.impl.tools.planexporter.CreateHTMLFile.getHTML(String, String, String, boolean)<br/>In &lt;Unknown&gt;<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66780');">
<td>
<span class="priority-1">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.apache.derby.impl.tools.optional.DBMDWrapper.registerFunction(Connection, Method) </td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66780" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.apache.derby.impl.tools.optional.DBMDWrapper<br/>In method org.apache.derby.impl.tools.optional.DBMDWrapper.registerFunction(Connection, Method)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66881');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.apache.derby.impl.tools.optional.ForeignDBViews.registerForeignTable(DatabaseMetaData, String, String, String, String, Connection) </td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66881" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.apache.derby.impl.tools.optional.ForeignDBViews<br/>In method org.apache.derby.impl.tools.optional.ForeignDBViews.registerForeignTable(DatabaseMetaData, String, String, String, String, Connection)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68001');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.apache.derby.tools.SignatureChecker.matchFunctions(Connection) </td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68001" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.apache.derby.tools.SignatureChecker<br/>In method org.apache.derby.tools.SignatureChecker.matchFunctions(Connection)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68042');">
<td>
<span class="priority-2">SQL</span>
</td>
<td>A prepared statement is generated from a nonconstant String in org.apache.derby.tools.SignatureChecker.matchProcedures(Connection) </td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68042" style="display: none;">
<a href="#SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">Bug type SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING (click for details)</a>
<br/>In class org.apache.derby.tools.SignatureChecker<br/>In method org.apache.derby.tools.SignatureChecker.matchProcedures(Connection)<br/>In &lt;Unknown&gt;</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="COMMAND_INJECTION">COMMAND_INJECTION: Potential Command Injection</a>
</h2>
            
<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>import java.lang.Runtime;

Runtime r = Runtime.getRuntime();
r.exec("/bin/sh -c some_tool" + input);</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_OUT">PATH_TRAVERSAL_OUT: Potential Path Traversal (file write)</a>
</h2>
            
<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
</h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        
<h2>
<a name="MALICIOUS_XSLT">MALICIOUS_XSLT: A malicious XSLT could be provided</a>
</h2>
            
<p>
    "XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents".<sup>[1]</sup><br/>
    It is possible to attach malicious behavior to those style sheets. Therefore, if an attacker can control the content or the source of the
    style sheet, he might be able to trigger remote code execution.<sup>[2]</sup>
</p>
<p>
<b>Code at risk:</b><br/>
<pre>
Source xslt = new StreamSource(new FileInputStream(inputUserFile)); //Dangerous source

Transformer transformer = TransformerFactory.newInstance().newTransformer(xslt);

Source text = new StreamSource(new FileInputStream("/data_2_process.xml"));
transformer.transform(text, new StreamResult(...));
</pre>
</p>
<p>
<b>Solution:</b><br/>

<p>The solution is to enable the secure processing mode which will block potential reference to Java classes such as <code>java.lang.Runtime</code>.</p>

<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
Source xslt  = new StreamSource(new FileInputStream(inputUserFile));

Transformer transformer = factory.newTransformer(xslt);
</pre>

<p>
Alternatively, make sure the style sheet is loaded from a safe sources and make sure that vulnerabilities such as
Path traversal <sup>[3][4]</sup> are not possible.
</p>
<p>
<b>References</b><br/>
[1] <a href="https://en.wikipedia.org/wiki/XSLT">Wikipedia: XSLT (Extensible Stylesheet Language Transformations)</a><br/>
<a href="https://prezi.com/y_fuybfudgnd/offensive-xslt/">Offensive XSLT</a> by Nicolas Grégoire<br/>
[2] <a href="https://www.agarri.fr/blog/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html">From XSLT code execution to Meterpreter shells</a> by Nicolas Grégoire<br/>
<a href="https://xhe.myxwiki.org/xwiki/bin/view/Main/">XSLT Hacking Encyclopedia</a> by Nicolas Grégoire<br/>
<a href="https://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/">Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL injection</a><br/>
<a href="https://www.w3.org/TR/xslt">w3.org XSL Transformations (XSLT) Version 1.0</a> : w3c specification<br/>
[3] <a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
[4] <a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
</p>
            
        
<h2>
<a name="XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY: XML parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY: XSLT parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XSLT External Entity (XXE) attacks can occur when an XSLT parser supports external entities while processing XSLT received
from an untrusted source.</p>
<p><b>Risk: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
   &lt;xsl:template match=&quot;/&quot;&gt;
       &lt;xsl:value-of select=&quot;document(&apos;/etc/passwd&apos;)&quot;&gt;
   &lt;/xsl:value-of&gt;&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>
<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING">SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING: A prepared statement is generated from a nonconstant String</a>
</h2>

  <p>The code creates an SQL prepared statement from a nonconstant String.
If unchecked, tainted data from a user is used in building this String, SQL injection could
be used to make the prepared statement do something unexpected and undesirable.
</p>

    </body>
</html>
