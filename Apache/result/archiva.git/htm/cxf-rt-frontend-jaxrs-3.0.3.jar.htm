<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/archiva.git/cxf-rt-frontend-jaxrs-3.0.3.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>15005 lines of code analyzed,
	in 232 classes, 
	in 18 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">5</td>
<td align="right">0.33</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">17</td>
<td align="right">1.13</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>22</b>
</td>
<td align="right">
<b>1.47</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">22</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>22</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68654');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68654" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.utils.ExceptionUtils<br/>In method org.apache.cxf.jaxrs.utils.ExceptionUtils.getStackTrace(Throwable)<br/>At ExceptionUtils.java:[line 42]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66105');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of java/util/logging/Logger.fine(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66105" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.impl.MediaTypeHeaderProvider<br/>In method org.apache.cxf.jaxrs.impl.MediaTypeHeaderProvider.handleMediaTypeWithoutSubtype(String)<br/>At MediaTypeHeaderProvider.java:[line 165]<br/>Sink method java/util/logging/Logger.fine(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/ws/rs/core/MediaType.getType()Ljava/lang/String;<br/>Unknown source org/apache/cxf/jaxrs/impl/MediaTypeHeaderProvider.typeToString(Ljavax/ws/rs/core/MediaType;)Ljava/lang/String;<br/>Unknown source javax/ws/rs/core/MediaType.getParameters()Ljava/util/Map;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source java/util/Map$Entry.getValue()Ljava/lang/Object;<br/>Unknown source org/apache/cxf/jaxrs/impl/MediaTypeHeaderProvider.typeToString(Ljavax/ws/rs/core/MediaType;Ljava/util/List;)Ljava/lang/String;<br/>Unknown source org/apache/cxf/jaxrs/impl/MediaTypeHeaderProvider.handleMediaTypeWithoutSubtype(Ljava/lang/String;)Ljavax/ws/rs/core/MediaType; parameter 0<br/>Unknown source java/util/Map.entrySet()Ljava/util/Set;<br/>Unknown source javax/ws/rs/core/MediaType.getSubtype()Ljava/lang/String;<br/>Unknown source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Method usage with tainted arguments detected<br/>At JAXRSInvoker.java:[line 248]<br/>At Attachment.java:[line 124]<br/>At Attachment.java:[line 125]<br/>At MultipartBody.java:[line 34]<br/>At MediaTypeHeaderProvider.java:[line 41]<br/>At MediaTypeHeaderProvider.java:[line 50]<br/>At MediaTypeHeaderProvider.java:[line 61]<br/>At MediaTypeHeaderProvider.java:[line 108]<br/>At MediaTypeHeaderProvider.java:[line 117]<br/>At MediaTypeHeaderProvider.java:[line 121]<br/>At MediaTypeHeaderProvider.java:[line 123]<br/>At MediaTypeHeaderProvider.java:[line 124]<br/>At MediaTypeHeaderProvider.java:[line 127]<br/>At MediaTypeHeaderProvider.java:[line 131]<br/>At MediaTypeHeaderProvider.java:[line 165]<br/>At MetadataMap.java:[line 123]<br/>At MetadataMap.java:[line 124]<br/>At MetadataMap.java:[line 154]<br/>At MetadataMap.java:[line 157]<br/>At ReaderInterceptorContextImpl.java:[line 81]<br/>At WriterInterceptorContextImpl.java:[line 103]<br/>At WriterInterceptorContextImpl.java:[line 104]<br/>At JAXRSInInterceptor.java:[line 120]<br/>At JAXRSInInterceptor.java:[line 122]<br/>At JAXRSInInterceptor.java:[line 123]<br/>At JAXRSInInterceptor.java:[line 135]<br/>At JAXRSInInterceptor.java:[line 137]<br/>At JAXRSInInterceptor.java:[line 138]<br/>At JAXRSInInterceptor.java:[line 142]<br/>At JAXRSInInterceptor.java:[line 145]<br/>At JAXRSInInterceptor.java:[line 150]<br/>At JAXRSInInterceptor.java:[line 177]<br/>At JAXRSOutInterceptor.java:[line 213]<br/>At JAXRSOutInterceptor.java:[line 275]<br/>At JAXRSOutInterceptor.java:[line 392]<br/>At AbstractConfigurableProvider.java:[line 75]<br/>At AbstractConfigurableProvider.java:[line 92]<br/>At DataSourceProvider.java:[line 92]<br/>At DataSourceProvider.java:[line 100]<br/>At JAXBElementProvider.java:[line 482]<br/>At MultipartProvider.java:[line 276]<br/>At MultipartProvider.java:[line 278]<br/>At MultipartProvider.java:[line 280]<br/>At MultipartProvider.java:[line 289]<br/>At MultipartProvider.java:[line 291]<br/>At MultipartProvider.java:[line 296]<br/>At MultipartProvider.java:[line 298]<br/>At MultipartProvider.java:[line 310]<br/>At MultipartProvider.java:[line 326]<br/>At MultipartProvider.java:[line 352]<br/>At MultipartProvider.java:[line 361]<br/>At MultipartProvider.java:[line 380]<br/>At MultipartProvider.java:[line 406]<br/>At MultipartProvider.java:[line 414]<br/>At XSLTJaxbProvider.java:[line 207]<br/>At HttpUtils.java:[line 408]<br/>At HttpUtils.java:[line 414]<br/>At HttpUtils.java:[line 416]<br/>At JAXRSUtils.java:[line 194]<br/>At JAXRSUtils.java:[line 196]<br/>At JAXRSUtils.java:[line 199]<br/>At JAXRSUtils.java:[line 207]<br/>At JAXRSUtils.java:[line 212]<br/>At JAXRSUtils.java:[line 217]<br/>At JAXRSUtils.java:[line 221]<br/>At JAXRSUtils.java:[line 228]<br/>At JAXRSUtils.java:[line 362]<br/>At JAXRSUtils.java:[line 379]<br/>At JAXRSUtils.java:[line 642]<br/>At JAXRSUtils.java:[line 647]<br/>At JAXRSUtils.java:[line 812]<br/>At JAXRSUtils.java:[line 1402]<br/>At JAXRSUtils.java:[line 1403]<br/>At JAXRSUtils.java:[line 1407]<br/>At JAXRSUtils.java:[line 1498]<br/>At JAXRSUtils.java:[line 1566]<br/>At JAXRSUtils.java:[line 1572]<br/>At JAXRSUtils.java:[line 1678]<br/>At AttachmentUtils.java:[line 89]<br/>At AttachmentUtils.java:[line 94]<br/>At AttachmentUtils.java:[line 132]<br/>At AttachmentUtils.java:[line 155]<br/>At AttachmentUtils.java:[line 160]<br/>At AttachmentUtils.java:[line 171]<br/>At AttachmentUtils.java:[line 231]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67360');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of java/util/logging/Logger.fine(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67360" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor<br/>In method org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(Message, Exchange)<br/>At JAXRSInInterceptor.java:[line 192]<br/>Sink method java/util/logging/Logger.fine(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source org/apache/cxf/jaxrs/utils/HttpUtils.getProtocolHeader(Lorg/apache/cxf/message/Message;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/apache/cxf/message/Message.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source javax/ws/rs/core/MultivaluedMap.getFirst(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/apache/cxf/jaxrs/utils/HttpUtils.getProtocolHeader(Lorg/apache/cxf/message/Message;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Unknown source org/apache/cxf/jaxrs/utils/HttpUtils.getPathToMatch(Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>Tainted source org/apache/cxf/jaxrs/utils/HttpUtils.getPathToMatch(Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;<br/>Tainted source org/apache/cxf/jaxrs/utils/HttpUtils.getPathToMatch(Lorg/apache/cxf/message/Message;Z)Ljava/lang/String;<br/>Tainted source org/apache/cxf/jaxrs/utils/HttpUtils.getProtocolHeader(Lorg/apache/cxf/message/Message;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>At JAXRSInInterceptor.java:[line 114]<br/>At JAXRSInInterceptor.java:[line 192]<br/>At HttpUtils.java:[line 393]<br/>At HttpUtils.java:[line 397]<br/>At HttpUtils.java:[line 398]<br/>At HttpUtils.java:[line 402]<br/>At HttpUtils.java:[line 403]<br/>At HttpUtils.java:[line 408]<br/>At HttpUtils.java:[line 414]<br/>At HttpUtils.java:[line 416]<br/>At HttpUtils.java:[line 479]<br/>At HttpUtils.java:[line 480]<br/>At HttpUtils.java:[line 484]<br/>At HttpUtils.java:[line 487]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67604');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of java/util/logging/Logger.fine(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67604" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor<br/>In method org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(Message, Exchange)<br/>At JAXRSInInterceptor.java:[line 193]<br/>Sink method java/util/logging/Logger.fine(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source org/apache/cxf/jaxrs/utils/HttpUtils.getProtocolHeader(Lorg/apache/cxf/message/Message;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/apache/cxf/message/Message.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source javax/ws/rs/core/MultivaluedMap.getFirst(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/apache/cxf/jaxrs/utils/HttpUtils.getProtocolHeader(Lorg/apache/cxf/message/Message;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>At JAXRSInInterceptor.java:[line 110]<br/>At JAXRSInInterceptor.java:[line 193]<br/>At HttpUtils.java:[line 414]<br/>At HttpUtils.java:[line 416]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67728');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of java/util/logging/Logger.fine(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67728" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor<br/>In method org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(Message, Exchange)<br/>At JAXRSInInterceptor.java:[line 195]<br/>Sink method java/util/logging/Logger.fine(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/apache/cxf/helpers/CastUtils.cast(Ljava/util/Map;)Ljava/util/Map;<br/>Tainted source org/apache/cxf/jaxrs/utils/HttpUtils.getProtocolHeader(Lorg/apache/cxf/message/Message;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source org/apache/cxf/message/Message.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source javax/ws/rs/core/MultivaluedMap.getFirst(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/apache/cxf/jaxrs/utils/HttpUtils.getProtocolHeader(Lorg/apache/cxf/message/Message;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Tainted source org/apache/cxf/jaxrs/utils/HttpUtils.getProtocolHeader(Lorg/apache/cxf/message/Message;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>At JAXRSInInterceptor.java:[line 135]<br/>At JAXRSInInterceptor.java:[line 137]<br/>At JAXRSInInterceptor.java:[line 138]<br/>At JAXRSInInterceptor.java:[line 142]<br/>At JAXRSInInterceptor.java:[line 145]<br/>At JAXRSInInterceptor.java:[line 195]<br/>At HttpUtils.java:[line 408]<br/>At HttpUtils.java:[line 414]<br/>At HttpUtils.java:[line 416]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68708');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68708" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.utils.ResourceUtils<br/>In method org.apache.cxf.jaxrs.utils.ResourceUtils.getResourceURL(String, Bus)<br/>At ResourceUtils.java:[line 477]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getResourceURL(Ljava/lang/String;Lorg/apache/cxf/Bus;)Ljava/net/URL; parameter 1<br/>At AbstractJAXRSFactoryBean.java:[line 408]<br/>At AbstractJAXRSFactoryBean.java:[line 424]<br/>At AbstractJAXBProvider.java:[line 223]<br/>At AbstractJAXBProvider.java:[line 225]<br/>At AbstractJAXBProvider.java:[line 230]<br/>At AbstractJAXBProvider.java:[line 462]<br/>At XSLTJaxbProvider.java:[line 177]<br/>At XSLTJaxbProvider.java:[line 179]<br/>At XSLTJaxbProvider.java:[line 364]<br/>At XSLTJaxbProvider.java:[line 368]<br/>At XSLTJaxbProvider.java:[line 373]<br/>At XSLTJaxbProvider.java:[line 374]<br/>At XSLTJaxbProvider.java:[line 380]<br/>At XSLTJaxbProvider.java:[line 381]<br/>At XSLTJaxbProvider.java:[line 483]<br/>At CXFNonSpringJaxrsServlet.java:[line 115]<br/>At ResourceUtils.java:[line 448]<br/>At ResourceUtils.java:[line 461]<br/>At ResourceUtils.java:[line 512]<br/>At ResourceUtils.java:[line 518]<br/>At SchemaHandler.java:[line 66]<br/>At SchemaHandler.java:[line 70]<br/>At SchemaHandler.java:[line 88]<br/>At SchemaHandler.java:[line 94]<br/>At SchemaHandler.java:[line 117]<br/>At SchemaHandler.java:[line 135]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66047');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(([\\w]+="[^"]*")|([\\w]+=[\\w]+)|([\\w]+))(;(([\\w]+="[^"]*")|([\\w]+=[\\w]+)|([\\w]+)))?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66047" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (([\\w]+="[^"]*")|([\\w]+=[\\w]+)|([\\w]+))(;(([\\w]+="[^"]*")|([\\w]+=[\\w]+)|([\\w]+)))?<br/>In class org.apache.cxf.jaxrs.impl.HttpHeadersImpl<br/>In method org.apache.cxf.jaxrs.impl.HttpHeadersImpl.&lt;static initializer for HttpHeadersImpl&gt;()<br/>At HttpHeadersImpl.java:[line 62]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67971');">
<td>
<span class="priority-1">SECSFDR</span>
</td>
<td>RequestDispatcher populated with user controlled parameters</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67971" style="display: none;">
<a href="#REQUESTDISPATCHER_FILE_DISCLOSURE">Bug type REQUESTDISPATCHER_FILE_DISCLOSURE (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.provider.RequestDispatcherProvider<br/>In method org.apache.cxf.jaxrs.provider.RequestDispatcherProvider.writeTo(Object, Class, Type, Annotation[], MediaType, MultivaluedMap, OutputStream)<br/>At RequestDispatcherProvider.java:[line 206]<br/>Sink method javax/servlet/RequestDispatcher.forward(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)V<br/>Sink parameter 2<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.enumResources<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.resourceExtension<br/>Tainted source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.getRequestDispatcher(Ljavax/servlet/ServletContext;Ljava/lang/Class;Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.getResourcePath(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getServletPath()Ljava/lang/String;<br/>Unknown source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source org/apache/cxf/jaxrs/ext/MessageContext.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source javax/servlet/ServletContext.getRequestDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.locationPrefix<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.servletPath<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.dispatcherName<br/>Unknown source java/lang/Object.toString()Ljava/lang/String;<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.getRequestDispatcher(Ljavax/servlet/ServletContext;Ljava/lang/Class;Ljava/lang/String;)Ljavax/servlet/RequestDispatcher; parameter 0<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.resourcePath<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.getClassResourceName(Ljava/lang/Class;)Ljava/lang/String;<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.getPathFromMessageContext()Ljava/lang/String;<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.resourcePaths<br/>Unknown source javax/servlet/ServletContext.getNamedDispatcher(Ljava/lang/String;)Ljavax/servlet/RequestDispatcher;<br/>Unknown source org/apache/cxf/jaxrs/provider/RequestDispatcherProvider.classResources<br/>At RequestDispatcherProvider.java:[line 121]<br/>At RequestDispatcherProvider.java:[line 122]<br/>At RequestDispatcherProvider.java:[line 123]<br/>At RequestDispatcherProvider.java:[line 178]<br/>At RequestDispatcherProvider.java:[line 180]<br/>At RequestDispatcherProvider.java:[line 184]<br/>At RequestDispatcherProvider.java:[line 187]<br/>At RequestDispatcherProvider.java:[line 191]<br/>At RequestDispatcherProvider.java:[line 226]<br/>At RequestDispatcherProvider.java:[line 231]<br/>At RequestDispatcherProvider.java:[line 238]<br/>At RequestDispatcherProvider.java:[line 243]<br/>At RequestDispatcherProvider.java:[line 248]<br/>At RequestDispatcherProvider.java:[line 252]<br/>At RequestDispatcherProvider.java:[line 261]<br/>At RequestDispatcherProvider.java:[line 263]<br/>At RequestDispatcherProvider.java:[line 265]<br/>At RequestDispatcherProvider.java:[line 267]<br/>At RequestDispatcherProvider.java:[line 294]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68319');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68319" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.provider.XSLTJaxbProvider<br/>In method org.apache.cxf.jaxrs.provider.XSLTJaxbProvider.createTemplates(URL)<br/>At XSLTJaxbProvider.java:[line 496]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/cxf/jaxrs/provider/XSLTJaxbProvider.createTemplates(Ljava/net/URL;)Ljavax/xml/transform/Templates; parameter 0<br/>At XSLTJaxbProvider.java:[line 177]<br/>At XSLTJaxbProvider.java:[line 179]<br/>At XSLTJaxbProvider.java:[line 181]<br/>At XSLTJaxbProvider.java:[line 364]<br/>At XSLTJaxbProvider.java:[line 368]<br/>At XSLTJaxbProvider.java:[line 373]<br/>At XSLTJaxbProvider.java:[line 374]<br/>At XSLTJaxbProvider.java:[line 380]<br/>At XSLTJaxbProvider.java:[line 381]<br/>At XSLTJaxbProvider.java:[line 483]<br/>At ResourceUtils.java:[line 469]<br/>At ResourceUtils.java:[line 472]<br/>At ResourceUtils.java:[line 475]<br/>At ResourceUtils.java:[line 479]<br/>At ResourceUtils.java:[line 497]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69037');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69037" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.utils.ResourceUtils<br/>In method org.apache.cxf.jaxrs.utils.ResourceUtils.getResourceStream(String, Bus)<br/>At ResourceUtils.java:[line 462]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source java/net/URI.toURL()Ljava/net/URL;<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getResourceURL(Ljava/lang/String;Lorg/apache/cxf/Bus;)Ljava/net/URL; parameter 1<br/>Unknown source org/apache/cxf/common/classloader/ClassLoaderUtils.getResource(Ljava/lang/String;Ljava/lang/Class;)Ljava/net/URL;<br/>Unknown source java/io/File.toURI()Ljava/net/URI;<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getResource(Ljava/lang/String;Ljava/lang/Class;Lorg/apache/cxf/Bus;)Ljava/lang/Object;<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getResourceURL(Ljava/lang/String;Lorg/apache/cxf/Bus;)Ljava/net/URL;<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getResourceStream(Ljava/lang/String;Lorg/apache/cxf/Bus;)Ljava/io/InputStream; parameter 1<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getClasspathResourceURL(Ljava/lang/String;Ljava/lang/Class;Lorg/apache/cxf/Bus;)Ljava/net/URL;<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source org/apache/cxf/resource/ResourceManager.resolveResource(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;<br/>At AbstractJAXRSFactoryBean.java:[line 408]<br/>At AbstractJAXRSFactoryBean.java:[line 424]<br/>At CXFNonSpringJaxrsServlet.java:[line 115]<br/>At ResourceUtils.java:[line 448]<br/>At ResourceUtils.java:[line 461]<br/>At ResourceUtils.java:[line 469]<br/>At ResourceUtils.java:[line 472]<br/>At ResourceUtils.java:[line 475]<br/>At ResourceUtils.java:[line 479]<br/>At ResourceUtils.java:[line 497]<br/>At ResourceUtils.java:[line 512]<br/>At ResourceUtils.java:[line 518]<br/>At SchemaHandler.java:[line 135]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69281');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69281" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.utils.schemas.SchemaHandler<br/>In method org.apache.cxf.jaxrs.utils.schemas.SchemaHandler.createSchema(List, String, Bus)<br/>At SchemaHandler.java:[line 103]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source java/net/URI.toURL()Ljava/net/URL;<br/>Unknown source org/apache/cxf/common/classloader/ClassLoaderUtils.getResource(Ljava/lang/String;Ljava/lang/Class;)Ljava/net/URL;<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getResource(Ljava/lang/String;Ljava/lang/Class;Lorg/apache/cxf/Bus;)Ljava/lang/Object;<br/>Unknown source org/apache/cxf/jaxrs/utils/schemas/SchemaHandler.createSchema(Ljava/util/List;Ljava/lang/String;Lorg/apache/cxf/Bus;)Ljavax/xml/validation/Schema; parameter 2<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getClasspathResourceURL(Ljava/lang/String;Ljava/lang/Class;Lorg/apache/cxf/Bus;)Ljava/net/URL;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getResourceURL(Ljava/lang/String;Lorg/apache/cxf/Bus;)Ljava/net/URL; parameter 1<br/>Unknown source java/io/File.toURI()Ljava/net/URI;<br/>Unknown source org/apache/cxf/jaxrs/utils/ResourceUtils.getResourceURL(Ljava/lang/String;Lorg/apache/cxf/Bus;)Ljava/net/URL;<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source org/apache/cxf/resource/ResourceManager.resolveResource(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;<br/>Unknown source org/apache/cxf/common/util/ClasspathScanner.findResources(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;<br/>At AbstractJAXBProvider.java:[line 223]<br/>At AbstractJAXBProvider.java:[line 225]<br/>At AbstractJAXBProvider.java:[line 230]<br/>At AbstractJAXBProvider.java:[line 462]<br/>At ResourceUtils.java:[line 469]<br/>At ResourceUtils.java:[line 472]<br/>At ResourceUtils.java:[line 475]<br/>At ResourceUtils.java:[line 479]<br/>At ResourceUtils.java:[line 497]<br/>At SchemaHandler.java:[line 66]<br/>At SchemaHandler.java:[line 70]<br/>At SchemaHandler.java:[line 88]<br/>At SchemaHandler.java:[line 94]<br/>At SchemaHandler.java:[line 96]<br/>At SchemaHandler.java:[line 102]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67074');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67074" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse<br/>In method org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse.sendRedirect(String)<br/>At ThreadLocalHttpServletResponse.java:[line 84]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/cxf/jaxrs/impl/tl/ThreadLocalHttpServletResponse.sendRedirect(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67148');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67148" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse<br/>In method org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse.encodeRedirectURL(String)<br/>At ThreadLocalHttpServletResponse.java:[line 58]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67201');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67201" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse<br/>In method org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse.encodeRedirectUrl(String)<br/>At ThreadLocalHttpServletResponse.java:[line 63]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67254');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67254" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse<br/>In method org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse.encodeURL(String)<br/>At ThreadLocalHttpServletResponse.java:[line 67]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67307');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67307" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse<br/>In method org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse.encodeUrl(String)<br/>At ThreadLocalHttpServletResponse.java:[line 72]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECXPI</span>
</td>
<td>This use of javax/xml/xpath/XPath.compile(Ljava/lang/String;)Ljavax/xml/xpath/XPathExpression; can be vulnerable to XPath Injection</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#XPATH_INJECTION">Bug type XPATH_INJECTION (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.ext.xml.XMLSource<br/>In method org.apache.cxf.jaxrs.ext.xml.XMLSource.evaluate(String, Map, QName)<br/>At XMLSource.java:[line 289]<br/>Sink method javax/xml/xpath/XPath.compile(Ljava/lang/String;)Ljavax/xml/xpath/XPathExpression;<br/>Sink parameter 0<br/>Unknown source org/apache/cxf/jaxrs/ext/xml/XMLSource.evaluate(Ljava/lang/String;Ljava/util/Map;Ljavax/xml/namespace/QName;)Ljava/lang/Object; parameter 2<br/>At XMLSource.java:[line 92]<br/>At XMLSource.java:[line 108]<br/>At XMLSource.java:[line 120]<br/>At XMLSource.java:[line 133]<br/>At XMLSource.java:[line 151]<br/>At XMLSource.java:[line 174]<br/>At XMLSource.java:[line 187]<br/>At XMLSource.java:[line 201]<br/>At XMLSource.java:[line 231]<br/>At XMLSource.java:[line 243]<br/>At XMLSource.java:[line 252]<br/>At XMLSource.java:[line 264]<br/>At XMLSource.java:[line 279]<br/>At XPathProvider.java:[line 88]<br/>At XPathProvider.java:[line 98]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65770');">
<td>
<span class="priority-2">SECXPI</span>
</td>
<td>This use of javax/xml/xpath/XPath.compile(Ljava/lang/String;)Ljavax/xml/xpath/XPathExpression; can be vulnerable to XPath Injection</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65770" style="display: none;">
<a href="#XPATH_INJECTION">Bug type XPATH_INJECTION (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.ext.xml.XMLSource<br/>In method org.apache.cxf.jaxrs.ext.xml.XMLSource.evaluate(String, Map, QName)<br/>At XMLSource.java:[line 291]<br/>Sink method javax/xml/xpath/XPath.compile(Ljava/lang/String;)Ljavax/xml/xpath/XPathExpression;<br/>Sink parameter 0<br/>Unknown source org/apache/cxf/jaxrs/ext/xml/XMLSource.evaluate(Ljava/lang/String;Ljava/util/Map;Ljavax/xml/namespace/QName;)Ljava/lang/Object; parameter 2<br/>At XMLSource.java:[line 92]<br/>At XMLSource.java:[line 108]<br/>At XMLSource.java:[line 120]<br/>At XMLSource.java:[line 133]<br/>At XMLSource.java:[line 151]<br/>At XMLSource.java:[line 174]<br/>At XMLSource.java:[line 187]<br/>At XMLSource.java:[line 201]<br/>At XMLSource.java:[line 231]<br/>At XMLSource.java:[line 243]<br/>At XMLSource.java:[line 252]<br/>At XMLSource.java:[line 264]<br/>At XMLSource.java:[line 279]<br/>At XPathProvider.java:[line 88]<br/>At XPathProvider.java:[line 98]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67917');">
<td>
<span class="priority-2">SECXXESTR</span>
</td>
<td>The XML parsing is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67917" style="display: none;">
<a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.provider.JAXBElementProvider<br/>In method org.apache.cxf.jaxrs.provider.JAXBElementProvider.getStreamReader(InputStream, Class, MediaType)<br/>At JAXBElementProvider.java:[line 252]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68538');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68538" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.provider.XSLTJaxbProvider<br/>In method org.apache.cxf.jaxrs.provider.XSLTJaxbProvider.createTemplates(URL)<br/>At XSLTJaxbProvider.java:[line 501]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68596');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68596" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.provider.XSLTJaxbProvider<br/>In method org.apache.cxf.jaxrs.provider.XSLTJaxbProvider.createTemplates(URL)<br/>At XSLTJaxbProvider.java:[line 501]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65989');">
<td>
<span class="priority-2">SECXXEXPA</span>
</td>
<td>The use of XPathExpression.evaluate(...) (XPath API) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65989" style="display: none;">
<a href="#XXE_XPATH">Bug type XXE_XPATH (click for details)</a>
<br/>In class org.apache.cxf.jaxrs.ext.xml.XMLSource<br/>In method org.apache.cxf.jaxrs.ext.xml.XMLSource.evaluate(String, Map, QName)<br/>At XMLSource.java:[line 291]<br/>Value XPathExpression.evaluate(...)</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
</h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        
<h2>
<a name="REQUESTDISPATCHER_FILE_DISCLOSURE">REQUESTDISPATCHER_FILE_DISCLOSURE: RequestDispatcher File Disclosure</a>
</h2>
            
<p>
Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>
An attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting <code>"http://example.com/?jspFile=../applicationContext.xml%3F"</code> would display the application's <code>applicationContext.xml</code> file. The attacker would be able to locate and download the <code>applicationContext.xml</code> referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>...
String jspFile = request.getParameter("jspFile");
request.getRequestDispatcher("/WEB-INF/jsps/" + jspFile + ".jsp").include(request, response);
...</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid constructing server-side redirects using user controlled input.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/552.html">CWE-552: Files or Directories Accessible to External Parties</a><br/>
</p>
            
        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNVALIDATED_REDIRECT">UNVALIDATED_REDIRECT: Unvalidated Redirect</a>
</h2>
            
<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>
            
        
<h2>
<a name="URL_REWRITING">URL_REWRITING: URL rewriting method</a>
</h2>
            
<p>
The implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL.<br/>
URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties. Session ID in the URL can be disclosed in many ways, for example:<br/>
<ul>
    <li>Log files,</li>
    <li>The browser history,</li>
    <li>By copy-and-pasting it into an e-mail or posting,</li>
    <li>The HTTP Referrer.</li>
</ul>
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>out.println("Click &lt;a href=" +
                res.encodeURL(HttpUtils.getRequestURL(req).toString()) +
                "&gt;here&lt;/a&gt;");</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid using those methods. If you are looking to encode a URL String or form parameters do not confuse the URL rewriting methods with the URLEncoder class.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management">OWASP Top 10 2010-A3-Broken Authentication and Session Management</a><br/>
</p>
            
        
<h2>
<a name="XPATH_INJECTION">XPATH_INJECTION: Potential XPath Injection</a>
</h2>
            
<p>
XPath injection risks are similar to SQL injection. If the XPath query contains untrusted user input, the complete data source
could be exposed. This could allow an attacker to access unauthorized data or maliciously modify the target XML.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-39: XPath Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/643.html">CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61407250">CERT: IDS09-J. Prevent XPath Injection (archive)</a><br/>
<a href="https://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf">Black Hat Europe 2012: Hacking XPath 2.0</a><br/>
<a href="https://www.balisage.net/Proceedings/vol7/html/Vlist02/BalisageVol7-Vlist02.html">Balisage.net: XQuery Injection</a>
</p>

        
<h2>
<a name="XXE_XMLSTREAMREADER">XXE_XMLSTREAMREADER: XML parsing vulnerable to XXE (XMLStreamReader)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution disabling External Entities:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://openjdk.java.net/jeps/185">JEP 185: Restrict Fetching of External XML Resources</a>
</p>

        
<h2>
<a name="XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY: XML parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY: XSLT parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XSLT External Entity (XXE) attacks can occur when an XSLT parser supports external entities while processing XSLT received
from an untrusted source.</p>
<p><b>Risk: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
   &lt;xsl:template match=&quot;/&quot;&gt;
       &lt;xsl:value-of select=&quot;document(&apos;/etc/passwd&apos;)&quot;&gt;
   &lt;/xsl:value-of&gt;&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>
<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="XXE_XPATH">XXE_XPATH: XML parsing vulnerable to XXE (XPathExpression)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>DocumentBuilder builder = df.newDocumentBuilder();

XPathFactory xPathFactory = XPathFactory.newInstance();
XPath xpath = xPathFactory.newXPath();
XPathExpression xPathExpr = xpath.compile("/somepath/text()");

xPathExpr.evaluate(new InputSource(inputStream));</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
df.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder builder = df.newDocumentBuilder();

[...]

xPathExpr.evaluate( builder.parse(inputStream) );</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder builder = df.newDocumentBuilder();

[...]

xPathExpr.evaluate( builder.parse(inputStream) );</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifx-xml-external-entity.html">Identifx XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet#XPathExpression">XML External Entity (XXE) Prevention Cheat Sheet</a>
</p>

        </body>
</html>
