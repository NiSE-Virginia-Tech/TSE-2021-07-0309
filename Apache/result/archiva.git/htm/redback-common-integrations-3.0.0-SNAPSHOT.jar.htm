<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/archiva.git/redback-common-integrations-3.0.0-SNAPSHOT.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>1145 lines of code analyzed,
	in 39 classes, 
	in 10 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">12</td>
<td align="right">10.48</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>12</b>
</td>
<td align="right">
<b>10.48</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">12</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>12</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65763');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65763" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.filter.authentication.digest.HttpDigestHeader<br/>In method org.apache.archiva.redback.integration.filter.authentication.digest.HttpDigestHeader.parseClientHeader(String, String, String)<br/>At HttpDigestHeader.java:[line 80]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/apache/archiva/redback/integration/filter/authentication/digest/HttpDigestHeader.parseClientHeader(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V parameter 2<br/>Method usage with tainted arguments detected<br/>At HttpDigestAuthentication.java:[line 84]<br/>At HttpDigestAuthentication.java:[line 89]<br/>At HttpDigestAuthentication.java:[line 94]<br/>At HttpDigestAuthentication.java:[line 97]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66119');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66119" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.util.AutoLoginCookies<br/>In method org.apache.archiva.redback.integration.util.AutoLoginCookies.findAuthKey(String, String, String, String, HttpServletResponse, HttpServletRequest)<br/>At AutoLoginCookies.java:[line 207]<br/>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/apache/archiva/redback/integration/util/AutoLoginCookies.findAuthKey(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljavax/servlet/http/HttpServletResponse;Ljavax/servlet/http/HttpServletRequest;)Lorg/apache/archiva/redback/keys/AuthenticationKey; parameter 4<br/>Method usage with tainted arguments detected<br/>At AutoLoginCookies.java:[line 79]<br/>At AutoLoginCookies.java:[line 84]<br/>At AutoLoginCookies.java:[line 133]<br/>At AutoLoginCookies.java:[line 138]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66233');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66233" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.util.AutoLoginCookies<br/>In method org.apache.archiva.redback.integration.util.AutoLoginCookies.getRememberMeKey(HttpServletResponse, HttpServletRequest)<br/>At AutoLoginCookies.java:[line 81]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/Cookie.getValue()Ljava/lang/String;<br/>At AutoLoginCookies.java:[line 79]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66312');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66312" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.util.AutoLoginCookies<br/>In method org.apache.archiva.redback.integration.util.AutoLoginCookies.getSignonKey(HttpServletResponse, HttpServletRequest)<br/>At AutoLoginCookies.java:[line 135]<br/>Sink method org/slf4j/Logger.debug(Ljava/lang/String;Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/Cookie.getValue()Ljava/lang/String;<br/>At AutoLoginCookies.java:[line 133]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65991');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65991" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.model.EditUserCredentials<br/>In method new org.apache.archiva.redback.integration.model.EditUserCredentials(User)<br/>At EditUserCredentials.java:[line 51]<br/>Sink method org/apache/archiva/redback/integration/model/UserCredentials.setPassword(Ljava/lang/String;)V<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66055');">
<td>
<span class="priority-2">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66055" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.model.EditUserCredentials<br/>In method new org.apache.archiva.redback.integration.model.EditUserCredentials(User)<br/>At EditUserCredentials.java:[line 52]<br/>Sink method org/apache/archiva/redback/integration/model/UserCredentials.setConfirmPassword(Ljava/lang/String;)V<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66391');">
<td>
<span class="priority-2">SECHOC</span>
</td>
<td>Cookie without the HttpOnly flag could be read by a malicious script in the browser</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66391" style="display: none;">
<a href="#HTTPONLY_COOKIE">Bug type HTTPONLY_COOKIE (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.util.AutoLoginCookies<br/>In method org.apache.archiva.redback.integration.util.AutoLoginCookies.createCookie(String, String, String, String, HttpServletRequest)<br/>At AutoLoginCookies.java:[line 248]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66444');">
<td>
<span class="priority-2">SECIC</span>
</td>
<td>Cookie without the secure flag could be sent in clear text if a HTTP URL is visited</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66444" style="display: none;">
<a href="#INSECURE_COOKIE">Bug type INSECURE_COOKIE (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.util.AutoLoginCookies<br/>In method org.apache.archiva.redback.integration.util.AutoLoginCookies.createCookie(String, String, String, String, HttpServletRequest)<br/>At AutoLoginCookies.java:[line 248]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.checks.security.AdminAutoCreateCheck<br/>In method org.apache.archiva.redback.integration.checks.security.AdminAutoCreateCheck.useForceAdminCreationFile()<br/>At AdminAutoCreateCheck.java:[line 118]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>At AdminAutoCreateCheck.java:[line 113]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65877');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65877" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.filter.authorization.SimpleAuthorizationFilter<br/>In method org.apache.archiva.redback.integration.filter.authorization.SimpleAuthorizationFilter.accessDenied(ServletResponse)<br/>At SimpleAuthorizationFilter.java:[line 128]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/archiva/redback/integration/filter/authorization/SimpleAuthorizationFilter.accessDeniedLocation<br/>Unknown source org/apache/archiva/redback/integration/filter/authorization/SimpleAuthorizationFilter.resource<br/>At SimpleAuthorizationFilter.java:[line 116]<br/>At SimpleAuthorizationFilter.java:[line 120]<br/>At SimpleAuthorizationFilter.java:[line 124]<br/>At SimpleAuthorizationFilter.java:[line 126]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65625');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65625" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.filter.authentication.basic.HttpBasicAuthentication<br/>In method org.apache.archiva.redback.integration.filter.authentication.basic.HttpBasicAuthentication.challenge(HttpServletRequest, HttpServletResponse, String, AuthenticationException)<br/>At HttpBasicAuthentication.java:[line 116]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/archiva/redback/authentication/AuthenticationException.getMessage()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65694');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65694" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class org.apache.archiva.redback.integration.filter.authentication.digest.HttpDigestAuthentication<br/>In method org.apache.archiva.redback.integration.filter.authentication.digest.HttpDigestAuthentication.challenge(HttpServletRequest, HttpServletResponse, String, AuthenticationException)<br/>At HttpDigestAuthentication.java:[line 179]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/archiva/redback/authentication/AuthenticationException.getMessage()Ljava/lang/String;</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="HARD_CODE_PASSWORD">HARD_CODE_PASSWORD: Hard coded password</a>
</h2>
            
<p>
Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>private String SECRET_PASSWORD = "letMeIn!";

Properties props = new Properties();
props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/259.html">CWE-259: Use of Hard-coded Password</a>
</p>

        
<h2>
<a name="HTTPONLY_COOKIE">HTTPONLY_COOKIE: Cookie without the HttpOnly flag</a>
</h2>
            
<p>
A new cookie is created without the <code>HttpOnly</code> flag set.
The <code>HttpOnly</code> flag is a directive to the browser to make sure that the cookie can not be red by
malicious script. When a user is the target of a "Cross-Site Scripting", the attacker would benefit greatly from getting
the session id for example.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
Cookie cookie = new Cookie("email",userName);
response.addCookie(cookie);
</pre>
</p>

<p>
<b>Solution (Specific configuration):</b><br/>
<pre>
Cookie cookie = new Cookie("email",userName);
cookie.setSecure(true);
cookie.setHttpOnly(true); //HttpOnly flag
</pre>
</p>

<p>
<b>Solution (Servlet 3.0 configuration):</b><br/>
<pre>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0"&gt;
[...]
&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;http-only&gt;true&lt;/http-only&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;
&lt;/web-app&gt;
</pre>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="https://blog.codinghorror.com/protecting-your-cookies-httponly/">Coding Horror blog: Protecting Your Cookies: HttpOnly</a><br/>
<a href="https://www.owasp.org/index.php/HttpOnly">OWASP: HttpOnly</a><br/>
<a href="https://www.rapid7.com/db/vulnerabilities/http-cookie-http-only-flag">Rapid7: Missing HttpOnly Flag From Cookie</a>
</p>

        
<h2>
<a name="INSECURE_COOKIE">INSECURE_COOKIE: Cookie without the secure flag</a>
</h2>
            
<p>
A new cookie is created without the <code>Secure</code> flag set.
The <code>Secure</code> flag is a directive to the browser to make sure that the cookie is not sent for insecure
communication (<code>http://</code>).
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
Cookie cookie = new Cookie("userName",userName);
response.addCookie(cookie);
</pre>
</p>

<p>
<b>Solution (Specific configuration):</b><br/>
<pre>
Cookie cookie = new Cookie("userName",userName);
cookie.setSecure(true); // Secure flag
cookie.setHttpOnly(true);
</pre>
</p>

<p>
<b>Solution (Servlet 3.0 configuration):</b><br/>
<pre>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0"&gt;
[...]
&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;http-only&gt;true&lt;/http-only&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;
&lt;/web-app&gt;
</pre>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="https://cwe.mitre.org/data/definitions/614.html">CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a><br/>
<a href="https://cwe.mitre.org/data/definitions/315.html">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a><br/>
<a href="https://cwe.mitre.org/data/definitions/311.html">CWE-311: Missing Encryption of Sensitive Data</a><br/>
<a href="https://www.owasp.org/index.php/SecureFlag">OWASP: Secure Flag</a><br/>
<a href="https://www.rapid7.com/db/vulnerabilities/http-cookie-secure-flag">Rapid7: Missing Secure Flag From SSL Cookie</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="UNVALIDATED_REDIRECT">UNVALIDATED_REDIRECT: Unvalidated Redirect</a>
</h2>
            
<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>
            
        
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        </body>
</html>
