<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/group/ws-wss4j.git/geronimo-javamail_1.4_mail-1.8.4.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>16492 lines of code analyzed,
	in 278 classes, 
	in 20 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">3</td>
<td align="right">0.18</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">16</td>
<td align="right">0.97</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>19</b>
</td>
<td align="right">
<b>1.15</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">19</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>19</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67036');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67036" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.geronimo.javamail.store.imap.IMAPStore<br/>In method org.apache.geronimo.javamail.store.imap.IMAPStore.debugOut(String, Throwable)<br/>At IMAPStore.java:[line 404]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67258');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67258" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.geronimo.javamail.store.pop3.POP3Store<br/>In method org.apache.geronimo.javamail.store.pop3.POP3Store.debugOut(String, Throwable)<br/>At POP3Store.java:[line 346]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67370');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67370" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.geronimo.javamail.util.MailConnection<br/>In method org.apache.geronimo.javamail.util.MailConnection.debugOut(String, Throwable)<br/>At MailConnection.java:[line 748]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66920');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66920" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.geronimo.javamail.authentication.CramMD5Authenticator<br/>In method org.apache.geronimo.javamail.authentication.CramMD5Authenticator.computeCramDigest(byte[], byte[])<br/>At CramMD5Authenticator.java:[line 131]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66978');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66978" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.geronimo.javamail.authentication.DigestMD5Authenticator<br/>In method org.apache.geronimo.javamail.authentication.DigestMD5Authenticator.authenticateClient(byte[])<br/>At DigestMD5Authenticator.java:[line 223]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67312');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67312" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.geronimo.javamail.store.pop3.connection.POP3Connection<br/>In method org.apache.geronimo.javamail.store.pop3.connection.POP3Connection.processAPOPAuthentication()<br/>At POP3Connection.java:[line 561]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65789');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65789" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class javax.mail.internet.MimeBodyPart<br/>In method javax.mail.internet.MimeBodyPart.attachFile(String)<br/>At MimeBodyPart.java:[line 639]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/mail/internet/MimeBodyPart.attachFile(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65863');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65863" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class javax.mail.internet.MimeBodyPart<br/>In method javax.mail.internet.MimeBodyPart.saveFile(String)<br/>At MimeBodyPart.java:[line 683]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/mail/internet/MimeBodyPart.saveFile(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66836');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66836" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class javax.mail.util.SharedFileInputStream<br/>In method new javax.mail.util.SharedFileInputStream(String, int)<br/>At SharedFileInputStream.java:[line 106]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/mail/util/SharedFileInputStream.&lt;init&gt;(Ljava/lang/String;I)V parameter 1<br/>Method usage not detected<br/>At SharedFileInputStream.java:[line 77]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67090');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67090" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.geronimo.javamail.store.nntp.NNTPStore<br/>In method org.apache.geronimo.javamail.store.nntp.NNTPStore.protocolConnect(String, int, String, String)<br/>At NNTPStore.java:[line 172]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/geronimo/javamail/util/ProtocolProperties.getProperty(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source javax/mail/Session.getProperty(Ljava/lang/String;)Ljava/lang/String;<br/>At NNTPStore.java:[line 166]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67174');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67174" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.geronimo.javamail.store.nntp.NNTPStore<br/>In method org.apache.geronimo.javamail.store.nntp.NNTPStore.protocolConnect(String, int, String, String)<br/>At NNTPStore.java:[line 183]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/geronimo/javamail/store/nntp/NNTPStore.protocolConnect(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Z parameter 3<br/>Method usage not detected<br/>At NNTPStore.java:[line 182]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67540');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67540" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.geronimo.osgi.locator.ProviderLocator<br/>In method org.apache.geronimo.osgi.locator.ProviderLocator.lookupByJREPropertyFile(String, String)<br/>At ProviderLocator.java:[line 589]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/geronimo/osgi/locator/ProviderLocator.lookupByJREPropertyFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Method usage not detected<br/>At ProviderLocator.java:[line 589]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65937');">
<td>
<span class="priority-2">SECSMTP</span>
</td>
<td>Possible injection that can lead to Source spoofing, header override and email body injection.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65937" style="display: none;">
<a href="#SMTP_HEADER_INJECTION">Bug type SMTP_HEADER_INJECTION (click for details)</a>
<br/>In class javax.mail.internet.MimeMessage<br/>In method javax.mail.internet.MimeMessage.addRecipients(Message$RecipientType, String)<br/>At MimeMessage.java:[line 489]<br/>Sink method javax/mail/internet/MimeMessage.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/mail/internet/MimeMessage.addRecipients(Ljavax/mail/Message$RecipientType;Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66010');">
<td>
<span class="priority-2">SECSMTP</span>
</td>
<td>Possible injection that can lead to Source spoofing, header override and email body injection.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66010" style="display: none;">
<a href="#SMTP_HEADER_INJECTION">Bug type SMTP_HEADER_INJECTION (click for details)</a>
<br/>In class javax.mail.internet.MimeMessage<br/>In method javax.mail.internet.MimeMessage.reply(boolean)<br/>At MimeMessage.java:[line 983]<br/>Sink method javax/mail/internet/MimeMessage.setSubject(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/mail/internet/InternetHeaders$InternetHeader.getValue()Ljava/lang/String;<br/>Unknown source javax/mail/internet/MimeUtility.decodeText(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source javax/mail/internet/MimeMessage.getSubject()Ljava/lang/String;<br/>Unknown source javax/mail/internet/MimeUtility.decodeTextNonStrict(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source javax/mail/internet/MimeMessage.getHeader(Ljava/lang/String;)[Ljava/lang/String;<br/>Unknown source javax/mail/internet/MimeUtility.unfold(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source javax/mail/internet/InternetHeaders.getHeader(Ljava/lang/String;)[Ljava/lang/String;<br/>Unknown source javax/mail/internet/MimeUtility.unfold(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source javax/mail/internet/MimeUtility.decodeTextNonStrict(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source javax/mail/internet/MimeMessage.getSingleHeader(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source javax/mail/internet/MimeUtility.decodeText(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source javax/mail/Header.value<br/>Unknown source javax/mail/internet/MimeUtility.decodeWord(Ljava/lang/String;)Ljava/lang/String;<br/>At Header.java:[line 63]<br/>At InternetHeaders.java:[line 203]<br/>At InternetHeaders.java:[line 213]<br/>At MimeMessage.java:[line 530]<br/>At MimeMessage.java:[line 536]<br/>At MimeMessage.java:[line 976]<br/>At MimeMessage.java:[line 981]<br/>At MimeMessage.java:[line 1205]<br/>At MimeMessage.java:[line 1582]<br/>At MimeUtility.java:[line 130]<br/>At MimeUtility.java:[line 180]<br/>At MimeUtility.java:[line 185]<br/>At MimeUtility.java:[line 190]<br/>At MimeUtility.java:[line 197]<br/>At MimeUtility.java:[line 208]<br/>At MimeUtility.java:[line 213]<br/>At MimeUtility.java:[line 217]<br/>At MimeUtility.java:[line 283]<br/>At MimeUtility.java:[line 294]<br/>At MimeUtility.java:[line 299]<br/>At MimeUtility.java:[line 310]<br/>At MimeUtility.java:[line 315]<br/>At MimeUtility.java:[line 325]<br/>At MimeUtility.java:[line 330]<br/>At MimeUtility.java:[line 338]<br/>At MimeUtility.java:[line 341]<br/>At MimeUtility.java:[line 346]<br/>At MimeUtility.java:[line 353]<br/>At MimeUtility.java:[line 363]<br/>At MimeUtility.java:[line 368]<br/>At MimeUtility.java:[line 375]<br/>At MimeUtility.java:[line 447]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66458');">
<td>
<span class="priority-2">SECSMTP</span>
</td>
<td>Possible injection that can lead to Source spoofing, header override and email body injection.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66458" style="display: none;">
<a href="#SMTP_HEADER_INJECTION">Bug type SMTP_HEADER_INJECTION (click for details)</a>
<br/>In class javax.mail.internet.MimeMessage<br/>In method javax.mail.internet.MimeMessage.setFileName(String)<br/>At MimeMessage.java:[line 896]<br/>Sink method javax/mail/internet/MimeMessage.setDisposition(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/mail/internet/MimeUtility.fold(ILjava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source javax/mail/internet/ContentDisposition._disposition<br/>Unknown source javax/mail/internet/MimeUtility.quote(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source javax/mail/internet/MimeUtility.quote(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source javax/mail/internet/ParameterList.toString(I)Ljava/lang/String;<br/>Unknown source java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;<br/>Unknown source javax/mail/internet/ParameterList$ParameterValue.toString()Ljava/lang/String;<br/>Unknown source javax/mail/internet/ParameterList$ParameterValue.name<br/>Unknown source javax/mail/internet/ParameterList$ParameterValue.value<br/>Unknown source javax/mail/internet/ContentDisposition.toString()Ljava/lang/String;<br/>Unknown source javax/mail/internet/MimeUtility.fold(ILjava/lang/String;)Ljava/lang/String;<br/>Unknown source javax/mail/internet/ParameterList$ParameterValue.encodedValue<br/>Unknown source javax/mail/internet/ParameterList$ParameterValue.getEncodedName()Ljava/lang/String;<br/>At ContentDisposition.java:[line 105]<br/>At ContentDisposition.java:[line 110]<br/>At MimeMessage.java:[line 896]<br/>At MimeUtility.java:[line 1098]<br/>At MimeUtility.java:[line 1162]<br/>At MimeUtility.java:[line 1163]<br/>At MimeUtility.java:[line 1165]<br/>At MimeUtility.java:[line 1166]<br/>At MimeUtility.java:[line 1169]<br/>At MimeUtility.java:[line 1175]<br/>At MimeUtility.java:[line 1176]<br/>At ParameterList.java:[line 220]<br/>At ParameterList.java:[line 221]<br/>At ParameterList.java:[line 224]<br/>At ParameterList.java:[line 230]<br/>At ParameterList.java:[line 236]<br/>At ParameterList.java:[line 237]<br/>At ParameterList.java:[line 244]<br/>At ParameterList.java:[line 246]<br/>At ParameterList.java:[line 260]<br/>At ParameterList.java:[line 265]<br/>At ParameterList.java:[line 291]<br/>At ParameterList.java:[line 293]<br/>At ParameterList.java:[line 298]<br/>At ParameterList.java:[line 300]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class javax.mail.Session<br/>In method javax.mail.Session.loadProviders(ClassLoader)<br/>At Session.java:[line 609]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source java/util/Collection.iterator()Ljava/util/Iterator;<br/>Unknown source org/apache/geronimo/mail/MailProviderRegistry.providers<br/>Unknown source java/util/concurrent/ConcurrentMap.values()Ljava/util/Collection;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source org/apache/geronimo/mail/MailProviderRegistry.getProviders()Ljava/util/Collection;<br/>At Session.java:[line 604]<br/>At Session.java:[line 605]<br/>At MailProviderRegistry.java:[line 100]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65670');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65670" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class javax.mail.Session<br/>In method javax.mail.Session.loadProviders(ClassLoader)<br/>At Session.java:[line 651]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/apache/geronimo/mail/MailProviderRegistry.getDefaultProviders()Ljava/util/Collection;<br/>Unknown source java/util/Collection.iterator()Ljava/util/Iterator;<br/>Unknown source org/apache/geronimo/mail/MailProviderRegistry.defaultProviders<br/>Unknown source java/util/concurrent/ConcurrentMap.values()Ljava/util/Collection;<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>At Session.java:[line 646]<br/>At Session.java:[line 647]<br/>At MailProviderRegistry.java:[line 111]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67424');">
<td>
<span class="priority-2">SECUS</span>
</td>
<td>Unencrypted socket to org.apache.geronimo.javamail.util.MailConnection (instead of SSLSocket)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67424" style="display: none;">
<a href="#UNENCRYPTED_SOCKET">Bug type UNENCRYPTED_SOCKET (click for details)</a>
<br/>In class org.apache.geronimo.javamail.util.MailConnection<br/>In method org.apache.geronimo.javamail.util.MailConnection.getConnectedSocket()<br/>At MailConnection.java:[line 307]<br/>Value remote host</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67482');">
<td>
<span class="priority-2">SECUS</span>
</td>
<td>Unencrypted socket to org.apache.geronimo.javamail.util.MailConnection (instead of SSLSocket)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67482" style="display: none;">
<a href="#UNENCRYPTED_SOCKET">Bug type UNENCRYPTED_SOCKET (click for details)</a>
<br/>In class org.apache.geronimo.javamail.util.MailConnection<br/>In method org.apache.geronimo.javamail.util.MailConnection.getConnectedSocket()<br/>At MailConnection.java:[line 350]<br/>Value remote host</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SMTP_HEADER_INJECTION">SMTP_HEADER_INJECTION: SMTP Header Injection</a>
</h2>
            
<p>
Simple Mail Transfer Protocol (SMTP) is a the text based protocol used for email delivery.
Like with HTTP, headers are separate by new line separator.
If user input is place in a header line, the application should remove
or replace new line characters (<code>CR</code> / <code>LF</code>).
You should use a safe wrapper such as <a href="https://commons.apache.org/proper/commons-email/userguide.html">Apache Common Email</a>
and <a href="http://www.simplejavamail.org">Simple Java Mail</a> which filter special characters that can lead to header injection.

</p>
    <b>Vulnerable Code:</b><br/>
<p>
<pre>
Message message = new MimeMessage(session);
message.setFrom(new InternetAddress("noreply@your-organisation.com"));
message.setRecipients(Message.RecipientType.TO, new InternetAddress[] {new InternetAddress("target@gmail.com")});
message.setSubject(usernameDisplay + " has sent you notification"); //Injectable API
message.setText("Visit your ACME Corp profile for more info.");
Transport.send(message);
</pre>
</p>
    <b>Solution</b><br/>
<p>Use <a href="https://commons.apache.org/proper/commons-email/userguide.html">Apache Common Email</a> or <a href="http://www.simplejavamail.org">Simple Java Mail</a>.</p>

<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OTG-INPVAL-011)">OWASP SMTP Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
<a href="https://commons.apache.org/proper/commons-email/userguide.html">Commons Email: User Guide</a><br/>
<a href="http://www.simplejavamail.org">Simple Java Mail Website</a><br/>
<a href="https://security.stackexchange.com/a/54100/24973">StackExchange InfoSec: What threats come from CRLF in email generation?</a><br/>
</p>
            
        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNENCRYPTED_SOCKET">UNENCRYPTED_SOCKET: Unencrypted Socket</a>
</h2>
            
<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain socket (Cleartext communication):
<pre>Socket soc = new Socket("www.google.com",80);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Socket (Secure communication):
<pre>Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);</pre>
</p>
<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>

        </body>
</html>
