
Current Proejct: /home/x/CryptoAPIDetect/dataset/MUBench/protools/all/target/original-all-3.0.jar
[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 479.1 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 129 analysis seeds within 0 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 129
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.01

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 129
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.02

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 129
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.02

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 131
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.03

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 133
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.04

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 133
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.05

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 134
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.05

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 135
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.06

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 136
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.07

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 137
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.07

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 138
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.08

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 138
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.09

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 140
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.09

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 140
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.1

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 142
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.11

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 143
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.11

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 145
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.12

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 145
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.12

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 146
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.13

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 147
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.14

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 148
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.14

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 149
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.15

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 151
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.15

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 24 of 153
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.16

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 25 of 154
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.16

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 26 of 156
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.17

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 27 of 158
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.17

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 28 of 160
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.18

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 29 of 162
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.18

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 30 of 163
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.18

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 31 of 164
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 32 of 165
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 33 of 166
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.2

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 34 of 168
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.2

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 35 of 170
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.21

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 36 of 171
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.21

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 37 of 172
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 38 of 174
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 39 of 176
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 40 of 177
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.23

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 41 of 178
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.23

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 42 of 179
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.23

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 43 of 181
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 44 of 182
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 45 of 184
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 46 of 185
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.25

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 47 of 186
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.25

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 48 of 187
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 49 of 188
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 50 of 190
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 51 of 191
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 52 of 192
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 53 of 194
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 54 of 195
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.28

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 55 of 196
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.28

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 56 of 198
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.28

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 57 of 199
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 58 of 200
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 59 of 202
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 60 of 203
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 61 of 204
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 62 of 206
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 63 of 207
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 64 of 209
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 65 of 211
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 66 of 213
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 67 of 215
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 68 of 217
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 69 of 219
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 70 of 221
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 71 of 223
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 72 of 225
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 73 of 227
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 74 of 228
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 75 of 230
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 76 of 231
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 77 of 232
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 78 of 234
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 79 of 235
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 80 of 236
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 81 of 238
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 82 of 239
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 83 of 241
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 84 of 242
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 85 of 244
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 86 of 245
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 87 of 246
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 88 of 248
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 89 of 249
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 90 of 251
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 91 of 253
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 92 of 255
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 93 of 257
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 94 of 258
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 95 of 259
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 96 of 260
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 97 of 260
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 98 of 260
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 99 of 260
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 100 of 261
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 101 of 262
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 102 of 263
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 103 of 263
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 104 of 264
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 105 of 265
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 106 of 266
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 107 of 267
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 108 of 269
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 109 of 270
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 110 of 272
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 111 of 274
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 112 of 275
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 113 of 275
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 114 of 277
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 115 of 279
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 116 of 281
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 117 of 283
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 118 of 284
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 119 of 286
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 120 of 287
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 121 of 288
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 122 of 289
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 123 of 290
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 124 of 292
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 125 of 294
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 126 of 296
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 127 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 128 of 299
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 129 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 130 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 131 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 132 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 133 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 134 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 135 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 136 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 137 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 138 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 139 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 140 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 141 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 142 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 143 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 144 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 145 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 146 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 147 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 148 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 149 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 150 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 151 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 152 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 153 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 154 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 155 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 156 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 157 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 158 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 159 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 160 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 161 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 162 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 163 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 164 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 165 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 166 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 167 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 168 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 169 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 170 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 171 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 172 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 173 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 174 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 175 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 176 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 177 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 178 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 179 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 180 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.6

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 181 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.6

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 182 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.6

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 183 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 184 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 185 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 186 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 187 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 188 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 189 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 190 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 191 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 192 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 193 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 194 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 195 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 196 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 197 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 198 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 199 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 200 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 201 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 202 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 203 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 204 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 205 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 206 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 207 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 208 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 209 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 210 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 211 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 212 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 213 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 214 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 215 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 216 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 217 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 218 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 219 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 220 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 221 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 222 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 223 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 224 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 225 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 226 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 227 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 228 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 229 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 230 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 231 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 232 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 233 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 234 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 235 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 236 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 237 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 238 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 239 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 240 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 241 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 242 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 243 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 244 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 245 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 246 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.82

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 247 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.82

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 248 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.82

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 249 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 250 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 251 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 252 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 253 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 254 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 255 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 256 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 257 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 258 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 259 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 260 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 261 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 262 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 263 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 264 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 265 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 266 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 267 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 268 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 269 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 270 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 271 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 272 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 273 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 274 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 275 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 276 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 277 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 278 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 279 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 280 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 281 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 282 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 283 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 284 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 285 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.95

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 286 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.95

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 287 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.95

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 288 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 289 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 290 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 291 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 292 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 293 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 294 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 295 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 296 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 297 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 298 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 299 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 300 of 301
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 1.0

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.data.text.ToolRandoms: void <clinit>()>
		SHA-256: 4c0ba0004f2c5bfbf5f3d01291459f619955f83e3d3606d1a8211c26933050d6
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolElGamal: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: db25f3d2a0b81321d1d3ed8254ea12b9421978a2bab96c05d16eb573f1105fca
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDH: byte[] getPrivateKey(java.util.Map)>
		SHA-256: bbe511730bb625b9fa978f6bb5c8ce429dbb5d7a4a532aba22fbeab8e1be3d28
		Secure: true
	Object:
		Variable: r7
		Type: javax.net.ssl.SSLContext
		Statement: r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer976)
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 256f4edb44d403b05730dddbfddc2ee6f1bcf889ca7d7507e78ba015d0dcf9ca
		Secure: false
	Object:
		Variable: r10
		Type: java.security.KeyPairGenerator
		Statement: r10 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer993)
		Method: <pro.tools.security.ToolECDSA: java.util.Map initKey()>
		SHA-256: 6d16cc95e019d19a36099cf43d21f936b7098b13e1c2653fe4cfe9c6f8341e93
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolRSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 18f4d4e3b5422b7d38de5c5a7417f1299662c643e614f652beea2c2d02790872
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: e95048bd1f46417d1e885045dec19b3fc10aecc72922518b033c4226dbcb3c09
		Secure: false
	Object:
		Variable: r14
		Type: java.security.SecureRandom
		Statement: specialinvoke r14.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolElGamal: java.util.Map initKey()>
		SHA-256: d5f09bc323676aaf1050d32d911b6eea02d8ee5a48416b38efdbfb215ff230f9
		Secure: true
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <pro.tools.security.ToolCertificate2: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: ed605dce4cfcaef89b334be0004af1f8721c88ea29e609f6a04e0264f00a7cb1
		Secure: true
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolElGamal: byte[] getPublicKey(java.util.Map)>
		SHA-256: c745e09a6978ffbb634e1a8a56a9f796aef736c213fe964961029eb63b90741b
		Secure: true
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer958)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: 7ad1d3cd1dfc5bee93420655fef55864cec697ff1e0b5202766f980ae5eef23c
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacMD2Key()>
		SHA-256: c16d2985ad85b12d2f0b9a32a9651cdeac6e8dc3f571b5b109354534fb1154ef
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: 9775787ce7acc61b48d06712dfcaeee4cea0fe38deda96c7909d6e9e61da2da3
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDH: byte[] getPublicKey(java.util.Map)>
		SHA-256: f36f80d426f181274594bbb2a9bc3fbcf153c70bec53a6d26f07dd9eb96bc345
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: 6c1481c2558f87e00a49c6c0932726c80b7b520ed46a4e4587b64badc070386f
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD5: byte[] encodeMD5(byte[])>
		SHA-256: 56999e626bde5f2f151550e261619daf54be20a9b4de15676302caeed7fae65c
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: 31d004a5006f3130dcec8af11cf3688bec782f82f24057585d1cf883365c7b62
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer866)
		Method: <pro.tools.security.ToolIDEA: byte[] initKey()>
		SHA-256: 750971ab376fc3fd6377dfe10ab96783e833f907b28170544ec73927fb364115
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDESede: byte[] decrypt(byte[],byte[])>
		SHA-256: 3851a8dd72b9242ae6a0749ae77bf260f03646588c35b5b840472678bee5d333
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: 537641ad7923b4ede668d0c2dc7110d1533089ec0e3d66ae5d2228bc522962b9
		Secure: true
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer964)
		Method: <pro.tools.security.md.ToolMD2: byte[] encodeMD2(byte[])>
		SHA-256: 9249bd374abcadc45186fe07a553c48f1d8afb74cf623c4335d140c2aff70e10
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: c90a3786d84fdee04365c1883836e667e41a247c4f20a4e77595f5873ef07b3d
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD160(byte[])>
		SHA-256: 450af8ee4a835c44cee721d7c2d47f195319e2c2e8704db38351eaa2412bb6fc
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA512(byte[])>
		SHA-256: 11b7a871e5c68fbd36f467b95a74bde375b678d7dd23436c6fc5e63206be4c3
		Secure: true
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolElGamal: byte[] getPrivateKey(java.util.Map)>
		SHA-256: de7608827249d849acdb91f6b8d03e6c6af45d010b1b7d1de928ede9aac6636
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDH: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 76f32af439fcf01677290088106a0e55f971e726f5eb6157346806c0968cad29
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: d63e2141736ac89c0439e4e044ba2d31809b7875fb8a04e4c60ecdd22e839be3
		Secure: true
	Object:
		Variable: varReplacer938
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer938)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: eb7457ca5296e6cfaf1f84332a199a0915d962f9c3f6eca85160b5eeacab03c1
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r6.<java.security.Signature: byte[] sign()>()
		Method: <pro.tools.security.ToolCertificate2: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: e6f41c9f6e6221455b5be388e2f0293f78923f635b9a87aa71a1bda4ece2fe0c
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolIDEA: byte[] encrypt(byte[],byte[])>
		SHA-256: 71f647e9df8f7780caaa1da2c57c4c56e1faa8d6ff33f357ec198d899028f7ca
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPrivateKey(byte[],byte[])>
		SHA-256: 81d6159bc5218e5cebce16d8e1e1ee97312bab5d31e74c301d750c1eee93ccc0
		Secure: false
	Object:
		Variable: varReplacer962
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer962)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: 545131e7ebe6d83a78558e13127d4d4fbb8fa52cbcd2d7a70089b4b55680f28e
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer959)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacMD4Key()>
		SHA-256: c63b610f9c4893577c6804bdb56c25acb1bf91be3d40d84361c62711e6d382ad
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer942)
		Method: <pro.tools.security.md.ToolMD4: byte[] encodeMD4(byte[])>
		SHA-256: be1d006a19ba2b8aa9c00dc6c1cbc86df84905d1d092991e7e1e7ebda46407c5
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: 50ff38d624a40eb8e154e835a960e671d0bb01334e4252ffb0b83de0225ef332
		Secure: true
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolRSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 57fb99e39fd8fad3cb82c29d03beb3edf109c867060628516bfc078bdf1cd5d1
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer897)
		Method: <pro.tools.security.ToolDESede: byte[] encrypt(byte[],byte[])>
		SHA-256: 1f56124960b528f708766bc2a4bef783be714a408dbdf14e1539f29993b6423b
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer939)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA512Key()>
		SHA-256: df8bdcba78c9efefeea3e5321ea67ae655b355d084a5625bfb220dc7360018ed
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolElGamal: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 3959bacdf3889a5843512f0cfae3f840838e7e49c5f4e12658f4ca0e1e44b56f
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: bfc8c9715824cd91013e37376856c762c5b6fbb15973f483776da9dbd98df3f2
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolElGamal: byte[] getPublicKey(java.util.Map)>
		SHA-256: af2b5ec96f523007690f000e433447bb499a927e515f849b6d10074e1976f48e
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: 160f0ea8a3f5c6735064c280632e5df2f59ca1fc02e5ca68843c973f8aa1855b
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: 49bc88acaf68aa7ecd2688dd19f3ee16c5b742cf13b0a87c038af93cf7100414
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer937)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA384Key()>
		SHA-256: 5da7b675aa44610c1ac7192d07a0c087ac2a740913694f6b63eb8e3eb9f30e53
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1005)
		Method: <pro.tools.security.ToolDES: byte[] encrypt(byte[],byte[])>
		SHA-256: 58c884e76a077f0a372cdc7b9f46d59f4a2e4f0b9f82a05670421784ff0fe721
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPublicKey(byte[],byte[])>
		SHA-256: e287f163247466f71977f3ee82c4e7ce660f39ebd9ae00d96ea346693036ec9b
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: 2e9a1f5efa288441c48c7a9905e0d78884eee60de9a1761aa17a7345b9016517
		Secure: true
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolHTTPS: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)>
		SHA-256: deca2f2fd47f75a658c9295c51125d6879b4610c9eee2d180634a2c01f08c91f
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD2: byte[] encodeMD2(byte[])>
		SHA-256: d4848036eacb977b8affc31e79587d7f6c3f580fc30ced73e3a9bbb88d8fc462
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: ca9cbf0ae7e700fa4415017df38dcfef1aafc4cc4688b887e452c8f92e3059a7
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD4: byte[] encodeMD4(byte[])>
		SHA-256: 94b7c11bb7f105a1fe0a6f6ff8515665ee4b0e3bafd3a3fb5ca9251a73ed3011
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolIDEA: byte[] encrypt(byte[],byte[])>
		SHA-256: 406c778ee16d4adbccdc1d954ae980a7404d97d4ee5a99f5e2dc9dd5181a6ed4
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: 3c62a04f9031a349d2ca30dcf909587d93a0efd1077ab6b38ece507467e6aecb
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: $z0 = virtualinvoke r6.<java.security.Signature: boolean verify(byte[])>(r2)
		Method: <pro.tools.security.ToolECDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: c11f9ba90dda526364c99db1def762dccb2be85ddd965d96b539a933d9a1a54e
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] initHmacRipeMD128Key()>
		SHA-256: 47260a605150210b901b4a633a6a885a72ccaa480948bdfbc06aeb842a9cf7aa
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: 235ef292541fff4e8dc8a34fa802ffa28b4ae4edc4a5986f04444727ad37a5f2
		Secure: false
	Object:
		Variable: r3
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 21d28b95ea94362a88aed73412bdcc4232b60f9222c14e597d046aad77f35529
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer1028)
		Method: <pro.tools.security.ToolCertificate2: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)>
		SHA-256: 948354feb820c4c57a14b0fc847570f53001d4bb4d134af226b2625c55491e91
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolECDSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 7cbab63d6dcc541616e16309f39ec6a3117985e750b75b6275c81720f27c0e60
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolECDSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: df6617fb58424d6cc89c9b0f7105b53d8543fc30d42c6c9648a197b4facede2d
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: 42ec17f2120123f1048c54f0b41f9f54e89f0ed412807abed14bbdccf3791d00
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeWhirlpool(byte[])>
		SHA-256: 2cdc1610f9d9e83b82c4c8666ba594421874523f2badec44849cb56255cd79e3
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer966)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] initHmacRipeMD128Key()>
		SHA-256: 9f3bafca9175152305f909bf75c2b67ce4491b29a3fefd51056326cd34fb8af7
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPair
		Statement: r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <pro.tools.security.ToolRSA: java.util.Map initKey()>
		SHA-256: 25e609192a0133025bd3572c6709e081eefb9efad572c382e74e9070b8106e87
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA1: byte[] encodeSHA(byte[])>
		SHA-256: 543fdd2addb0e7b95773b8f4ba0f1f8dab3af7e6c2f7d902b20a34da44690953
		Secure: false
	Object:
		Variable: r11
		Type: java.security.KeyPair
		Statement: r11 = virtualinvoke r10.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <pro.tools.security.ToolECDSA: java.util.Map initKey()>
		SHA-256: 32d6a07b5069bd59b409f222552940b8941547b35e13d3131bb6edb7bdf9f412
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: d07f947db9ed84985b69b88aad250f7b5de11030b4b6b02fadff02e592ad2d78
		Secure: false
	Object:
		Variable: r42
		Type: java.security.SecureRandom
		Statement: specialinvoke r42.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolECDSA: java.util.Map initKey()>
		SHA-256: 4af19a0eb7ed29cc6512c8f0230c086ea2514b5fc06060715038547d8b376b1
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD4: byte[] encodeMD4(byte[])>
		SHA-256: bef0b21ba6e81611e42b2e136f240b9ad13a429f52ced922e9a02f44c93d3832
		Secure: false
	Object:
		Variable: varReplacer919
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer919)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 2ffdcf28f8f43e6811175b5b9ccfc4c975fff6e71188fecae43dcaf66f19bc20
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer968)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] initHmacRipeMD160Key()>
		SHA-256: 4eec57ac8ccc0bfe2d2d43ecea4615017a9472e94e1edf1dffc36a7d9bbaf402
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: d05b95ad7908e7190d8c07ea783ef7513136066dd1eed1090f9007448fc68ba6
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDESede: byte[] encrypt(byte[],byte[])>
		SHA-256: 65225c06afa170b86be257b98e6f3cae2cdd4b1bf8899367de8c39ba0f028cad
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolAES: byte[] decrypt(byte[],byte[])>
		SHA-256: ebf63578201c753f7b33c14dd1624d7c6249b8b18ec66fae28ceb85b1a76d685
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer846)
		Method: <pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>
		SHA-256: 98b7abef65167bd50a14bfc981ce6d1fdff723fe4c5fe16609f2aa6cf49ed48a
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKeyFactory
		Statement: r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(r2)
		Method: <pro.tools.security.ToolPbkdf2: byte[] getEncryptedPassword(java.lang.String,byte[])>
		SHA-256: 191a635bfa78788ab4f822d30fa09325f8862f995137d72e93b1c92323136d1
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 343b6358b677ae5d500493b2efcad1ad13742eb722cd423807e27c33e8ee2f20
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: a90cdd5d7ec077ec816946b5872333c954ffd0884b8cc15afa81b850cabbe4c8
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.ToolDES: byte[] initKey()>
		SHA-256: 6db7bff9b13df24ca4384036fd26766f521bed04ca2f5a1ce2a07027d427f7dd
		Secure: false
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer967)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: c4e695e3397f0d98f1ea4e128319d79f3a2f916562a1bb7c489e905feca2402b
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: ca34f6f0b266025aefbced027e267430d28c91ed46733e017d028ac76a2109bc
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: 300a1057503ec7824c8c64cfe6503d8b14e33e4efa06258a037480a4476ed3c
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 98515d3bda5f7634a8205a3c935ab007ba8299ed5d0a1970fb8c47df97fec5ad
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer955)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeGOST3411(byte[])>
		SHA-256: df2ce304296134b33e3018e469203e2181b1a293bf65db0bd34b8f6369ada39f
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer936)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: b49a28df0965f00db4f6a579dce3e3f0a714994b260a9f7177bffbc601960e35
		Secure: false
	Object:
		Variable: r6
		Type: java.security.Signature
		Statement: r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer999)
		Method: <pro.tools.security.ToolECDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: b03f64f329d6a2ea800a93462c8ce97c556390d75cc8a9b3a111ce792b54143f
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r0.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <pro.tools.security.ToolPBE2: java.lang.String generateSalt()>
		SHA-256: c6985d9416b002078152237e7916d15396c272f811bf8edaef9b82d4e2d39a90
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacMD5Key()>
		SHA-256: 75269175e572d818d6f2070bd282e8a8fe85520471d06586e3d011ab2e6b7455
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer949)
		Method: <pro.tools.security.md.ToolMD5: byte[] encodeMD5(byte[])>
		SHA-256: 645bfa2f469937a70523714e165e75250d40f444b4bab37f39ee4a630d862c42
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 383aa0e8a1967be55b2b6fa94553e1c2c5f779153eec358417fa0f01f87b882e
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolDSA: java.util.Map initKey()>
		SHA-256: 603a9467df6e6ed58e16e83d5f25371eead415e6aac7d4030c081d2dc5695b52
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeWhirlpool(byte[])>
		SHA-256: da89f9589f87086decb1c5087a2eeea5f9930c30c0a11d22a7a2cdd4ba06bbfc
		Secure: false
	Object:
		Variable: r0
		Type: java.security.KeyPairGenerator
		Statement: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer889)
		Method: <pro.tools.security.ToolRSA: java.util.Map initKey()>
		SHA-256: 7cbc3d9fb1779320c3a54e304fa6c0e85c801b16ff3ca51d72212194de133339
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <pro.tools.security.ToolCertificate: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: 1652ecdd479f2f907e4d713c58f69945fe4f2cae044cb8c56035524dc3b9a9a7
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA256(byte[])>
		SHA-256: f884f71029fd03a9c75d21fdeb0fa86f22d7b58bef4a1c4860aa09f220d2e1a7
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA512Key()>
		SHA-256: 4926936910879a0ed69d707595ef3dc982ae2a8c6841b07b00e94754e723ff2a
		Secure: true
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<java.security.Signature: byte[] sign()>()
		Method: <pro.tools.security.ToolECDSA: byte[] sign(byte[],byte[])>
		SHA-256: 9cdd1e0bd02f1ee238410e32feb8a63abe81983c68166eb1f4e3fad170a0770c
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer843)
		Method: <pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>
		SHA-256: eafce27de1af3c08c009449419b0c731338f412764079032ff78191a610e9542
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer929)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacMD5Key()>
		SHA-256: 8a615361d738e9ce4c8151576d591fe13635b36222e4213914982e63ee516274
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD256(byte[])>
		SHA-256: 8d5cf1dbeecedb6c274ddf1b764553be1da527fa993f34390ca784746157b35a
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKeyFactory
		Statement: r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer1018)
		Method: <pro.tools.security.ToolPBE2: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)>
		SHA-256: a4342a461a2535378a76049d4d6f1b1bf047db8f5dba7e39ce18813822fe6d2f
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacSHA224Key()>
		SHA-256: a48b6b6e68fe44dad7e099b924bf32ac3fa012765023bbc932f0320e64401d1d
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 760307a2289b8736c45db358d2d9a496840944bbd256b7c67ef6d2788464b97b
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD256(byte[])>
		SHA-256: d90bf3c0994433f0aa782160dc4e0fa4c7bff4a3fa1b30be2327d46997a9d533
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer900)
		Method: <pro.tools.security.ToolDESede: byte[] initKey()>
		SHA-256: b9545705f7160e8b38b0853675cb37d66589e91bd7eacb9bb83ee52a28390d38
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer978)
		Method: <pro.tools.security.ToolHTTPS2: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)>
		SHA-256: 73cce77bf10aeb14cc1565340c3bde4de98aa0dbfd4483fa61bcb04c9fc9e1f3
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolElGamal: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 3643979159b020d89827f39a703e4b183d2a9ca5ca78f9cdd1bb0d83c29a72b3
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD160(byte[])>
		SHA-256: 7f5b4108c828fc8f5f0c735ac7596b9ec9ac8318081545008410ac1fa3c6d2fa
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: 8b2907df4f60b39e80a556eb3691f8435c65a20957d1ecc30e11937d31498ff6
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>
		SHA-256: db4d76b046f0a52b69a0fcb5b53e8f6dd4709db5e0d25c5b95396885004474b2
		Secure: false
	Object:
		Variable: r6
		Type: java.security.KeyPair
		Statement: r6 = virtualinvoke r5.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>()
		Method: <pro.tools.security.ToolDH: java.util.Map initKey(byte[])>
		SHA-256: ab274115a27b3b4117be2d39521a251f1eab3f5411f0ef3f14a6d813eae97949
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer974)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA512(byte[])>
		SHA-256: 6213784620e494b58d77effac9e01e8a18c953c4a91d4519296ed49349083f10
		Secure: true
	Object:
		Variable: varReplacer940
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer940)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: d59b0d86329d08d50d89287187aa88d49d8e7ce4d4751779a90640e5d8e9d9e8
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<java.security.Signature: byte[] sign()>()
		Method: <pro.tools.security.ToolCertificate: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: a88972c556603797d24462267e297a448061bafed29fffd2a89d142d5bdb9595
		Secure: false
	Object:
		Variable: r6
		Type: java.security.Signature
		Statement: r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer851)
		Method: <pro.tools.security.ToolDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: 8d03d68eec520121bbd138b30b84f67f093fd78564313d0a4ee566dc338db307
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: 2f40c0f523fffa52f860c73f3d3511c9313cce55f11259d5b0e685413f091f3d
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)
		Method: <pro.tools.security.ToolPBE: java.security.Key toKey(java.lang.String)>
		SHA-256: 2e3575aa64df969743c885554e2271ba1da7bedc74d53975597389f6ab0d1350
		Secure: false
	Object:
		Variable: varReplacer921
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer921)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: 93e285ac2bb57d27f6c19de07e2ef06083f19ab63a6bde4e043f9604290f34d8
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: 3be7d83a16b6f3502978683859586b63bb287e60e53d09f49e9cb21828f0213d
		Secure: true
	Object:
		Variable: varReplacer931
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer931)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 64b080fff0ffcd5a503cfe53a27b18fefd9f264a164fb7840f310ca17aecaec0
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 586e71933cf0743e6a7e40c7eb604cc3121e416f127f234a43eb8c6f69376926
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 236a06cc974f26a1127b850943b0693d2cecb0a8bbae0a0cff231e899643169
		Secure: false
	Object:
		Variable: varReplacer967
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer967)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: 5d1e2a4bff45ce7509cad4576e52c03ba0bc1c5b161cf0c073673259e2fe2c53
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolRSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 200a4445e5f34114c18c355782024dc179c3fbb53153ab02dedd7a29cc860d41
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolElGamal: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: d4b1d7614468052709820ac91caaf7e8d1753b1ec3ae9cf3229ad871e97f624d
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDES: byte[] decrypt(byte[],byte[])>
		SHA-256: 6b0a934124c1d6233d6168c944a856539f68b41def10b606d5ddd9eccea5f3da
		Secure: false
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer969)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: 4c17eeb7992948ef14f9afb146555e6e6427eb982bda1a63d5e87171ed3c88fa
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r6.<java.security.Signature: boolean verify(byte[])>(r2)
		Method: <pro.tools.security.ToolDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: 7459fa263b3cf8f5837afa737014d1e11d28b8de06b66457b9773c00304249c5
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r2)
		Method: <pro.tools.security.ToolPBE2: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)>
		SHA-256: 43db9bfeb074003db67eeabb50ce56cf85bde3bf94a15f69ac2ca9cf59ce5dd1
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.Key
		Statement: $r5 = virtualinvoke r3.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r1, $r4)
		Method: <pro.tools.security.ToolCertificate: java.security.PrivateKey getPrivateKeyByKeyStore(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 92269ee32a02b1e22dd331772a35252a80c01aa96c0ba27423fe94d017b2b6b4
		Secure: false
	Object:
		Variable: r3
		Type: java.security.KeyPairGenerator
		Statement: r3 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer834)
		Method: <pro.tools.security.ToolElGamal: java.util.Map initKey()>
		SHA-256: 8f11251f26b82522ee0bf31258714c5895abd5684b61eb55d05854d52a7c0e1e
		Secure: false
	Object:
		Variable: varReplacer902
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer902)
		Method: <pro.tools.security.ToolAES: java.security.Key toKey(byte[])>
		SHA-256: c27f2c2b56ae37f799aa4e751e5267e6b584b6ffaf942ba2a766b4af07505721
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolECDSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 99a04f3ee59990d4c083ce8896bf59592d8d7a21eb70c78f84199113afd93bb2
		Secure: true
	Object:
		Variable: r17
		Type: java.security.MessageDigest
		Statement: r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer748)
		Method: <pro.tools.file.ToolFile: byte[] getFileMD5(java.io.File)>
		SHA-256: ed3e8904dd1feb0173cbf4d7b50b26c52094cb824b0543a8e7ff35f962ba6d1c
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] initHmacRipeMD160Key()>
		SHA-256: 75ce6ca0b884d7cfe42febb4f71615d79b7371f69f75394e9cfb694b5bd5cc54
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer951)
		Method: <pro.tools.security.md.ToolSHA1: byte[] encodeSHA(byte[])>
		SHA-256: fafcc37eb83614b5ab3ffc49cfbcf812ae6bc9362668f4674dadb60aca9459
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer961)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacSHA224Key()>
		SHA-256: 69cbe8f3d55636169ebf31465241075659ce16f4a8e1573bc18dae8748ad9ee0
		Secure: true
	Object:
		Variable: varReplacer861
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer861)
		Method: <pro.tools.security.ToolIDEA: java.security.Key toKey(byte[])>
		SHA-256: e5afda1f4b61796f6c77bb8a513822ea6129ad2b891ac445eb7f4e12148056e3
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer931)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 62e0dcb8cdc62358f19d166dc123a737266f6278c0898f920a22d3fa0049a601
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacMD4Key()>
		SHA-256: 8e273b49f4a06f79043a8e1ce49c0889f2b1648db49ebcb8750d151f2d6adbd9
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: abd5277172b317d3f4091518d592c93ba34da55225ea596315d76cde0bdbe838
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: 42c1f644bfffe51a8f57c1e5a2ae8d0bdd6188bfe58cbb9b23566b12746dc66e
		Secure: false
	Object:
		Variable: r6
		Type: java.security.Signature
		Statement: r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolCertificate2: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: de568c6f5e33726d3598c16f360faaf3bb19453bf0add8469771e0171913b9e
		Secure: false
	Object:
		Variable: r5
		Type: javax.net.ssl.TrustManagerFactory
		Statement: r5 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r10)
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 6a55a5b579bcaeee75cb69cf4b145d2315fca9e3bd53e198c27023d568b4fd83
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>
		SHA-256: d19212edff937e17aea6daa8521b47446a46187d22716f4923dc9a26504c6253
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: b48599a9b20ee484c8270030829db002322d917028ac3b676406806f3faa4c94
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 41a5182e3804616c6b785e941664f33440b0b12882b358c870bf979ac7bf1fc0
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA1: byte[] encodeSHA(byte[])>
		SHA-256: 65319d9a2c0f0b86da546f80def18ceef1ea8f0a2a397e2184e8df90d5b1940d
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 3563a99ec0ae0e5faf7912cf5746fcbe527d5b706e380a9276cc0489d92ed507
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKeyFactory
		Statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer894)
		Method: <pro.tools.security.ToolDESede: java.security.Key toKey(byte[])>
		SHA-256: 8128853e53b7cf15b2fdb7146c2daecd8946338227979a07bd0e0f809e00618a
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer861)
		Method: <pro.tools.security.ToolIDEA: java.security.Key toKey(byte[])>
		SHA-256: 7c954e322f03f23e35e6a61a3a2509007fc0cee5ad3a9a1bbac278138a4191c2
		Secure: false
	Object:
		Variable: r0
		Type: java.security.KeyPairGenerator
		Statement: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer912)
		Method: <pro.tools.security.ToolDH: java.util.Map initKey()>
		SHA-256: 7868f225b198cbedb2dc8a8f938c1d7ff977b8c072bf2d471e496ffec4b44ce4
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA256Key()>
		SHA-256: c912690a12bd3e743f0961bd4129108107f691aee4ecd55e8216dda70e097614
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: 9e56c841779ef69877dda77e46d1945b3a9f75ca6e3c08cfb2f644a5558278db
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: a0f842105a1ad3f79c296fdd8fed55f2eb9269b5080596c2fa97a39d0c0ad91d
		Secure: true
	Object:
		Variable: r1
		Type: byte[]
		Statement: $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <pro.tools.security.ToolCertificate2: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: bcd57178bee910ef1481df1627718219cfbb7e65d7d0b9c7b27b0cfcfa6211d0
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: e7d22108c54cad12988eb85d0ee35a08bbe4ddc7119f6800b4c486aecfa156d3
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer954)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeWhirlpool(byte[])>
		SHA-256: a343d30c1db1b9a7a452a662e374de24c1634f2e15a0ff81e7537beb9c3e36aa
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD128(byte[])>
		SHA-256: 1955721699b89563dff1d5a2bd7dbc21343cf6c86f9a5e5c624b2d16450b24d8
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer862)
		Method: <pro.tools.security.ToolIDEA: byte[] decrypt(byte[],byte[])>
		SHA-256: d3b92f7514ea136c2c49f175deb946fe3787caa0768145d7a95bd02b0725342e
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <pro.tools.security.ToolCertificate: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: 13a0af5c5ad32a3597ca25868f626b5bd55497b8499410689efd2a5f86491f10
		Secure: true
	Object:
		Variable: $r13
		Type: java.security.SecureRandom
		Statement: specialinvoke $r13.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 5041b3a42abf4f538943c3bfebf9378db1d36a9282884b15ae222173d2b2b95e
		Secure: true
	Object:
		Variable: r4
		Type: java.security.Signature
		Statement: r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: 2161b0bead8fde4fecf6d3fb70052505f21781d04108a3df0abcbbcc03a7baf7
		Secure: true
	Object:
		Variable: varReplacer958
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer958)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: bfc2739b0b8893dbc84eb54491d88053c1d82787165ef75a53a17602fc4cc271
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 69e5d2e3bc9a8282ebe0d6ef2824b7c7c6d2fe3e4dae9794a3dec80edecc3275
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: $z0 = virtualinvoke r6.<java.security.Signature: boolean verify(byte[])>(r2)
		Method: <pro.tools.security.ToolDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: 35514c6414fe79246c14dc05877cc435fa59c3cfb4f4855004d293f5b28bee13
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA224(byte[])>
		SHA-256: a078b987b654fc32d8f25eb6263e4f9932f1ffdd65d54d244d12fe402aa42597
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA256(byte[])>
		SHA-256: cd7b4fde320c0fa1ce3fa91b7c5245dcfdd9acfa25b0e795b0891612c46f5689
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer908)
		Method: <pro.tools.security.ToolAES: byte[] initKey()>
		SHA-256: fe97657f85eee3bc6ac4a5b07bce828a99138bf0afe530e302487be7813a7d73
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA224(byte[])>
		SHA-256: 9b5c2d815698f69424b44bbe47fb2673dbea44896e76ea969be8a0292f997f23
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.ToolDESede: byte[] initKey()>
		SHA-256: c8b93aaad05c3a14bd7aad689bca06ce82b3eaebbf3c46ac8cf02e782bb6599d
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r0.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <pro.tools.security.ToolPbkdf2: byte[] generateSalt()>
		SHA-256: 8e0e9045820d25f5cbc456f297bc9189596e035629630dcc769a79e620fc0fb1
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer932)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHAKey()>
		SHA-256: 97d1717d4a2ba5b6a968411961267a69ce3e6cbc0c432ffaef97133d4e125c43
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>
		SHA-256: 6d8bf87b3a6e17c9fe186f638d491d7eac44d8c1993a2b78ebacac0b73e73d25
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolIDEA: byte[] decrypt(byte[],byte[])>
		SHA-256: d9ff5a2d951cc174b86ddba149ae426abbc3afcfeb82e3da7f0fdaa122228650
		Secure: false
	Object:
		Variable: r0
		Type: java.security.SecureRandom
		Statement: r0 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer980)
		Method: <pro.tools.security.ToolPbkdf2: byte[] generateSalt()>
		SHA-256: 4353f9e6cc4c76f45beaad2964c2bcb27cd515b774504d0d62db88a87d9f127b
		Secure: true
	Object:
		Variable: r0
		Type: java.security.SecureRandom
		Statement: r0 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer1019)
		Method: <pro.tools.security.ToolPBE2: java.lang.String generateSalt()>
		SHA-256: 86e2a4950e2741ea7e5871c9bf7dceb6798862cc3ddab2d0e93c2a109472eb60
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDES: byte[] encrypt(byte[],byte[])>
		SHA-256: ece19b51a1fefc7386ab22ecd57d7685f1be550078d7da772dd03b1c6859a5f8
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer844)
		Method: <pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>
		SHA-256: 6790409a71e0180c94f4ac6980d1356f974ad7873ba15eae02b8b522c1f09de8
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeTiger(byte[])>
		SHA-256: 7166f9e91de31b25655223175cef5c30810112832e2d3ea97987c056d0022ad8
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: a96bea4f052891874066f33438f768bd2249d7b84ccd0e171a61c8cf46193247
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer905)
		Method: <pro.tools.security.ToolAES: byte[] encrypt(byte[],byte[])>
		SHA-256: f9f526e2f19fdc83005a9135f96a9f832393168de5f75ab19865bfa3eb2afab5
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolAES: byte[] encrypt(byte[],byte[])>
		SHA-256: 125aa9b2736cf0f76e20a5b41306bc36e0c529b7fd803104617104697a44d1d5
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolRSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 649d4e8c67f50114a21c0e30ebed8b68623015147dea99d99cd397d67aa01d7a
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: aa581f0db30b9bb62e6553db8bc27a79ee61196cf93aa44f50d24b45715cea70
		Secure: false
	Object:
		Variable: r5
		Type: java.security.Signature
		Statement: r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer998)
		Method: <pro.tools.security.ToolECDSA: byte[] sign(byte[],byte[])>
		SHA-256: caa1570c3504619bc09417699c511c2eef38bb7db4eb8b2efaf8a59f9f6772b7
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolElGamal: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: da1060d0f73544550b1e6f12536eb1d522e65cd34a3a46ca71ca0353d2c03657
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: 302b78062e6754636a569aa833f25f5bdaa3be780263186a766671a2f5ae794a
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: 6c91f43c868315fedb253399139f910403b5b38b7dcdf25e25827e002e72c8f0
		Secure: true
	Object:
		Variable: r4
		Type: java.security.Signature
		Statement: r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.ToolCertificate2: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: 180431acb223b6f07aa4006076e24647debb01e3fb17222ee1008f99667cd9e3
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer864)
		Method: <pro.tools.security.ToolIDEA: byte[] encrypt(byte[],byte[])>
		SHA-256: fe7141b0888bbbb9c1d323a4cea631bd9ad661e20b412c6fbd6890c3ca473592
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA384(byte[])>
		SHA-256: 2f04fbe96f4697930588e894972a6bd7ef7ec46bff0bcfb526c3e792c5aa7dee
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDESede: byte[] decrypt(byte[],byte[])>
		SHA-256: 767bc218c1c2641755a76bb9f4e35adc273d6ae5cfac99af7ea9e6fb5e10269c
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 1efb7eaec7a4e562a2b727a603764ce5eb7e1e8f90a48101eeb754b0766d6e0d
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD320(byte[])>
		SHA-256: 15e9165c26a6b0f1d7c712396c8276242e74398cc4ca228b9c03eb0dc13adf18
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeTiger(byte[])>
		SHA-256: 9d9419b7634184ed5d217a9abc620f2a83cb86b8b7ae973f0d012c4258c484da
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r0.<java.security.SecureRandom: byte[] generateSeed(int)>(varReplacer840)
		Method: <pro.tools.security.ToolPBE: byte[] initSalt()>
		SHA-256: 42f0bcf366eadee24ddcc426224bc5319ee529260c4b7faafdeba053b9576887
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: ba1c3edef2538c41a69f2b379d37ad61f787919a45f60ab00a7cd9a1f5c99a3e
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPair
		Statement: r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>()
		Method: <pro.tools.security.ToolDSA: java.util.Map initKey()>
		SHA-256: b5c227afbb8dd20ea31d9fda02475955ee32d47c64eee347c1c5e2e6c5ee82ff
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer921)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: 479d3d2d3958997cf53a1b1fed74f34a9d0c125fa3d7d250db80a20f20141455
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer895)
		Method: <pro.tools.security.ToolDESede: byte[] decrypt(byte[],byte[])>
		SHA-256: cac1f3b06d9da024401fb7d0ca56a59471d4d3a78a81d24fbcd58c7f003f0da
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPrivateKey(byte[],byte[])>
		SHA-256: 9035400396046f88268cac80b0de162e81a039cb1dc9ca967e763a35c8caad5b
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPrivateKey(byte[],byte[])>
		SHA-256: a5cf501b580a58ea2add800e626a383a09b09deee973782e809684d29cead60a
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 554772d790964837c45f9ba20dc3441fc10771cf467e6950888030ccb578e828
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer904)
		Method: <pro.tools.security.ToolAES: byte[] decrypt(byte[],byte[])>
		SHA-256: 7b014b13dd1c172bf550e9d7c483c1b580ffc3e349afa69aea8173dfaabed982
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolElGamal: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: a224e3463b72ecdc8fc531a2fd279d56b7090f827bbd10f17ef8809af78d3ea1
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)
		Method: <pro.tools.security.ToolDES: java.security.Key toKey(byte[])>
		SHA-256: 5fe2343b49e79840a80fc5de70ae874ef5acf29c2edbe2622287da10dc76a895
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)
		Method: <pro.tools.security.ToolDESede: java.security.Key toKey(byte[])>
		SHA-256: bf89f2317f4b6c192a81fb7de4b30b5eda1794ab10e6c66420010fa6def09280
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 3edbb9ef91272c5fee265d39309fd4adda45a5b222a88690e9f607b992112def
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: b33afeaef7bfdbb1c9b04bf98eb782a67595031fa720f782daa0c98b9332954a
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA384Key()>
		SHA-256: 61c4582c81333800a969e8d3dcdaadaac56c890c9dff830bbc63f5fb3cbe8290
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 87f0c11dd10b962910622fd187c51490c2b58bd11bcf7c36631cf1100243ec6a
		Secure: false
	Object:
		Variable: r4
		Type: java.security.KeyPair
		Statement: r4 = virtualinvoke r3.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>()
		Method: <pro.tools.security.ToolElGamal: java.util.Map initKey()>
		SHA-256: 890da456028f682748c87ff3c2de5cdb51502bfca0c63ae661b13a5df82b7cb0
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD320(byte[])>
		SHA-256: 7ebb88618c84831b58c6e45b1623d376d94db0114a4aa1c4a703edc03964853e
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: a2824411cfcd0b92d50162a252612457708767d8af60755bcb837390ec4bc179
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDH: byte[] getPublicKey(java.util.Map)>
		SHA-256: ce14afb5eff25b18871606994f08d93741febe0c5e11a45291b7caea2b2d16bf
		Secure: true
	Object:
		Variable: r1
		Type: java.security.KeyPair
		Statement: r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <pro.tools.security.ToolDH: java.util.Map initKey()>
		SHA-256: 963e9793f9cd89e1230f9f7a429e480f5bca12ba0319ba1ff8cb91ebc8e6d474
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer935)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA256Key()>
		SHA-256: 7e10d0b85df1ccca88f1c57e97ce1a81a6f1fbf9772fd8ae82b8600519e3bd1f
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolElGamal: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 9d8e78b70e11436721d65886ed7b89796719a16f7c23574d66e66d0d67c273a2
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 54de5498184583272b3c11b26077a026729a8a3982b55030a6c67e22d7a15d88
		Secure: false
	Object:
		Variable: varReplacer936
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer936)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: a6ac5da3b513b19a1929fb3b5bbfb9c491177dfa302178f2c03c23e02c873ae3
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolAES: byte[] decrypt(byte[],byte[])>
		SHA-256: 60205d17b135ac3e212afdaefceeb9c0bcd482360d86274e6849d093dba9e298
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.DigestInputStream
		Statement: specialinvoke $r8.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>(r1, r17)
		Method: <pro.tools.file.ToolFile: byte[] getFileMD5(java.io.File)>
		SHA-256: 859fc76590024a1722573c7e0e9a9e39db0d1493bad11933777e6f2debcc8a96
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKeyFactory
		Statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer1002)
		Method: <pro.tools.security.ToolDES: java.security.Key toKey(byte[])>
		SHA-256: a4bc3aa23a43a43220f4fb808be471e37a26d23a747a2c921e9e4542d9277448
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolIDEA: byte[] decrypt(byte[],byte[])>
		SHA-256: 1ac6b929f829934aa08404e5519e7be5e90cad203cf05ee89ccc6a7e747ebc16
		Secure: false
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer962)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: 834790da261b4db0129341af6db5fe65d097bfe5b21bae17ace8b69b44327968
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: 7682cade83742a6a759dcc4ce60e8ac952c318e53660e1e273e1cf580aada66
		Secure: true
	Object:
		Variable: varReplacer933
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer933)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: 1a25cdeebcd4f2bdbe63efac11ddbedcf6dc2776a27dc68cc5bbdbd594e4649d
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolAES: byte[] encrypt(byte[],byte[])>
		SHA-256: d5c5a5607aba44b356cbdf066368dab4cd0685fd280f18beecd0df6e3196c6a3
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKeyFactory
		Statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer841)
		Method: <pro.tools.security.ToolPBE: java.security.Key toKey(java.lang.String)>
		SHA-256: a377b440e40cf748a8f9f72c750e159de34e4a4841121609c5f1c5eff56eda28
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPublicKey(byte[],byte[])>
		SHA-256: 52b6d04483dcd966e5d73e2669e294bf50685433e279b4f20e93b82ab0ed8ec1
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer957)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacMD2Key()>
		SHA-256: 2fbd0c1415905a2fab696fbd056236cb0e37ec7a2ea54d40b6c8d70db959adad
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 33ece7e103f5d8a0a2d98a85e5a97168016fa3cb7ce658eda419ee7d7c15a613
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA384(byte[])>
		SHA-256: 404c3d0cedaa0e5dc40e979c4b096c296746f28bddff3c65a5a7f018ebaa4385
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: 3fff701852de6944fa5a42cc75f501d822a54ccd7f2da13505eb7ad66fffe9dd
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer940)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: a686ca0a74b40aa6bf1b3116b03a12ed51ff9ce2dd039f88ab0aaee0c7d77056
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.ToolIDEA: byte[] initKey()>
		SHA-256: f5c65c30e77d0e1d535de0d14395541c8bd506265bdae952f7f099ba26bd4999
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolECDSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 6259649aac6ad464d24593de233a5929a9431de96faf6b7734a5b3a237cb5f33
		Secure: true
	Object:
		Variable: r5
		Type: java.security.Signature
		Statement: r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer849)
		Method: <pro.tools.security.ToolDSA: byte[] sign(byte[],byte[])>
		SHA-256: e3691e6c8b581a75bb099e5c945c3b3df99b5d018b4ee1bd9893f17a22d50f3a
		Secure: false
	Object:
		Variable: varReplacer1017
		Type: int
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer1016, varReplacer1017)
		Method: <pro.tools.security.ToolPBE2: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)>
		SHA-256: d92e33d66d4d683de7c81d702136b1b03aa0921d2a3c40d6f87a9b4c7179775d
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeGOST3411(byte[])>
		SHA-256: 129ba1c5a29f10a180ff9bedcd782cb3f989c51542282fabcf1193bad7a358a1
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolPBE: byte[] initSalt()>
		SHA-256: 11c0282ef9146aca0f4254cc48130cdf6a05c952df25e68709784048895cbbab
		Secure: true
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer946)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD256(byte[])>
		SHA-256: d0f6d360a34c027156331cfeb9e16c5dcabd18858110e4372a51bbf74ff39374
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1003)
		Method: <pro.tools.security.ToolDES: byte[] decrypt(byte[],byte[])>
		SHA-256: c7ad995a46b0272ed148e073456dd1be2a6520fe9f48f18441abf4c212c8e821
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA512(byte[])>
		SHA-256: 32c9aa6e024d622ab1097e7cd3eef64069abbb96649ec8bec5001abc36318797
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer919)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: a31db7f57feeb52a3d8de7f6efb08f13675080d01dcce6e286f0a91054697059
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 401ba1cf36c77878184a1135db410034feff23a95d58226843648ef6cfa79ea1
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: ddf453410047fbbc0701465f3c41c57840a85e1b1b4100258498d957955f2acd
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.Key
		Statement: $r5 = virtualinvoke r3.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r1, $r4)
		Method: <pro.tools.security.ToolCertificate2: java.security.PrivateKey getPrivateKeyByKeyStore(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 31d55e57cbe6b33c7fe3e77f0696b1c07a6d5772b80954a77e8d728df17c39e0
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer845)
		Method: <pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>
		SHA-256: d18e61fb4f320af7e4cae35f9a262e2ab5d6ee0cc98a3009b693749255362570
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD128(byte[])>
		SHA-256: 41d569ce12fa5edf55b7fe62eb65033965d4f9870778548fbc02aa2433437454
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer947)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD320(byte[])>
		SHA-256: 74ea2cdb7744cd350a0a8e396fec439dc9863cfa08753cda49dde17dd42080dc
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer933)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: eb8bfbb48e8a76560eb6a4e48b1223f05b74a14773e0701c4e7fa9052e285bbb
		Secure: false
	Object:
		Variable: s0
		Type: short
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r1, s1, s0)
		Method: <pro.tools.security.ToolPbkdf2: byte[] getEncryptedPassword(java.lang.String,byte[])>
		SHA-256: 8c8a0cd8cd273b36b3d4fa5ba5bfc9d34105d0f752f0fa4f503ade83af7ffecb
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeGOST3411(byte[])>
		SHA-256: 2692c976bcadd78a9ac75c976d6b5c5ddbe7cec71e9f4cc3b8ac6f9cc12e0376
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 6367c0d9a3f161809f5527a2bcdaa954051c95a49d624e75e4e818f84262e5d3
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer934)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: 47681503f957af2ea3f68a42547f8e46df1eab35a4eca970ad1cd1cd4b35ab61
		Secure: false
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer960)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: f04f5469dd47cf62fb0683dcc8873c2a0f4c37ffe17c734a91d730635517c126
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer953)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeTiger(byte[])>
		SHA-256: 6d2bf1fe8bcfa8227de1d8ef9a1cfb42c354f32ed11310176df580872877f186
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDES: byte[] encrypt(byte[],byte[])>
		SHA-256: 6ea63cdd85b8d0d4224666bdbfaa65ba4030724f7d36c8c04b593214e26b8f34
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer972)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA256(byte[])>
		SHA-256: a0f7b9a70e27f681079ca3ae4fcf0ec32afde6ce78a571b99d19314fd0cf64e7
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>
		SHA-256: 4f093a12dbb8dda886630ba97a4af90c08f407f2f7819b152847655b29c302e6
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDESede: byte[] encrypt(byte[],byte[])>
		SHA-256: a5c6f783ac68724556719b2647640c58abe0c899ac9c042603895a3068b1ef96
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer1008)
		Method: <pro.tools.security.ToolDES: byte[] initKey()>
		SHA-256: bdf652be52d84acd8daf1ab84b5aea9595b5f94f2d7b4f390ece2e51a13eec65
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: bd813f0b0c662c4fc4db9db227bba24db72f74f231645197387f00f7f9cab8c
		Secure: true
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer973)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA384(byte[])>
		SHA-256: fec0a766b31f3eeec4a199a2bef92081a348974e0119ba60937b506c01b6aff7
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.ToolAES: byte[] initKey()>
		SHA-256: beb8c6c6a09afd3396ea503817a030cc994dc6e06691ac1ca0bc133dfe9f908f
		Secure: true
	Object:
		Variable: varReplacer960
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer960)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: 2bb1b7b02a02cb679dbcc3a25de177c5cdea14ba1c32bedb3c9f1f08808b5541
		Secure: false
	Object:
		Variable: varReplacer969
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer969)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: fd51a071a8c6a81732f9f4ba0f1bfc5314aec75c104299547457cdec14e6d7d9
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 19e04ed3c7905e5f2c1da3331541ca5c2d6465696d9ce0d2fc69adaa30fc7902
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer902)
		Method: <pro.tools.security.ToolAES: java.security.Key toKey(byte[])>
		SHA-256: 79ff90c41030c37a6e0f0051825751d43e888b5f887b3360efc7b4e647266fb0
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 7efa53048df17ec290662b5e1dcd1d6171bf0acac8ff4f6e353a1f64ab880c74
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolDES: byte[] initKey()>
		SHA-256: aa2648dc498d2ec8bf82e0418ac4545ece05791454eed9e07e9408befb0be6d5
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)
		Method: <pro.tools.security.ToolPbkdf2: byte[] getEncryptedPassword(java.lang.String,byte[])>
		SHA-256: 4544d6ee9e947e9a3c13254fd41b636f1a0d635e5c9ba6978f8a7eaa28214e9b
		Secure: false
	Object:
		Variable: $r12
		Type: javax.net.ssl.TrustManager[]
		Statement: $r12 = virtualinvoke r5.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 7d885468d12525810ce5648d4fc74e0f7dccabe42fd2c531cda2220a3fa7ac99
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer971)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA224(byte[])>
		SHA-256: 20facab976d79cafa0248664a761f08fa9fc0868041bd321a4d2abb0a94a1ea5
		Secure: false
	Object:
		Variable: r5
		Type: java.security.Signature
		Statement: r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolCertificate: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 3b90dd68015445a9e54930c1db3031e9185124108baffc5ab29a0db650f57121
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r6.<java.security.Signature: boolean verify(byte[])>(r2)
		Method: <pro.tools.security.ToolECDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: 1659d664a4db7f95348fe506707e3a8099086d0184d588369fd98bd6ea19672c
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: e8f128750433c2cd88d0d731091c12c6d43e3ea3a8add8b9f294d19c5774a819
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<java.security.Signature: byte[] sign()>()
		Method: <pro.tools.security.ToolDSA: byte[] sign(byte[],byte[])>
		SHA-256: 8050949f08f47e41541a5f9c8576ba5e4396a5792840a9f2e56b4564d75fa854
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: fcc731e7d8f6b6f3d0d038e960493e63001026ca8e0bdebbae6ea86a2aebd0e5
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: 2ce47542bfcaefc2493d2ddff94cadaa07dcaef58595478b7db12a2cf4ba923f
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer1016, varReplacer1017)
		Method: <pro.tools.security.ToolPBE2: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)>
		SHA-256: 9e5e073c85e11a0298a562b8d38e811a937f51273f9c0eeca543188c1640a71c
		Secure: false
	Object:
		Variable: $r11
		Type: javax.net.ssl.KeyManager[]
		Statement: $r11 = virtualinvoke r3.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 21d0104ac72eca02b8bf6a947fab6c7e3d7466a9dc607cd9c88ca1225ba37f5f
		Secure: false
	Object:
		Variable: r5
		Type: java.security.KeyPairGenerator
		Statement: r5 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>($r12)
		Method: <pro.tools.security.ToolDH: java.util.Map initKey(byte[])>
		SHA-256: c24ad7562e67e25e4029391df9edd5db1e8c8b49f7b7e9dba84219e899289d61
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: 8c6f6c2e48bbb91e1114da5634062545a9dc2856a4b42f4525d9a5c0e92bd4cb
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHAKey()>
		SHA-256: 6c038457a7263cbdf0ddac0c56f3f754e9db0ebf402a5a18b0be623a1a0b0edc
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDES: byte[] decrypt(byte[],byte[])>
		SHA-256: e609dbea98a40ecedc52fa356836052cfee2dba06b413eec6d76a9a5c3ff539d
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPublicKey(byte[],byte[])>
		SHA-256: aa066848a894a9c45033a6482921d5d59c73eed68dc5e18fcc8ff205181cc274
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD5: byte[] encodeMD5(byte[])>
		SHA-256: 8b012ba4e05506fe9a3605d376a4944aa411805a1ae1301e90d072ade4f0da50
		Secure: false
	Object:
		Variable: r0
		Type: java.security.KeyPairGenerator
		Statement: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer853)
		Method: <pro.tools.security.ToolDSA: java.util.Map initKey()>
		SHA-256: 2a9f5a20dd14a75378ba9a84fdeb2127ae40328458c71d9f8d54d11e94920c2b
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: f80d6174aff8d2b71a56aa997609e89315c734509c0fc6716a6d828e068144c5
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer938)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: 8141b10523e717d5c57b000912e7944ee3f99d9e0aa91239bd208e5acee4ab4b
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: 2fa2c37dca6e7cec8b1b6d1d847798136993bdf43c2de412de272b41e7466e0c
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer945)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD160(byte[])>
		SHA-256: b3c74a26b0a2b6bd2716da75b687c7c3e4db6e59174b0db31fe135a8c434a34e
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r1, s1, s0)
		Method: <pro.tools.security.ToolPbkdf2: byte[] getEncryptedPassword(java.lang.String,byte[])>
		SHA-256: ca2def7222cf1f826795695cc40ef995369e69249745ad41bbbc6f64fd58664b
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer930)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: f45ccfa3b7a92d857670342f5fdb82e9d582f19c40854fc3a2f0467eed66a741
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD2: byte[] encodeMD2(byte[])>
		SHA-256: a0e9f1a865415fdec83a17d6ab51ca6d7b38436a92bfef9ea7d4d120b5fa77aa
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 8cfd92582139110770c8cb9a3a49ecbaa1b34cbaf39eeb6b27a213754a33777c
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer944)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD128(byte[])>
		SHA-256: f44f703bb16a6a95a16da665b8d92cf49a5fb8b58841b1d105cc38dffe0b7cdd
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: ce6742f31a0e025b9bb217b5f79bb0dd74691a55c6875ccebd85bd5225195c70
		Secure: true

Findings in Java Class: pro.tools.security.ToolPBE

	 in Method: java.security.Key toKey(java.lang.String)
		ForbiddenMethodError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Detected call to forbidden method void <init>(char[]) of class javax.crypto.spec.PBEKeySpec. Instead, call method <javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>.
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>($r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #a377b440e40cf748a8f9f72c750e159de34e4a4841121609c5f1c5eff56eda28)
			First parameter (with value "PBEWithMD5AndTripleDES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer841)


	 in Method: byte[] encrypt(byte[],java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer842, r3, r4)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #6790409a71e0180c94f4ac6980d1356f974ad7873ba15eae02b8b522c1f09de8)
			Second parameter (with value 512)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer844)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #eafce27de1af3c08c009449419b0c731338f412764079032ff78191a610e9542)
			First parameter (with value "PBEWithMD5AndTripleDES") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer843)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer844)


	 in Method: byte[] decrypt(byte[],java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer847, r3, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer846)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #98b7abef65167bd50a14bfc981ce6d1fdff723fe4c5fe16609f2aa6cf49ed48a)
			Second parameter (with value 100)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer846)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d18e61fb4f320af7e4cae35f9a262e2ab5d6ee0cc98a3009b693749255362570)
			First parameter (with value "PBEWithMD5AndTripleDES") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer845)


Findings in Java Class: pro.tools.file.ToolFile

	 in Method: byte[] getFileMD5(java.io.File)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #ed3e8904dd1feb0173cbf4d7b50b26c52094cb824b0543a8e7ff35f962ba6d1c)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer748)

		IncompleteOperationError violating CrySL rule for java.security.DigestInputStream (on Object #859fc76590024a1722573c7e0e9a9e39db0d1493bad11933777e6f2debcc8a96)
			Operation on object of type java.security.DigestInputStream object not completed. Expected call to read
			at statement: r22 = virtualinvoke r19.<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()>()

		IncompleteOperationError violating CrySL rule for java.security.DigestInputStream (on Object #859fc76590024a1722573c7e0e9a9e39db0d1493bad11933777e6f2debcc8a96)
			Operation on object of type java.security.DigestInputStream object not completed. Expected call to read
			at statement: virtualinvoke r19.<java.security.DigestInputStream: void close()>()

		IncompleteOperationError violating CrySL rule for java.security.DigestInputStream (on Object #859fc76590024a1722573c7e0e9a9e39db0d1493bad11933777e6f2debcc8a96)
			Operation on object of type java.security.DigestInputStream object not completed. Expected call to read
			at statement: virtualinvoke r19.<java.security.DigestInputStream: void close()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #ed3e8904dd1feb0173cbf4d7b50b26c52094cb824b0543a8e7ff35f962ba6d1c)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: specialinvoke $r8.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>(r1, r17)


Findings in Java Class: pro.tools.security.ToolElGamal

	 in Method: byte[] decryptByPrivateKey(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer828, r4)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer828, r4)


	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #8f11251f26b82522ee0bf31258714c5895abd5684b61eb55d05854d52a7c0e1e)
			First parameter (with value "ElGamal") should be any of {RSA, EC, DSA, DiffieHellman, DH}
			at statement: r3 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer834)


	 in Method: byte[] encryptByPublicKey(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer829, r4)


Findings in Java Class: pro.tools.security.ToolDSA

	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #2a9f5a20dd14a75378ba9a84fdeb2127ae40328458c71d9f8d54d11e94920c2b)
			First parameter (with value 1024) should be any of {2048}
			at statement: virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(int,java.security.SecureRandom)>(varReplacer857, $r5)


	 in Method: byte[] sign(byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r5.<java.security.Signature: void initSign(java.security.PrivateKey)>(r4)


	 in Method: boolean verify(byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke r6.<java.security.Signature: void initVerify(java.security.PublicKey)>(r5)


Findings in Java Class: pro.tools.security.ToolIDEA

	 in Method: java.security.Key toKey(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer861)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #7c954e322f03f23e35e6a61a3a2509007fc0cee5ad3a9a1bbac278138a4191c2)
			Second parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer861)


	 in Method: byte[] decrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d3b92f7514ea136c2c49f175deb946fe3787caa0768145d7a95bd02b0725342e)
			First parameter (with value "IDEA/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer862)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer863, r2)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #fe7141b0888bbbb9c1d323a4cea631bd9ad661e20b412c6fbd6890c3ca473592)
			First parameter (with value "IDEA/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer864)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer865, r2)


	 in Method: byte[] initKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #750971ab376fc3fd6377dfe10ab96783e833f907b28170544ec73927fb364115)
			First parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer866)


Findings in Java Class: pro.tools.security.ToolRSA

	 in Method: byte[] decryptByPrivateKey(byte[],byte[])
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer879, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer879, r4)


	 in Method: byte[] decryptByPublicKey(byte[],byte[])
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer880, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer880, r4)


	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #7cbc3d9fb1779320c3a54e304fa6c0e85c801b16ff3ca51d72212194de133339)
			First parameter (with value 512) should be any of {4096, 3072, 2048}
			at statement: virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer892)


	 in Method: byte[] encryptByPrivateKey(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer885, r4)


	 in Method: byte[] encryptByPublicKey(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer882, r4)


Findings in Java Class: pro.tools.security.ToolDESede

	 in Method: java.security.Key toKey(byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #8128853e53b7cf15b2fdb7146c2daecd8946338227979a07bd0e0f809e00618a)
			First parameter (with value "DESede") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer894)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)


	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer896, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #cac1f3b06d9da024401fb7d0ca56a59471d4d3a78a81d24fbcd58c7f003f0da)
			First parameter (with value "DESede/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer895)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #1f56124960b528f708766bc2a4bef783be714a408dbdf14e1539f29993b6423b)
			First parameter (with value "DESede/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer897)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer898, r2)


	 in Method: byte[] initKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #b9545705f7160e8b38b0853675cb37d66589e91bd7eacb9bb83ee52a28390d38)
			First parameter (with value "DESede") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer900)


Findings in Java Class: pro.tools.security.ToolAES

	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer903, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #7b014b13dd1c172bf550e9d7c483c1b580ffc3e349afa69aea8173dfaabed982)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer904)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #f9f526e2f19fdc83005a9135f96a9f832393168de5f75ab19865bfa3eb2afab5)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer905)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer906, r2)


	 in Method: java.security.Key toKey(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer902)


Findings in Java Class: pro.tools.security.ToolDH

	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #7868f225b198cbedb2dc8a8f938c1d7ff977b8c072bf2d471e496ffec4b44ce4)
			First parameter (with value 512) should be any of {2048}
			at statement: virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer910)


	 in Method: byte[] decrypt(byte[],byte[])
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer922, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer921)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer922, r2)


	 in Method: byte[] encrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer920, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer919)


	 in Method: java.util.Map initKey(byte[])
		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared R S A
			at statement: virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4)

		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared D H
			at statement: virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4)

		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared D S A
			at statement: virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4)

		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared E C
			at statement: virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4)


Findings in Java Class: pro.tools.security.md.ToolMAC

	 in Method: byte[] initHmacMD5Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #8a615361d738e9ce4c8151576d591fe13635b36222e4213914982e63ee516274)
			First parameter (with value "HmacMD5") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer929)


	 in Method: byte[] encodeHmacMD5(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #f45ccfa3b7a92d857670342f5fdb82e9d582f19c40854fc3a2f0467eed66a741)
			First parameter (with value "SslMacMD5") should be any of {HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer930)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #62e0dcb8cdc62358f19d166dc123a737266f6278c0898f920a22d3fa0049a601)
			Second parameter (with value "HmacMD5") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer931)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer931)


	 in Method: byte[] initHmacSHAKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #97d1717d4a2ba5b6a968411961267a69ce3e6cbc0c432ffaef97133d4e125c43)
			First parameter (with value "HMacTiger") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer932)


	 in Method: byte[] encodeHmacSHA(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #eb8bfbb48e8a76560eb6a4e48b1223f05b74a14773e0701c4e7fa9052e285bbb)
			Second parameter (with value "HMacTiger") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer933)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer933)

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #47681503f957af2ea3f68a42547f8e46df1eab35a4eca970ad1cd1cd4b35ab61)
			First parameter (with value "SslMacMD5") should be any of {HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer934)


	 in Method: byte[] encodeHmacSHA512(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer940)


	 in Method: byte[] encodeHmacSHA256(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer936)


	 in Method: byte[] encodeHmacSHA384(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer938)


Findings in Java Class: pro.tools.security.md.ToolMD4

	 in Method: byte[] encodeMD4(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #be1d006a19ba2b8aa9c00dc6c1cbc86df84905d1d092991e7e1e7ebda46407c5)
			First parameter (with value "MD4") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer942)


Findings in Java Class: pro.tools.security.md.ToolRipeMD

	 in Method: byte[] encodeRipeMD128(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #f44f703bb16a6a95a16da665b8d92cf49a5fb8b58841b1d105cc38dffe0b7cdd)
			First parameter (with value "RipeMD128") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer944)


	 in Method: byte[] encodeRipeMD160(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b3c74a26b0a2b6bd2716da75b687c7c3e4db6e59174b0db31fe135a8c434a34e)
			First parameter (with value "RipeMD160") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer945)


	 in Method: byte[] encodeRipeMD256(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #d0f6d360a34c027156331cfeb9e16c5dcabd18858110e4372a51bbf74ff39374)
			First parameter (with value "RipeMD256") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer946)


	 in Method: byte[] encodeRipeMD320(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #74ea2cdb7744cd350a0a8e396fec439dc9863cfa08753cda49dde17dd42080dc)
			First parameter (with value "RipeMD320") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer947)


Findings in Java Class: pro.tools.security.md.ToolMD5

	 in Method: byte[] encodeMD5(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #645bfa2f469937a70523714e165e75250d40f444b4bab37f39ee4a630d862c42)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer949)


Findings in Java Class: pro.tools.security.md.ToolSHA1

	 in Method: byte[] encodeSHA(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #fafcc37eb83614b5ab3ffc49cfbcf812ae6bc9362668f4674dadb60aca9459)
			First parameter (with value "SHA") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer951)


Findings in Java Class: pro.tools.security.md.ToolMD

	 in Method: byte[] encodeTiger(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #6d2bf1fe8bcfa8227de1d8ef9a1cfb42c354f32ed11310176df580872877f186)
			First parameter (with value "Tiger") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer953)


	 in Method: byte[] encodeWhirlpool(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a343d30c1db1b9a7a452a662e374de24c1634f2e15a0ff81e7537beb9c3e36aa)
			First parameter (with value "Whirlpool") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer954)


	 in Method: byte[] encodeGOST3411(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #df2ce304296134b33e3018e469203e2181b1a293bf65db0bd34b8f6369ada39f)
			First parameter (with value "GOST3411") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer955)


Findings in Java Class: pro.tools.security.md.ToolMAC_BCP

	 in Method: byte[] initHmacMD2Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #2fbd0c1415905a2fab696fbd056236cb0e37ec7a2ea54d40b6c8d70db959adad)
			First parameter (with value "HmacMD2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer957)


	 in Method: byte[] encodeHmacMD2(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer958)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #7ad1d3cd1dfc5bee93420655fef55864cec697ff1e0b5202766f980ae5eef23c)
			Second parameter (with value "HmacMD2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer958)


	 in Method: byte[] initHmacMD4Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #c63b610f9c4893577c6804bdb56c25acb1bf91be3d40d84361c62711e6d382ad)
			First parameter (with value "HmacMD4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer959)


	 in Method: byte[] encodeHmacMD4(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #f04f5469dd47cf62fb0683dcc8873c2a0f4c37ffe17c734a91d730635517c126)
			Second parameter (with value "HmacMD4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer960)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer960)


	 in Method: byte[] encodeHmacSHA224(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer962)


Findings in Java Class: pro.tools.security.md.ToolMD2

	 in Method: byte[] encodeMD2(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #9249bd374abcadc45186fe07a553c48f1d8afb74cf623c4335d140c2aff70e10)
			First parameter (with value "MD2") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer964)


Findings in Java Class: pro.tools.security.md.ToolHmacRipeMD

	 in Method: byte[] initHmacRipeMD128Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #9f3bafca9175152305f909bf75c2b67ce4491b29a3fefd51056326cd34fb8af7)
			First parameter (with value "HmacRipeMD128") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer966)


	 in Method: byte[] encodeHmacRipeMD128(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #c4e695e3397f0d98f1ea4e128319d79f3a2f916562a1bb7c489e905feca2402b)
			Second parameter (with value "HmacRipeMD128") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer967)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer967)


	 in Method: byte[] initHmacRipeMD160Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #4eec57ac8ccc0bfe2d2d43ecea4615017a9472e94e1edf1dffc36a7d9bbaf402)
			First parameter (with value "HmacRipeMD160") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer968)


	 in Method: byte[] encodeHmacRipeMD160(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer969)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #4c17eeb7992948ef14f9afb146555e6e6427eb982bda1a63d5e87171ed3c88fa)
			Second parameter (with value "HmacRipeMD160") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer969)


Findings in Java Class: pro.tools.security.md.ToolSHA2

	 in Method: byte[] encodeSHA224(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #20facab976d79cafa0248664a761f08fa9fc0868041bd321a4d2abb0a94a1ea5)
			First parameter (with value "SHA-224") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer971)


Findings in Java Class: pro.tools.security.ToolHTTPS

	 in Method: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #deca2f2fd47f75a658c9295c51125d6879b4610c9eee2d180634a2c01f08c91f)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r3, $r6)


	 in Method: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r11, $r12, $r13)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r11, $r12, $r13)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #21d28b95ea94362a88aed73412bdcc4232b60f9222c14e597d046aad77f35529)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r3.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r4, $r9)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #256f4edb44d403b05730dddbfddc2ee6f1bcf889ca7d7507e78ba015d0dcf9ca)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer976)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r3.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r4, $r9)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r5.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r6)


Findings in Java Class: pro.tools.security.ToolHTTPS2

	 in Method: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #73cce77bf10aeb14cc1565340c3bde4de98aa0dbfd4483fa61bcb04c9fc9e1f3)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r3, $r5)


Findings in Java Class: pro.tools.security.ToolPbkdf2

	 in Method: byte[] getEncryptedPassword(java.lang.String,byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #191a635bfa78788ab4f822d30fa09325f8862f995137d72e93b1c92323136d1)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(r2)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #ca2def7222cf1f826795695cc40ef995369e69249745ad41bbbc6f64fd58664b)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r1, s1, s0)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r1, s1, s0)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r7 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #ca2def7222cf1f826795695cc40ef995369e69249745ad41bbbc6f64fd58664b)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r7 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)


Findings in Java Class: pro.tools.security.ToolECDSA

	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #6d16cc95e019d19a36099cf43d21f936b7098b13e1c2653fe4cfe9c6f8341e93)
			First parameter (with value "ECDSA") should be any of {RSA, EC, DSA, DiffieHellman, DH}
			at statement: r10 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer993)


	 in Method: byte[] sign(byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r5.<java.security.Signature: void initSign(java.security.PrivateKey)>(r4)

		ConstraintError violating CrySL rule for java.security.Signature (on Object #caa1570c3504619bc09417699c511c2eef38bb7db4eb8b2efaf8a59f9f6772b7)
			First parameter (with value "SHA512withECDSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA224withDSA, NONEwithDSA, SHA1withDSA}
			at statement: r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer998)


	 in Method: boolean verify(byte[],byte[],byte[])
		ConstraintError violating CrySL rule for java.security.Signature (on Object #b03f64f329d6a2ea800a93462c8ce97c556390d75cc8a9b3a111ce792b54143f)
			First parameter (with value "SHA512withECDSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA224withDSA, NONEwithDSA, SHA1withDSA}
			at statement: r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer999)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke r6.<java.security.Signature: void initVerify(java.security.PublicKey)>(r5)


Findings in Java Class: pro.tools.security.ToolDES

	 in Method: java.security.Key toKey(byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #a4bc3aa23a43a43220f4fb808be471e37a26d23a747a2c921e9e4542d9277448)
			First parameter (with value "DES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer1002)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)


	 in Method: byte[] decrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c7ad995a46b0272ed148e073456dd1be2a6520fe9f48f18441abf4c212c8e821)
			First parameter (with value "DES/ECB/PKCS5PADDING") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1003)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1004, r2)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #58c884e76a077f0a372cdc7b9f46d59f4a2e4f0b9f82a05670421784ff0fe721)
			First parameter (with value "DES/ECB/PKCS5PADDING") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1005)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1006, r2)


	 in Method: byte[] initKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #bdf652be52d84acd8daf1ab84b5aea9595b5f94f2d7b4f390ece2e51a13eec65)
			First parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer1008)


Findings in Java Class: pro.tools.security.ToolCertificate

	 in Method: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1012, r4)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1012, r4)


	 in Method: byte[] decryptByPublicKey(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1014, r2)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1014, r2)


	 in Method: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1011, r4)


	 in Method: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r5.<java.security.Signature: void initSign(java.security.PrivateKey)>(r6)


	 in Method: byte[] encryptByPublicKey(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1013, r2)


Findings in Java Class: pro.tools.security.ToolPBE2

	 in Method: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9e5e073c85e11a0298a562b8d38e811a937f51273f9c0eeca543188c1640a71c)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer1016, varReplacer1017)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r2)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #a4342a461a2535378a76049d4d6f1b1bf047db8f5dba7e39ce18813822fe6d2f)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer1018)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9e5e073c85e11a0298a562b8d38e811a937f51273f9c0eeca543188c1640a71c)
			Third parameter (with value 1000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer1016, varReplacer1017)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9e5e073c85e11a0298a562b8d38e811a937f51273f9c0eeca543188c1640a71c)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer1016, varReplacer1017)


Findings in Java Class: pro.tools.security.ToolCertificate2

	 in Method: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #948354feb820c4c57a14b0fc847570f53001d4bb4d134af226b2625c55491e91)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r3, $r7)


	 in Method: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1030, r4)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1030, r4)


	 in Method: byte[] decryptByPublicKey(byte[],java.lang.String)
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1032, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1032, r2)


	 in Method: byte[] encryptByPublicKey(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1031, r2)


	 in Method: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1029, r4)


	 in Method: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r6.<java.security.Signature: void initSign(java.security.PrivateKey)>(r7)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 301

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 6
	ForbiddenMethodError: 9
	RequiredPredicateError: 63
	ConstraintError: 57
	IncompleteOperationError: 6
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 8 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 9.651 s
