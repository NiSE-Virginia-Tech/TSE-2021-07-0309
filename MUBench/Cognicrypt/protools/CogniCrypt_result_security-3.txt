
Current Proejct: /home/x/CryptoAPIDetect/dataset/MUBench/protools/security/target/security-3.0.jar
[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 355.6 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 126 analysis seeds within 0 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 128
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.01

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 130
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.02

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 130
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.02

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 131
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.03

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 132
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.04

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 133
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.05

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 134
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.05

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 135
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.06

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 135
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.07

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 137
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.07

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 137
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.08

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 139
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.09

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 140
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.09

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 142
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.1

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 142
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.11

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 143
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.11

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 144
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.12

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 145
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.12

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 146
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.13

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 148
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.14

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.14

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 151
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.15

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 153
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.15

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 24 of 155
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.15

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 25 of 157
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.16

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 26 of 159
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.16

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 27 of 160
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.17

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 28 of 161
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.17

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 29 of 162
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.18

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 30 of 163
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.18

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 31 of 165
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 32 of 167
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 33 of 168
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.2

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 34 of 169
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.2

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 35 of 171
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.2

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 36 of 173
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.21

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 37 of 174
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.21

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 38 of 175
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 39 of 176
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 40 of 178
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 41 of 179
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.23

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 42 of 181
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.23

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 43 of 182
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 44 of 183
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 45 of 184
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 46 of 185
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.25

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 47 of 187
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.25

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 48 of 188
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 49 of 189
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 50 of 191
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 51 of 192
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 52 of 193
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 53 of 195
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 54 of 196
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.28

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 55 of 197
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.28

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 56 of 199
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.28

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 57 of 200
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 58 of 201
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 59 of 203
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 60 of 204
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 61 of 206
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 62 of 208
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 63 of 210
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 64 of 212
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 65 of 214
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 66 of 216
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 67 of 218
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 68 of 220
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 69 of 222
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 70 of 224
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 71 of 225
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 72 of 227
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 73 of 228
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 74 of 229
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 75 of 231
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 76 of 232
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 77 of 233
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 78 of 235
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 79 of 236
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 80 of 238
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 81 of 239
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 82 of 241
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 83 of 242
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 84 of 243
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 85 of 245
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 86 of 246
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 87 of 248
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 88 of 250
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 89 of 252
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 90 of 254
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 91 of 255
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 92 of 256
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 93 of 257
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 94 of 257
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 95 of 257
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 96 of 257
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 97 of 258
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 98 of 259
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 99 of 260
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 100 of 260
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 101 of 261
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 102 of 262
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 103 of 263
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 104 of 264
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 105 of 266
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 106 of 267
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 107 of 269
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 108 of 271
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 109 of 272
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 110 of 272
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 111 of 274
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 112 of 276
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 113 of 278
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 114 of 280
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 115 of 281
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 116 of 283
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 117 of 284
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 118 of 285
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 119 of 286
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 120 of 287
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 121 of 289
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 122 of 291
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 123 of 293
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 124 of 295
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 125 of 296
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 126 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 127 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 128 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 129 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 130 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 131 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 132 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 133 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 134 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 135 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 136 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 137 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 138 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 139 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 140 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 141 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 142 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 143 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 144 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 145 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 146 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 147 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 148 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 149 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 150 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 151 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 152 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 153 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 154 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 155 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 156 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 157 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 158 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 159 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 160 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 161 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 162 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 163 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 164 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 165 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 166 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 167 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 168 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 169 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 170 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 171 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 172 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 173 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 174 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 175 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 176 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 177 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 178 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.6

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 179 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.6

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 180 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.6

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 181 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 182 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 183 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 184 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 185 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 186 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 187 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 188 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 189 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 190 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 191 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 192 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 193 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 194 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 195 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 196 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 197 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 198 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 199 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 200 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 201 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 202 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 203 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 204 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 205 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 206 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 207 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 208 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 209 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 210 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 211 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 212 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 213 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 214 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 215 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 216 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 217 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 218 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 219 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 220 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 221 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 222 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 223 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 224 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 225 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 226 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 227 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 228 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 229 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 230 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 231 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 232 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 233 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 234 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 235 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 236 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 237 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 238 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 239 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 240 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 241 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 242 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 243 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.82

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 244 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.82

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 245 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.82

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 246 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 247 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 248 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 249 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 250 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 251 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 252 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 253 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 254 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 255 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 256 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 257 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 258 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 259 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 260 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 261 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 262 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 263 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 264 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 265 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 266 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 267 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 268 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 269 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 270 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 271 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 272 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 273 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 274 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 275 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 276 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 277 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 278 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 279 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 280 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 281 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 282 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.95

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 283 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.95

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 284 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.95

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 285 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 286 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 287 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 288 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 289 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 290 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 291 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 292 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 293 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 294 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 295 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 296 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 297 of 298
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 1.0

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: r1
		Type: java.security.KeyPair
		Statement: r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <pro.tools.security.ToolDH: java.util.Map initKey()>
		SHA-256: 963e9793f9cd89e1230f9f7a429e480f5bca12ba0319ba1ff8cb91ebc8e6d474
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer38)
		Method: <pro.tools.security.ToolIDEA: byte[] encrypt(byte[],byte[])>
		SHA-256: c7a101bb5ab739537bfa6b97b93321e313d62e881cace19069891dbe96ad3790
		Secure: false
	Object:
		Variable: r3
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 21d28b95ea94362a88aed73412bdcc4232b60f9222c14e597d046aad77f35529
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer138)
		Method: <pro.tools.security.md.ToolMD2: byte[] encodeMD2(byte[])>
		SHA-256: b494110ac167e064d46c02ebf53475efdca7a75de28d18b2d70e6755a29576bf
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: abd5277172b317d3f4091518d592c93ba34da55225ea596315d76cde0bdbe838
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD5: byte[] encodeMD5(byte[])>
		SHA-256: 8b012ba4e05506fe9a3605d376a4944aa411805a1ae1301e90d072ade4f0da50
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] initHmacRipeMD160Key()>
		SHA-256: 75ce6ca0b884d7cfe42febb4f71615d79b7371f69f75394e9cfb694b5bd5cc54
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer140)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] initHmacRipeMD128Key()>
		SHA-256: 8448cd2ec454d83b2e63dbfd94449f3f531ca21c3e48c10783107853ef5a5837
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer146)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA256(byte[])>
		SHA-256: ebe8b3de5427b6bb0fc61261dd7c4473f267849c4efadbee8631c025b01a4996
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolECDSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 99a04f3ee59990d4c083ce8896bf59592d8d7a21eb70c78f84199113afd93bb2
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 98515d3bda5f7634a8205a3c935ab007ba8299ed5d0a1970fb8c47df97fec5ad
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD160(byte[])>
		SHA-256: 7f5b4108c828fc8f5f0c735ac7596b9ec9ac8318081545008410ac1fa3c6d2fa
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDH: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 76f32af439fcf01677290088106a0e55f971e726f5eb6157346806c0968cad29
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer105)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 861bbce3bf9e4268bd2280f53e0970d41bb00adf1b1f3a84becb2d5081b9658b
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: a96bea4f052891874066f33438f768bd2249d7b84ccd0e171a61c8cf46193247
		Secure: true
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer132)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: b5fa6fbd181c2b611e68a68d06907ab073ba87109dea4bd088713b61064ccbad
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolDES: byte[] initKey()>
		SHA-256: aa2648dc498d2ec8bf82e0418ac4545ece05791454eed9e07e9408befb0be6d5
		Secure: true
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolElGamal: byte[] getPrivateKey(java.util.Map)>
		SHA-256: de7608827249d849acdb91f6b8d03e6c6af45d010b1b7d1de928ede9aac6636
		Secure: true
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer202)
		Method: <pro.tools.security.ToolCertificate2: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)>
		SHA-256: 4eba203819afe9d39f0c9557fe1ac65166560ebcc07014d4f1912d65ef3eb652
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer19)
		Method: <pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>
		SHA-256: 80c228239cb8e4842777f812730844342a2844da4c6b338a3e65a4109c999e75
		Secure: false
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer134)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: c4350778a9b257ed782b75e20797bc3d3974f0644c733c1e3d563c45940aa61e
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolPBE: byte[] initSalt()>
		SHA-256: 11c0282ef9146aca0f4254cc48130cdf6a05c952df25e68709784048895cbbab
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer133)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacMD4Key()>
		SHA-256: 7ab52d9b9ac8c55cfca5cd6f866af60f659183dd264582b9315bc2d736e05039
		Secure: false
	Object:
		Variable: r42
		Type: java.security.SecureRandom
		Statement: specialinvoke r42.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolECDSA: java.util.Map initKey()>
		SHA-256: 4af19a0eb7ed29cc6512c8f0230c086ea2514b5fc06060715038547d8b376b1
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 8cfd92582139110770c8cb9a3a49ecbaa1b34cbaf39eeb6b27a213754a33777c
		Secure: false
	Object:
		Variable: r0
		Type: java.security.KeyPairGenerator
		Statement: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer87)
		Method: <pro.tools.security.ToolDH: java.util.Map initKey()>
		SHA-256: e264491a454f652b68535028952ee9973330eec6066b1339cbfa3f4b440c3d9d
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer37)
		Method: <pro.tools.security.ToolIDEA: byte[] decrypt(byte[],byte[])>
		SHA-256: 1379ee0324e75ef614579fef2c8b191eb2e9116444d4048f3d398709da111b1a
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolElGamal: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: da1060d0f73544550b1e6f12536eb1d522e65cd34a3a46ca71ca0353d2c03657
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: ca34f6f0b266025aefbced027e267430d28c91ed46733e017d028ac76a2109bc
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPublicKey(byte[],byte[])>
		SHA-256: 52b6d04483dcd966e5d73e2669e294bf50685433e279b4f20e93b82ab0ed8ec1
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: f80d6174aff8d2b71a56aa997609e89315c734509c0fc6716a6d828e068144c5
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 7efa53048df17ec290662b5e1dcd1d6171bf0acac8ff4f6e353a1f64ab880c74
		Secure: false
	Object:
		Variable: r0
		Type: java.security.KeyPairGenerator
		Statement: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer64)
		Method: <pro.tools.security.ToolRSA: java.util.Map initKey()>
		SHA-256: 46a7e5a7b832535be7e92a7741d002ad4f2be03555853977a135eaaf73b7304b
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKeyFactory
		Statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer68)
		Method: <pro.tools.security.ToolDESede: java.security.Key toKey(byte[])>
		SHA-256: bc2248bc9c6fa9641339eeed4ee5356a826a28163152125950e85393b2ab70e0
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer40)
		Method: <pro.tools.security.ToolIDEA: byte[] initKey()>
		SHA-256: a3a29348a84175a8b4a4d749c66ec079b83c259648000614cd67d09550a7b9ac
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA512Key()>
		SHA-256: 4926936910879a0ed69d707595ef3dc982ae2a8c6841b07b00e94754e723ff2a
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeGOST3411(byte[])>
		SHA-256: 129ba1c5a29f10a180ff9bedcd782cb3f989c51542282fabcf1193bad7a358a1
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD4: byte[] encodeMD4(byte[])>
		SHA-256: bef0b21ba6e81611e42b2e136f240b9ad13a429f52ced922e9a02f44c93d3832
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer152)
		Method: <pro.tools.security.ToolHTTPS2: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)>
		SHA-256: dec3ffb6e48d04c1c833fc681445848bc6895d2c19e9b846e8c66a22ac574dbe
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r1, s1, s0)
		Method: <pro.tools.security.ToolPbkdf2: byte[] getEncryptedPassword(java.lang.String,byte[])>
		SHA-256: ca2def7222cf1f826795695cc40ef995369e69249745ad41bbbc6f64fd58664b
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPrivateKey(byte[],byte[])>
		SHA-256: a5cf501b580a58ea2add800e626a383a09b09deee973782e809684d29cead60a
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer104)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 81160d28ea6e7192a10b90546611796e7fde5d5e8df3263a0b6d9ded0b9482b6
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolElGamal: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 3959bacdf3889a5843512f0cfae3f840838e7e49c5f4e12658f4ca0e1e44b56f
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: $z0 = virtualinvoke r6.<java.security.Signature: boolean verify(byte[])>(r2)
		Method: <pro.tools.security.ToolECDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: c11f9ba90dda526364c99db1def762dccb2be85ddd965d96b539a933d9a1a54e
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer96)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: d941574b3a41c445f713906007bac1bee33f98d106b485acdd3cd3f1eb1c3bdf
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolElGamal: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 3643979159b020d89827f39a703e4b183d2a9ca5ca78f9cdd1bb0d83c29a72b3
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>
		SHA-256: d19212edff937e17aea6daa8521b47446a46187d22716f4923dc9a26504c6253
		Secure: false
	Object:
		Variable: varReplacer114
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer114)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: e1641919946eac45cb917358b61f332a09f365e5e94532b320d06444bea27b15
		Secure: false
	Object:
		Variable: r4
		Type: java.security.Signature
		Statement: r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: 2161b0bead8fde4fecf6d3fb70052505f21781d04108a3df0abcbbcc03a7baf7
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolIDEA: byte[] decrypt(byte[],byte[])>
		SHA-256: 1ac6b929f829934aa08404e5519e7be5e90cad203cf05ee89ccc6a7e747ebc16
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD4: byte[] encodeMD4(byte[])>
		SHA-256: 94b7c11bb7f105a1fe0a6f6ff8515665ee4b0e3bafd3a3fb5ca9251a73ed3011
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: ca9cbf0ae7e700fa4415017df38dcfef1aafc4cc4688b887e452c8f92e3059a7
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: e8f128750433c2cd88d0d731091c12c6d43e3ea3a8add8b9f294d19c5774a819
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: 9775787ce7acc61b48d06712dfcaeee4cea0fe38deda96c7909d6e9e61da2da3
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: d63e2141736ac89c0439e4e044ba2d31809b7875fb8a04e4c60ecdd22e839be3
		Secure: true
	Object:
		Variable: varReplacer108
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer108)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: 70729618d7f47aa1a740b697b9d57faf9ebe165016fbec0dcb5002cc51d1c251
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacMD4Key()>
		SHA-256: 8e273b49f4a06f79043a8e1ce49c0889f2b1648db49ebcb8750d151f2d6adbd9
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD320(byte[])>
		SHA-256: 7ebb88618c84831b58c6e45b1623d376d94db0114a4aa1c4a703edc03964853e
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeWhirlpool(byte[])>
		SHA-256: da89f9589f87086decb1c5087a2eeea5f9930c30c0a11d22a7a2cdd4ba06bbfc
		Secure: false
	Object:
		Variable: varReplacer136
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer136)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: 8a371ce0f755352464feb06d95e47005df0b0c4d20d133efa56df864b2f368
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer118)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD128(byte[])>
		SHA-256: 25a232628affc66694f273073f2bc61c03a07d804f9c80e18210c22078f65276
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)
		Method: <pro.tools.security.ToolDES: java.security.Key toKey(byte[])>
		SHA-256: 5fe2343b49e79840a80fc5de70ae874ef5acf29c2edbe2622287da10dc76a895
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: ce6742f31a0e025b9bb217b5f79bb0dd74691a55c6875ccebd85bd5225195c70
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer76)
		Method: <pro.tools.security.ToolAES: java.security.Key toKey(byte[])>
		SHA-256: e5959ed1893d419e337c6b0aba5c890186a2e1d24107ed2534f6abe6aa36cdf5
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDES: byte[] encrypt(byte[],byte[])>
		SHA-256: 6ea63cdd85b8d0d4224666bdbfaa65ba4030724f7d36c8c04b593214e26b8f34
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer113)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA512Key()>
		SHA-256: 1b3dd1de9a9ae21acd94826d29a7679eb650f1f899910816bb6e66d0e3d1c6b5
		Secure: true
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer127)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeTiger(byte[])>
		SHA-256: 83a43d3870f0d8b2e7c5fab8e82d66098060f2c45fa83cc6135932014974d21d
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: 6c91f43c868315fedb253399139f910403b5b38b7dcdf25e25827e002e72c8f0
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>
		SHA-256: db4d76b046f0a52b69a0fcb5b53e8f6dd4709db5e0d25c5b95396885004474b2
		Secure: false
	Object:
		Variable: r14
		Type: java.security.SecureRandom
		Statement: specialinvoke r14.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolElGamal: java.util.Map initKey()>
		SHA-256: d5f09bc323676aaf1050d32d911b6eea02d8ee5a48416b38efdbfb215ff230f9
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacMD2Key()>
		SHA-256: c16d2985ad85b12d2f0b9a32a9651cdeac6e8dc3f571b5b109354534fb1154ef
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD2: byte[] encodeMD2(byte[])>
		SHA-256: d4848036eacb977b8affc31e79587d7f6c3f580fc30ced73e3a9bbb88d8fc462
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: a2824411cfcd0b92d50162a252612457708767d8af60755bcb837390ec4bc179
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: d07f947db9ed84985b69b88aad250f7b5de11030b4b6b02fadff02e592ad2d78
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer148)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA512(byte[])>
		SHA-256: b14a4707b347c7c2c736d675fb353523c943f670f956c94e78d272d3b5ef257e
		Secure: true
	Object:
		Variable: varReplacer112
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer112)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: 242a8dc7f5b3076a81dcdb28f9ec3c1a38c35e21b3d8973042cf397a1abd295c
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolRSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 57fb99e39fd8fad3cb82c29d03beb3edf109c867060628516bfc078bdf1cd5d1
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeGOST3411(byte[])>
		SHA-256: 2692c976bcadd78a9ac75c976d6b5c5ddbe7cec71e9f4cc3b8ac6f9cc12e0376
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPair
		Statement: r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <pro.tools.security.ToolRSA: java.util.Map initKey()>
		SHA-256: 25e609192a0133025bd3572c6709e081eefb9efad572c382e74e9070b8106e87
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDES: byte[] decrypt(byte[],byte[])>
		SHA-256: e609dbea98a40ecedc52fa356836052cfee2dba06b413eec6d76a9a5c3ff539d
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer70)
		Method: <pro.tools.security.ToolDESede: byte[] decrypt(byte[],byte[])>
		SHA-256: 5149c0787fcddb3e5d2d94eca87c62d2bb635dc74991be32917a6f3ef252abb3
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKeyFactory
		Statement: r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer190)
		Method: <pro.tools.security.ToolPBE2: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)>
		SHA-256: 34285317cb390ccb4da06fc09583320e3aa2d05442cd01f531d22d4b6e0f7cc7
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDH: byte[] getPrivateKey(java.util.Map)>
		SHA-256: bbe511730bb625b9fa978f6bb5c8ce429dbb5d7a4a532aba22fbeab8e1be3d28
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: 300a1057503ec7824c8c64cfe6503d8b14e33e4efa06258a037480a4476ed3c
		Secure: true
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer125)
		Method: <pro.tools.security.md.ToolSHA1: byte[] encodeSHA(byte[])>
		SHA-256: 94d305d46ecd442c5ae9ad27043377a72f5a078ea4ed9ccf447f3c3a133a8789
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolAES: byte[] decrypt(byte[],byte[])>
		SHA-256: ebf63578201c753f7b33c14dd1624d7c6249b8b18ec66fae28ceb85b1a76d685
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r6.<java.security.Signature: boolean verify(byte[])>(r2)
		Method: <pro.tools.security.ToolDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: 7459fa263b3cf8f5837afa737014d1e11d28b8de06b66457b9773c00304249c5
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolElGamal: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: d4b1d7614468052709820ac91caaf7e8d1753b1ec3ae9cf3229ad871e97f624d
		Secure: false
	Object:
		Variable: varReplacer35
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer35)
		Method: <pro.tools.security.ToolIDEA: java.security.Key toKey(byte[])>
		SHA-256: bd006d204c7b2236370ff5fdae66649c4c246fdfc3b1bc5928c17b70cf5a1388
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer110)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: b95a34a0f7fd46fa1215442069b7be2ea9f7760c202c0d3e31aeb2677c33a5c2
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer119)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD160(byte[])>
		SHA-256: f8274e89fac0c65cc4b0983a3b743aeccb41c88c2ced0ec582db6baf45b4be21
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: $z0 = virtualinvoke r6.<java.security.Signature: boolean verify(byte[])>(r2)
		Method: <pro.tools.security.ToolDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: 35514c6414fe79246c14dc05877cc435fa59c3cfb4f4855004d293f5b28bee13
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolIDEA: byte[] encrypt(byte[],byte[])>
		SHA-256: 406c778ee16d4adbccdc1d954ae980a7404d97d4ee5a99f5e2dc9dd5181a6ed4
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer128)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeWhirlpool(byte[])>
		SHA-256: 6e8f7a956af0542f8c572bafa985d99a777a26cd9a2e3584e7cb97f21ad817b
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeWhirlpool(byte[])>
		SHA-256: 2cdc1610f9d9e83b82c4c8666ba594421874523f2badec44849cb56255cd79e3
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.ToolDES: byte[] initKey()>
		SHA-256: 6db7bff9b13df24ca4384036fd26766f521bed04ca2f5a1ce2a07027d427f7dd
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD160(byte[])>
		SHA-256: 450af8ee4a835c44cee721d7c2d47f195319e2c2e8704db38351eaa2412bb6fc
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: 2e9a1f5efa288441c48c7a9905e0d78884eee60de9a1761aa17a7345b9016517
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer17)
		Method: <pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>
		SHA-256: eefdc85da0cca73d95225ae7cd76951ad544cab82b6d60a7836fe8cb69906a24
		Secure: false
	Object:
		Variable: r0
		Type: java.security.KeyPairGenerator
		Statement: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer29)
		Method: <pro.tools.security.ToolDSA: java.util.Map initKey()>
		SHA-256: 3afe285087e5cc3288080de91df7ddc88625a93944a2d73af2aafaa0a6fa60f7
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer114)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: f6208b7dfbdea6bca28c6ea053b916979d1b5b1db572e960399728d820b8864e
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolIDEA: byte[] encrypt(byte[],byte[])>
		SHA-256: 71f647e9df8f7780caaa1da2c57c4c56e1faa8d6ff33f357ec198d899028f7ca
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer112)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: 9f54a3070fe853379bc7097307542bc2207c52e749550210e1f596b5d58440a5
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA512(byte[])>
		SHA-256: 11b7a871e5c68fbd36f467b95a74bde375b678d7dd23436c6fc5e63206be4c3
		Secure: true
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer136)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacSHA224(byte[],byte[])>
		SHA-256: 7444aebba42b2d40491419491b4c3e56c7abfe308389dda129658561cee6d2b4
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r0.<java.security.SecureRandom: byte[] generateSeed(int)>(varReplacer14)
		Method: <pro.tools.security.ToolPBE: byte[] initSalt()>
		SHA-256: f6a2e60a0debe7b72b93f56981307f5d3c02c7b5beb20a3310d6936624083eff
		Secure: true
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <pro.tools.security.ToolCertificate2: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: ed605dce4cfcaef89b334be0004af1f8721c88ea29e609f6a04e0264f00a7cb1
		Secure: true
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolElGamal: byte[] getPublicKey(java.util.Map)>
		SHA-256: c745e09a6978ffbb634e1a8a56a9f796aef736c213fe964961029eb63b90741b
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer191, varReplacer192)
		Method: <pro.tools.security.ToolPBE2: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)>
		SHA-256: 6ade49727f791854ebf850dab8a765059dd7a85e8013f7f23d65c8b0ee72d0e4
		Secure: false
	Object:
		Variable: r6
		Type: java.security.Signature
		Statement: r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolCertificate2: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: de568c6f5e33726d3598c16f360faaf3bb19453bf0add8469771e0171913b9e
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)
		Method: <pro.tools.security.ToolDESede: java.security.Key toKey(byte[])>
		SHA-256: bf89f2317f4b6c192a81fb7de4b30b5eda1794ab10e6c66420010fa6def09280
		Secure: false
	Object:
		Variable: $r12
		Type: javax.net.ssl.TrustManager[]
		Statement: $r12 = virtualinvoke r5.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 7d885468d12525810ce5648d4fc74e0f7dccabe42fd2c531cda2220a3fa7ac99
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD2: byte[] encodeMD2(byte[])>
		SHA-256: a0e9f1a865415fdec83a17d6ab51ca6d7b38436a92bfef9ea7d4d120b5fa77aa
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 554772d790964837c45f9ba20dc3441fc10771cf467e6950888030ccb578e828
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer135)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacSHA224Key()>
		SHA-256: 8d4dabe7eeaaa8d548eebc5afc6579bb040acdfc63c9c30878ddfa63a1d24c9d
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolAES: byte[] encrypt(byte[],byte[])>
		SHA-256: d5c5a5607aba44b356cbdf066368dab4cd0685fd280f18beecd0df6e3196c6a3
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.ToolAES: byte[] initKey()>
		SHA-256: beb8c6c6a09afd3396ea503817a030cc994dc6e06691ac1ca0bc133dfe9f908f
		Secure: true
	Object:
		Variable: s0
		Type: short
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r1, s1, s0)
		Method: <pro.tools.security.ToolPbkdf2: byte[] getEncryptedPassword(java.lang.String,byte[])>
		SHA-256: 8c8a0cd8cd273b36b3d4fa5ba5bfc9d34105d0f752f0fa4f503ade83af7ffecb
		Secure: false
	Object:
		Variable: r6
		Type: java.security.KeyPair
		Statement: r6 = virtualinvoke r5.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>()
		Method: <pro.tools.security.ToolDH: java.util.Map initKey(byte[])>
		SHA-256: ab274115a27b3b4117be2d39521a251f1eab3f5411f0ef3f14a6d813eae97949
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer73)
		Method: <pro.tools.security.ToolDESede: byte[] initKey()>
		SHA-256: 70f76426a7b83b2189d3a2607015e25cfb8802a7e6c0bd6e8ecb0e932fd89f11
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: 3fff701852de6944fa5a42cc75f501d822a54ccd7f2da13505eb7ad66fffe9dd
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolAES: byte[] encrypt(byte[],byte[])>
		SHA-256: 125aa9b2736cf0f76e20a5b41306bc36e0c529b7fd803104617104697a44d1d5
		Secure: false
	Object:
		Variable: varReplacer141
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer141)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: b31dd4c043430d8d07b3af55ca98e844146545cb7a72020d3aa6798fbe88d58e
		Secure: false
	Object:
		Variable: varReplacer105
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer105)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 4e4744d69438704119ea2cece80eb61b029fccc72d6f320a335a29ed75a15b24
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 343b6358b677ae5d500493b2efcad1ad13742eb722cd423807e27c33e8ee2f20
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 3563a99ec0ae0e5faf7912cf5746fcbe527d5b706e380a9276cc0489d92ed507
		Secure: false
	Object:
		Variable: r5
		Type: java.security.Signature
		Statement: r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer172)
		Method: <pro.tools.security.ToolECDSA: byte[] sign(byte[],byte[])>
		SHA-256: 82b9bc7d001d131a059427ee0c85062a1512f8cc30723111eaf70a8f54def04b
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <pro.tools.security.ToolCertificate2: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: bcd57178bee910ef1481df1627718219cfbb7e65d7d0b9c7b27b0cfcfa6211d0
		Secure: true
	Object:
		Variable: r4
		Type: java.security.Signature
		Statement: r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.ToolCertificate2: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: 180431acb223b6f07aa4006076e24647debb01e3fb17222ee1008f99667cd9e3
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: 2f40c0f523fffa52f860c73f3d3511c9313cce55f11259d5b0e685413f091f3d
		Secure: true
	Object:
		Variable: r5
		Type: java.security.Signature
		Statement: r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer23)
		Method: <pro.tools.security.ToolDSA: byte[] sign(byte[],byte[])>
		SHA-256: 3d5906d51578e3b46c0087c39ad7ccb44cb7f01de7002074989e75bcb9de4ada
		Secure: false
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer143)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: 775a8c391c9943d00e960e7fabd6facf8d1c5195d2761ae52d6e78ec0caf6e96
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: a0f842105a1ad3f79c296fdd8fed55f2eb9269b5080596c2fa97a39d0c0ad91d
		Secure: true
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer145)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA224(byte[])>
		SHA-256: 412c0d3fc596355dbaead8c91fbe72ed41c11a7731d41f69070960f55303774f
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA256(byte[])>
		SHA-256: f884f71029fd03a9c75d21fdeb0fa86f22d7b58bef4a1c4860aa09f220d2e1a7
		Secure: true
	Object:
		Variable: r6
		Type: java.security.Signature
		Statement: r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer26)
		Method: <pro.tools.security.ToolDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: 6e547f059672c538c76393d8d40de16cfb00814e99f5aa4ab53b54c620a31fbc
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: 50ff38d624a40eb8e154e835a960e671d0bb01334e4252ffb0b83de0225ef332
		Secure: true
	Object:
		Variable: $r13
		Type: java.security.SecureRandom
		Statement: specialinvoke $r13.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 5041b3a42abf4f538943c3bfebf9378db1d36a9282884b15ae222173d2b2b95e
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDESede: byte[] decrypt(byte[],byte[])>
		SHA-256: 767bc218c1c2641755a76bb9f4e35adc273d6ae5cfac99af7ea9e6fb5e10269c
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA512(byte[])>
		SHA-256: 32c9aa6e024d622ab1097e7cd3eef64069abbb96649ec8bec5001abc36318797
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDES: byte[] decrypt(byte[],byte[])>
		SHA-256: 6b0a934124c1d6233d6168c944a856539f68b41def10b606d5ddd9eccea5f3da
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 69e5d2e3bc9a8282ebe0d6ef2824b7c7c6d2fe3e4dae9794a3dec80edecc3275
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD128(byte[])>
		SHA-256: 41d569ce12fa5edf55b7fe62eb65033965d4f9870778548fbc02aa2433437454
		Secure: false
	Object:
		Variable: varReplacer143
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer143)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD160(byte[],byte[])>
		SHA-256: cb77c4d3c99a3107cee013f824da60fa8c9d9a8c03830bf5ec8e04fd1c9dbe83
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <pro.tools.security.ToolCertificate: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: 13a0af5c5ad32a3597ca25868f626b5bd55497b8499410689efd2a5f86491f10
		Secure: true
	Object:
		Variable: r10
		Type: java.security.KeyPairGenerator
		Statement: r10 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer160)
		Method: <pro.tools.security.ToolECDSA: java.util.Map initKey()>
		SHA-256: 124c5a95e0fd276caeb05f278b2d371a7cb819851da835efdb9125849bf3e2cc
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA1: byte[] encodeSHA(byte[])>
		SHA-256: 65319d9a2c0f0b86da546f80def18ceef1ea8f0a2a397e2184e8df90d5b1940d
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKeyFactory
		Statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer176)
		Method: <pro.tools.security.ToolDES: java.security.Key toKey(byte[])>
		SHA-256: c6be50dc4c37eb598683c06c0aa78a4c83e4e4afb009d20113c5e97b24597dbf
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer178)
		Method: <pro.tools.security.ToolDES: byte[] decrypt(byte[],byte[])>
		SHA-256: 602ac7b37b2fb84cb3683918e3254a09bc7f514f447a099bbc594039b59e7dd6
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: 537641ad7923b4ede668d0c2dc7110d1533089ec0e3d66ae5d2228bc522962b9
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacMD5(byte[],byte[])>
		SHA-256: 760307a2289b8736c45db358d2d9a496840944bbd256b7c67ef6d2788464b97b
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer93)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 38b861a94f05764f8fba529654c855474dd5e65aeb66fb84a3d1374637086d57
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA384(byte[])>
		SHA-256: 2f04fbe96f4697930588e894972a6bd7ef7ec46bff0bcfb526c3e792c5aa7dee
		Secure: true
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 33ece7e103f5d8a0a2d98a85e5a97168016fa3cb7ce658eda419ee7d7c15a613
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD256(byte[])>
		SHA-256: d90bf3c0994433f0aa782160dc4e0fa4c7bff4a3fa1b30be2327d46997a9d533
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.Key
		Statement: $r5 = virtualinvoke r3.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r1, $r4)
		Method: <pro.tools.security.ToolCertificate2: java.security.PrivateKey getPrivateKeyByKeyStore(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 31d55e57cbe6b33c7fe3e77f0696b1c07a6d5772b80954a77e8d728df17c39e0
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: bd813f0b0c662c4fc4db9db227bba24db72f74f231645197387f00f7f9cab8c
		Secure: true
	Object:
		Variable: varReplacer93
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer93)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 62c0937d8ec258970e7c461f98ea802059f147ef5ec4095952667ffba996ca74
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer80)
		Method: <pro.tools.security.ToolAES: byte[] encrypt(byte[],byte[])>
		SHA-256: ab8f091cee097b8652d454de6d483d360c97dcd24b7818f6535cdaccf08baba
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: 7682cade83742a6a759dcc4ce60e8ac952c318e53660e1e273e1cf580aada66
		Secure: true
	Object:
		Variable: r4
		Type: java.security.KeyPair
		Statement: r4 = virtualinvoke r3.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>()
		Method: <pro.tools.security.ToolElGamal: java.util.Map initKey()>
		SHA-256: 890da456028f682748c87ff3c2de5cdb51502bfca0c63ae661b13a5df82b7cb0
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDESede: byte[] decrypt(byte[],byte[])>
		SHA-256: 3851a8dd72b9242ae6a0749ae77bf260f03646588c35b5b840472678bee5d333
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 3edbb9ef91272c5fee265d39309fd4adda45a5b222a88690e9f607b992112def
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: e95048bd1f46417d1e885045dec19b3fc10aecc72922518b033c4226dbcb3c09
		Secure: false
	Object:
		Variable: varReplacer96
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer96)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: 3baacfbe70d0f3a05ec0859d8ac202bf46168ab6f902bb8c34c66cf9322b396f
		Secure: false
	Object:
		Variable: varReplacer132
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer132)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: 76a6ffff5262d72e0367ea3d766c20f4677fceb5e06c1bacb25008137ea609c9
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer109)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA256Key()>
		SHA-256: d57b1c8ee48cb69c35d2bed0e5365249c6322c59448227828efec94df4bf8982
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: ba1c3edef2538c41a69f2b379d37ad61f787919a45f60ab00a7cd9a1f5c99a3e
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r0.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <pro.tools.security.ToolPbkdf2: byte[] generateSalt()>
		SHA-256: 8e0e9045820d25f5cbc456f297bc9189596e035629630dcc769a79e620fc0fb1
		Secure: true
	Object:
		Variable: varReplacer192
		Type: int
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer191, varReplacer192)
		Method: <pro.tools.security.ToolPBE2: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)>
		SHA-256: a35de26b1dde11cbde7015e74ca071a25dda739c498d267c2be4b7f4e608b6c6
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer116)
		Method: <pro.tools.security.md.ToolMD4: byte[] encodeMD4(byte[])>
		SHA-256: cbb0d2242f37a637ce587ad4b92435b888633857f2ac070e02045ea6b05f12e0
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer72)
		Method: <pro.tools.security.ToolDESede: byte[] encrypt(byte[],byte[])>
		SHA-256: e7a3e039cd41a9eccb2f9782a534fa910c9156fff4ba45b283e342425766cac7
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer106)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHAKey()>
		SHA-256: 52a793e8ed7b60e27a2dc5e9ebcbf499e5ed21866835deb25e17b240d5ff5d7c
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeTiger(byte[])>
		SHA-256: 7166f9e91de31b25655223175cef5c30810112832e2d3ea97987c056d0022ad8
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: b48599a9b20ee484c8270030829db002322d917028ac3b676406806f3faa4c94
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: 49bc88acaf68aa7ecd2688dd19f3ee16c5b742cf13b0a87c038af93cf7100414
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: 235ef292541fff4e8dc8a34fa802ffa28b4ae4edc4a5986f04444727ad37a5f2
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <pro.tools.security.ToolCertificate: boolean verify(byte[],byte[],java.lang.String)>
		SHA-256: 1652ecdd479f2f907e4d713c58f69945fe4f2cae044cb8c56035524dc3b9a9a7
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r2)
		Method: <pro.tools.security.ToolPBE2: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)>
		SHA-256: 43db9bfeb074003db67eeabb50ce56cf85bde3bf94a15f69ac2ca9cf59ce5dd1
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<java.security.Signature: byte[] sign()>()
		Method: <pro.tools.security.ToolECDSA: byte[] sign(byte[],byte[])>
		SHA-256: 9cdd1e0bd02f1ee238410e32feb8a63abe81983c68166eb1f4e3fad170a0770c
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKeyFactory
		Statement: r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(r2)
		Method: <pro.tools.security.ToolPbkdf2: byte[] getEncryptedPassword(java.lang.String,byte[])>
		SHA-256: 191a635bfa78788ab4f822d30fa09325f8862f995137d72e93b1c92323136d1
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>
		SHA-256: 6d8bf87b3a6e17c9fe186f638d491d7eac44d8c1993a2b78ebacac0b73e73d25
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer120)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD256(byte[])>
		SHA-256: a27db0281a12264d76be8535c71758de8a36740ff3293e380c0f7cdd5b976779
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolElGamal: byte[] getPublicKey(java.util.Map)>
		SHA-256: af2b5ec96f523007690f000e433447bb499a927e515f849b6d10074e1976f48e
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: aa581f0db30b9bb62e6553db8bc27a79ee61196cf93aa44f50d24b45715cea70
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: 160f0ea8a3f5c6735064c280632e5df2f59ca1fc02e5ca68843c973f8aa1855b
		Secure: true
	Object:
		Variable: r5
		Type: java.security.KeyPairGenerator
		Statement: r5 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>($r12)
		Method: <pro.tools.security.ToolDH: java.util.Map initKey(byte[])>
		SHA-256: c24ad7562e67e25e4029391df9edd5db1e8c8b49f7b7e9dba84219e899289d61
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacMD5Key()>
		SHA-256: 75269175e572d818d6f2070bd282e8a8fe85520471d06586e3d011ab2e6b7455
		Secure: false
	Object:
		Variable: varReplacer76
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer76)
		Method: <pro.tools.security.ToolAES: java.security.Key toKey(byte[])>
		SHA-256: 29e2f3753dedfc1f82b1312054f2f5e8c1847dccb2732b94211c5977084c794
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHAKey()>
		SHA-256: 6c038457a7263cbdf0ddac0c56f3f754e9db0ebf402a5a18b0be623a1a0b0edc
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolElGamal: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 9d8e78b70e11436721d65886ed7b89796719a16f7c23574d66e66d0d67c273a2
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: 3c62a04f9031a349d2ca30dcf909587d93a0efd1077ab6b38ece507467e6aecb
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: 302b78062e6754636a569aa833f25f5bdaa3be780263186a766671a2f5ae794a
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer111)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA384Key()>
		SHA-256: ebcb8c9d6193618cf97c951afdaef2f6a6da3ef424b9520cea423c9ed650dd8d
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 87f0c11dd10b962910622fd187c51490c2b58bd11bcf7c36631cf1100243ec6a
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDESede: byte[] encrypt(byte[],byte[])>
		SHA-256: 65225c06afa170b86be257b98e6f3cae2cdd4b1bf8899367de8c39ba0f028cad
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA224(byte[])>
		SHA-256: a078b987b654fc32d8f25eb6263e4f9932f1ffdd65d54d244d12fe402aa42597
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolRSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 18f4d4e3b5422b7d38de5c5a7417f1299662c643e614f652beea2c2d02790872
		Secure: true
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 236a06cc974f26a1127b850943b0693d2cecb0a8bbae0a0cff231e899643169
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolAES: byte[] decrypt(byte[],byte[])>
		SHA-256: 60205d17b135ac3e212afdaefceeb9c0bcd482360d86274e6849d093dba9e298
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: b33afeaef7bfdbb1c9b04bf98eb782a67595031fa720f782daa0c98b9332954a
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r6.<java.security.Signature: boolean verify(byte[])>(r2)
		Method: <pro.tools.security.ToolECDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: 1659d664a4db7f95348fe506707e3a8099086d0184d588369fd98bd6ea19672c
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: 8b2907df4f60b39e80a556eb3691f8435c65a20957d1ecc30e11937d31498ff6
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA224(byte[])>
		SHA-256: 9b5c2d815698f69424b44bbe47fb2673dbea44896e76ea969be8a0292f997f23
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 54de5498184583272b3c11b26077a026729a8a3982b55030a6c67e22d7a15d88
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPublicKey(byte[],byte[])>
		SHA-256: aa066848a894a9c45033a6482921d5d59c73eed68dc5e18fcc8ff205181cc274
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer180)
		Method: <pro.tools.security.ToolDES: byte[] encrypt(byte[],byte[])>
		SHA-256: 7c1aa270e6ce10cccb6f9356865bd265b406bcd06b85fdb231ce055d3aaee14a
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeTiger(byte[])>
		SHA-256: 9d9419b7634184ed5d217a9abc620f2a83cb86b8b7ae973f0d012c4258c484da
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDH: byte[] decrypt(byte[],byte[])>
		SHA-256: bfc8c9715824cd91013e37376856c762c5b6fbb15973f483776da9dbd98df3f2
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA384Key()>
		SHA-256: 61c4582c81333800a969e8d3dcdaadaac56c890c9dff830bbc63f5fb3cbe8290
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA256(byte[])>
		SHA-256: cd7b4fde320c0fa1ce3fa91b7c5245dcfdd9acfa25b0e795b0891612c46f5689
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer107)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: 160ed63274aa0453a14a9a7c0f930d1b7bd47845dbacd9649ab2f754a4446006
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer129)
		Method: <pro.tools.security.md.ToolMD: byte[] encodeGOST3411(byte[])>
		SHA-256: 6e2ad16302a1be0387abd898594d677477a988ea2934882d80397fc823ff58e6
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacSHA256Key()>
		SHA-256: c912690a12bd3e743f0961bd4129108107f691aee4ecd55e8216dda70e097614
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.Key
		Statement: $r5 = virtualinvoke r3.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r1, $r4)
		Method: <pro.tools.security.ToolCertificate: java.security.PrivateKey getPrivateKeyByKeyStore(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 92269ee32a02b1e22dd331772a35252a80c01aa96c0ba27423fe94d017b2b6b4
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer81)
		Method: <pro.tools.security.ToolAES: byte[] initKey()>
		SHA-256: 72903e9a4a1267a19f3a396de7a2eb5699998869635b22defe7041aa239d22
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: 2ce47542bfcaefc2493d2ddff94cadaa07dcaef58595478b7db12a2cf4ba923f
		Secure: true
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolHTTPS: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)>
		SHA-256: deca2f2fd47f75a658c9295c51125d6879b4610c9eee2d180634a2c01f08c91f
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolECDSA: byte[] getPublicKey(java.util.Map)>
		SHA-256: 7cbab63d6dcc541616e16309f39ec6a3117985e750b75b6275c81720f27c0e60
		Secure: true
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolElGamal: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: a224e3463b72ecdc8fc531a2fd279d56b7090f827bbd10f17ef8809af78d3ea1
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolElGamal: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: db25f3d2a0b81321d1d3ed8254ea12b9421978a2bab96c05d16eb573f1105fca
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 6367c0d9a3f161809f5527a2bcdaa954051c95a49d624e75e4e818f84262e5d3
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDH: byte[] getPublicKey(java.util.Map)>
		SHA-256: ce14afb5eff25b18871606994f08d93741febe0c5e11a45291b7caea2b2d16bf
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer131)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacMD2Key()>
		SHA-256: 5c7a16c362505ba2d6ff5cf82505741b028bd42da986fe32ee7d91f194d36233
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r6.<java.security.Signature: byte[] sign()>()
		Method: <pro.tools.security.ToolCertificate2: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: e6f41c9f6e6221455b5be388e2f0293f78923f635b9a87aa71a1bda4ece2fe0c
		Secure: false
	Object:
		Variable: r6
		Type: java.security.Signature
		Statement: r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer174)
		Method: <pro.tools.security.ToolECDSA: boolean verify(byte[],byte[],byte[])>
		SHA-256: c2052c54ef88d93ee45b658716d05873e6512144ff359945a11323cc64af86e2
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD2(byte[],byte[])>
		SHA-256: 9e56c841779ef69877dda77e46d1945b3a9f75ca6e3c08cfb2f644a5558278db
		Secure: true
	Object:
		Variable: $r11
		Type: javax.net.ssl.KeyManager[]
		Statement: $r11 = virtualinvoke r3.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 21d0104ac72eca02b8bf6a947fab6c7e3d7466a9dc607cd9c88ca1225ba37f5f
		Secure: false
	Object:
		Variable: r7
		Type: javax.net.ssl.SSLContext
		Statement: r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer150)
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 2a5016b9881583e5a73d1e257c9a2e080c0c81aaec0bce16e96f6df4e02f4884
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.ToolDESede: byte[] initKey()>
		SHA-256: c8b93aaad05c3a14bd7aad689bca06ce82b3eaebbf3c46ac8cf02e782bb6599d
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer77)
		Method: <pro.tools.security.ToolAES: byte[] decrypt(byte[],byte[])>
		SHA-256: 87c5bf6534f0b9df02cf7bae90f81ec53f5612cd3a6eb9438c18e64c74391912
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16)
		Method: <pro.tools.security.ToolPBE: byte[] encrypt(byte[],java.lang.String,byte[])>
		SHA-256: 3699909a08b8eb1cc89fe3ae4e95113d76d3bb304306a4eafb252f315a9f39fd
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: 31d004a5006f3130dcec8af11cf3688bec782f82f24057585d1cf883365c7b62
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: 2fa2c37dca6e7cec8b1b6d1d847798136993bdf43c2de412de272b41e7466e0c
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD320(byte[])>
		SHA-256: 15e9165c26a6b0f1d7c712396c8276242e74398cc4ca228b9c03eb0dc13adf18
		Secure: false
	Object:
		Variable: r0
		Type: java.security.SecureRandom
		Statement: r0 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer193)
		Method: <pro.tools.security.ToolPBE2: java.lang.String generateSalt()>
		SHA-256: d52511a5f2fc1257aa0b873dc84accdd34e87e6f2e8d71c87773aa1fd0f02b46
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: 3be7d83a16b6f3502978683859586b63bb287e60e53d09f49e9cb21828f0213d
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: 8c6f6c2e48bbb91e1114da5634062545a9dc2856a4b42f4525d9a5c0e92bd4cb
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] initHmacRipeMD128Key()>
		SHA-256: 47260a605150210b901b4a633a6a885a72ccaa480948bdfbc06aeb842a9cf7aa
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r0.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <pro.tools.security.ToolPBE2: java.lang.String generateSalt()>
		SHA-256: c6985d9416b002078152237e7916d15396c272f811bf8edaef9b82d4e2d39a90
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKeyFactory
		Statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer15)
		Method: <pro.tools.security.ToolPBE: java.security.Key toKey(java.lang.String)>
		SHA-256: ecda6701a612b1e8ada9fdd79ff96c1cd4c4e251360d0633318ad7f7e62c1cdc
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: 6c1481c2558f87e00a49c6c0932726c80b7b520ed46a4e4587b64badc070386f
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPair
		Statement: r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>()
		Method: <pro.tools.security.ToolDSA: java.util.Map initKey()>
		SHA-256: b5c227afbb8dd20ea31d9fda02475955ee32d47c64eee347c1c5e2e6c5ee82ff
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD128(byte[])>
		SHA-256: 1955721699b89563dff1d5a2bd7dbc21343cf6c86f9a5e5c624b2d16450b24d8
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA384(byte[])>
		SHA-256: 404c3d0cedaa0e5dc40e979c4b096c296746f28bddff3c65a5a7f018ebaa4385
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 41a5182e3804616c6b785e941664f33440b0b12882b358c870bf979ac7bf1fc0
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer35)
		Method: <pro.tools.security.ToolIDEA: java.security.Key toKey(byte[])>
		SHA-256: 840468f1e96761cfb71a08f6d6b07e31dec2b1a63a937ac5bb81795ba3e34ebc
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolRSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 200a4445e5f34114c18c355782024dc179c3fbb53153ab02dedd7a29cc860d41
		Secure: true
	Object:
		Variable: varReplacer134
		Type: java.lang.String
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer134)
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] encodeHmacMD4(byte[],byte[])>
		SHA-256: e8f8efcfff0ad9e14e3f952b66b2913d42381c2db092f864e474f8c8fc13552b
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolSHA1: byte[] encodeSHA(byte[])>
		SHA-256: 543fdd2addb0e7b95773b8f4ba0f1f8dab3af7e6c2f7d902b20a34da44690953
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: 42ec17f2120123f1048c54f0b41f9f54e89f0ed412807abed14bbdccf3791d00
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer21)
		Method: <pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>
		SHA-256: c6e317e25b64e7fd97d90b7eb8fb012c617f4fc5b7dc87797f15e63147392bbf
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD256(byte[])>
		SHA-256: 8d5cf1dbeecedb6c274ddf1b764553be1da527fa993f34390ca784746157b35a
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: c90a3786d84fdee04365c1883836e667e41a247c4f20a4e77595f5873ef07b3d
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolRSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 649d4e8c67f50114a21c0e30ebed8b68623015147dea99d99cd397d67aa01d7a
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPrivateKey(byte[],byte[])>
		SHA-256: 9035400396046f88268cac80b0de162e81a039cb1dc9ca967e763a35c8caad5b
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA512(byte[],byte[])>
		SHA-256: a90cdd5d7ec077ec816946b5872333c954ffd0884b8cc15afa81b850cabbe4c8
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: e7d22108c54cad12988eb85d0ee35a08bbe4ddc7119f6800b4c486aecfa156d3
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.ToolIDEA: byte[] initKey()>
		SHA-256: f5c65c30e77d0e1d535de0d14395541c8bd506265bdae952f7f099ba26bd4999
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDES: byte[] encrypt(byte[],byte[])>
		SHA-256: ece19b51a1fefc7386ab22ecd57d7685f1be550078d7da772dd03b1c6859a5f8
		Secure: false
	Object:
		Variable: varReplacer110
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer110)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA256(byte[],byte[])>
		SHA-256: d13797db6d1d8da0111e3397fd15ad8797fdd5948fd8427c816b02cc642b5c43
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer142)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] initHmacRipeMD160Key()>
		SHA-256: 31b80bb1502b9fd86869deb91c5e88bbb056a96f31d537a25135f72fdebc3ab0
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolPBE: byte[] decrypt(byte[],java.lang.String,byte[])>
		SHA-256: 4f093a12dbb8dda886630ba97a4af90c08f407f2f7819b152847655b29c302e6
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolDESede: byte[] encrypt(byte[],byte[])>
		SHA-256: a5c6f783ac68724556719b2647640c58abe0c899ac9c042603895a3068b1ef96
		Secure: false
	Object:
		Variable: r3
		Type: java.security.KeyPairGenerator
		Statement: r3 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer6)
		Method: <pro.tools.security.ToolElGamal: java.util.Map initKey()>
		SHA-256: 4864c20933a109b8cfc5c1003a3504299b04967aa0cb8e6d4794c46c1cb6e649
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5)
		Method: <pro.tools.security.ToolDH: byte[] encrypt(byte[],byte[])>
		SHA-256: 383aa0e8a1967be55b2b6fa94553e1c2c5f779153eec358417fa0f01f87b882e
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolIDEA: byte[] decrypt(byte[],byte[])>
		SHA-256: d9ff5a2d951cc174b86ddba149ae426abbc3afcfeb82e3da7f0fdaa122228650
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] encryptByPublicKey(byte[],java.lang.String)>
		SHA-256: ddf453410047fbbc0701465f3c41c57840a85e1b1b4100258498d957955f2acd
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer147)
		Method: <pro.tools.security.md.ToolSHA2: byte[] encodeSHA384(byte[])>
		SHA-256: 5f6a8f5add81eb05ee2ed88f5abf9a11f05b92d4e2cc6a81efd396396b517952
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)
		Method: <pro.tools.security.ToolPBE: java.security.Key toKey(java.lang.String)>
		SHA-256: 2e3575aa64df969743c885554e2271ba1da7bedc74d53975597389f6ab0d1350
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPublicKey(byte[],byte[])>
		SHA-256: e287f163247466f71977f3ee82c4e7ce660f39ebd9ae00d96ea346693036ec9b
		Secure: false
	Object:
		Variable: r5
		Type: javax.net.ssl.TrustManagerFactory
		Statement: r5 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r10)
		Method: <pro.tools.security.ToolHTTPS: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 6a55a5b579bcaeee75cb69cf4b145d2315fca9e3bd53e198c27023d568b4fd83
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer108)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA(byte[],byte[])>
		SHA-256: d1bf4cea50e8abc21a4ad2e48ac5c37e3e3cf71eb82793cf4198682fb583526d
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer123)
		Method: <pro.tools.security.md.ToolMD5: byte[] encodeMD5(byte[])>
		SHA-256: 1d7d7b36d13aa21ee1a8d5e3a13a6845992f6faea6bf5b367ba50eaf60996a7a
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPublicKey(byte[],byte[])>
		SHA-256: 42c1f644bfffe51a8f57c1e5a2ae8d0bdd6188bfe58cbb9b23566b12746dc66e
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <pro.tools.security.ToolRSA: byte[] encryptByPrivateKey(byte[],byte[])>
		SHA-256: 81d6159bc5218e5cebce16d8e1e1ee97312bab5d31e74c301d750c1eee93ccc0
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolECDSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: df6617fb58424d6cc89c9b0f7105b53d8543fc30d42c6c9648a197b4facede2d
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r5 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPublicKey(byte[],java.lang.String)>
		SHA-256: d05b95ad7908e7190d8c07ea783ef7513136066dd1eed1090f9007448fc68ba6
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <pro.tools.security.ToolDSA: java.util.Map initKey()>
		SHA-256: 603a9467df6e6ed58e16e83d5f25371eead415e6aac7d4030c081d2dc5695b52
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer182)
		Method: <pro.tools.security.ToolDES: byte[] initKey()>
		SHA-256: a0e0be244c296eb7684fa724133ab0e7b79417f9cbb86f5347be7ef51703284b
		Secure: false
	Object:
		Variable: r11
		Type: java.security.KeyPair
		Statement: r11 = virtualinvoke r10.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <pro.tools.security.ToolECDSA: java.util.Map initKey()>
		SHA-256: 32d6a07b5069bd59b409f222552940b8941547b35e13d3131bb6edb7bdf9f412
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 1efb7eaec7a4e562a2b727a603764ce5eb7e1e8f90a48101eeb754b0766d6e0d
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <pro.tools.security.md.ToolMAC_BCP: byte[] initHmacSHA224Key()>
		SHA-256: a48b6b6e68fe44dad7e099b924bf32ac3fa012765023bbc932f0320e64401d1d
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMD5: byte[] encodeMD5(byte[])>
		SHA-256: 56999e626bde5f2f151550e261619daf54be20a9b4de15676302caeed7fae65c
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 586e71933cf0743e6a7e40c7eb604cc3121e416f127f234a43eb8c6f69376926
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolDH: byte[] getPublicKey(java.util.Map)>
		SHA-256: f36f80d426f181274594bbb2a9bc3fbcf153c70bec53a6d26f07dd9eb96bc345
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer103)
		Method: <pro.tools.security.md.ToolMAC: byte[] initHmacMD5Key()>
		SHA-256: 3253b92262c3435f30e22dc5734fa6129fc1090b6e58ab8c0920e8ce6e30779d
		Secure: false
	Object:
		Variable: r0
		Type: java.security.SecureRandom
		Statement: r0 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer154)
		Method: <pro.tools.security.ToolPbkdf2: byte[] generateSalt()>
		SHA-256: 357807f2edb9800d595b5584b61fc7eda963d102b252be5bba4d51e0ee30d49a
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)
		Method: <pro.tools.security.ToolPbkdf2: byte[] getEncryptedPassword(java.lang.String,byte[])>
		SHA-256: 4544d6ee9e947e9a3c13254fd41b636f1a0d635e5c9ba6978f8a7eaa28214e9b
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r5.<java.security.Signature: byte[] sign()>()
		Method: <pro.tools.security.ToolCertificate: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: a88972c556603797d24462267e297a448061bafed29fffd2a89d142d5bdb9595
		Secure: false
	Object:
		Variable: r5
		Type: java.security.Signature
		Statement: r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r8)
		Method: <pro.tools.security.ToolCertificate: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 3b90dd68015445a9e54930c1db3031e9185124108baffc5ab29a0db650f57121
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <pro.tools.security.ToolCertificate2: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 401ba1cf36c77878184a1135db410034feff23a95d58226843648ef6cfa79ea1
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer121)
		Method: <pro.tools.security.md.ToolRipeMD: byte[] encodeRipeMD320(byte[])>
		SHA-256: 3b623587fe00862c16c2d28f5031d219438e47ad09359884d4c88799efbe345f
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke r5.<java.security.Signature: byte[] sign()>()
		Method: <pro.tools.security.ToolDSA: byte[] sign(byte[],byte[])>
		SHA-256: 8050949f08f47e41541a5f9c8576ba5e4396a5792840a9f2e56b4564d75fa854
		Secure: false
	Object:
		Variable: r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer141)
		Method: <pro.tools.security.md.ToolHmacRipeMD: byte[] encodeHmacRipeMD128(byte[],byte[])>
		SHA-256: be2ddf9a376b4f69dcda0aa138658e817f61f98623adee445787d5a976ab26ad
		Secure: false
	Object:
		Variable: r1
		Type: java.security.Key
		Statement: $r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>()
		Method: <pro.tools.security.ToolECDSA: byte[] getPrivateKey(java.util.Map)>
		SHA-256: 6259649aac6ad464d24593de233a5929a9431de96faf6b7734a5b3a237cb5f33
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r8 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.ToolRSA: byte[] decryptByPrivateKey(byte[],byte[])>
		SHA-256: 19e04ed3c7905e5f2c1da3331541ca5c2d6465696d9ce0d2fc69adaa30fc7902
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal(byte[])>(r0)
		Method: <pro.tools.security.md.ToolMAC: byte[] encodeHmacSHA384(byte[],byte[])>
		SHA-256: fcc731e7d8f6b6f3d0d038e960493e63001026ca8e0bdebbae6ea86a2aebd0e5
		Secure: true

Findings in Java Class: pro.tools.security.ToolPBE

	 in Method: java.security.Key toKey(java.lang.String)
		ForbiddenMethodError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Detected call to forbidden method void <init>(char[]) of class javax.crypto.spec.PBEKeySpec. Instead, call method <javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>.
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>($r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #ecda6701a612b1e8ada9fdd79ff96c1cd4c4e251360d0633318ad7f7e62c1cdc)
			First parameter (with value "PBEWithMD5AndTripleDES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer15)


	 in Method: byte[] encrypt(byte[],java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer18, r3, r4)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #eefdc85da0cca73d95225ae7cd76951ad544cab82b6d60a7836fe8cb69906a24)
			Second parameter (with value 512)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer17)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #3699909a08b8eb1cc89fe3ae4e95113d76d3bb304306a4eafb252f315a9f39fd)
			First parameter (with value "PBEWithMD5AndTripleDES") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer17)


	 in Method: byte[] decrypt(byte[],java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer20, r3, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer19)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #80c228239cb8e4842777f812730844342a2844da4c6b338a3e65a4109c999e75)
			Second parameter (with value 100)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer19)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c6e317e25b64e7fd97d90b7eb8fb012c617f4fc5b7dc87797f15e63147392bbf)
			First parameter (with value "PBEWithMD5AndTripleDES") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer21)


Findings in Java Class: pro.tools.security.ToolElGamal

	 in Method: byte[] decryptByPrivateKey(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1, r4)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1, r4)


	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #4864c20933a109b8cfc5c1003a3504299b04967aa0cb8e6d4794c46c1cb6e649)
			First parameter (with value "ElGamal") should be any of {RSA, EC, DSA, DiffieHellman, DH}
			at statement: r3 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer6)


	 in Method: byte[] encryptByPublicKey(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4, r4)


Findings in Java Class: pro.tools.security.ToolDSA

	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #3afe285087e5cc3288080de91df7ddc88625a93944a2d73af2aafaa0a6fa60f7)
			First parameter (with value 1024) should be any of {2048}
			at statement: virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(int,java.security.SecureRandom)>(varReplacer28, $r5)


	 in Method: byte[] sign(byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r5.<java.security.Signature: void initSign(java.security.PrivateKey)>(r4)


	 in Method: boolean verify(byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke r6.<java.security.Signature: void initVerify(java.security.PublicKey)>(r5)


Findings in Java Class: pro.tools.security.ToolIDEA

	 in Method: java.security.Key toKey(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer35)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #840468f1e96761cfb71a08f6d6b07e31dec2b1a63a937ac5bb81795ba3e34ebc)
			Second parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer35)


	 in Method: byte[] decrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #1379ee0324e75ef614579fef2c8b191eb2e9116444d4048f3d398709da111b1a)
			First parameter (with value "IDEA/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer37)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer36, r2)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c7a101bb5ab739537bfa6b97b93321e313d62e881cace19069891dbe96ad3790)
			First parameter (with value "IDEA/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer38)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer39, r2)


	 in Method: byte[] initKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #a3a29348a84175a8b4a4d749c66ec079b83c259648000614cd67d09550a7b9ac)
			First parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer40)


Findings in Java Class: pro.tools.security.ToolRSA

	 in Method: byte[] decryptByPrivateKey(byte[],byte[])
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer52, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer52, r4)


	 in Method: byte[] decryptByPublicKey(byte[],byte[])
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer55, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer55, r4)


	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #46a7e5a7b832535be7e92a7741d002ad4f2be03555853977a135eaaf73b7304b)
			First parameter (with value 512) should be any of {4096, 3072, 2048}
			at statement: virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer63)


	 in Method: byte[] encryptByPublicKey(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer57, r4)


	 in Method: byte[] encryptByPrivateKey(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer58, r4)


Findings in Java Class: pro.tools.security.ToolDESede

	 in Method: java.security.Key toKey(byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #bc2248bc9c6fa9641339eeed4ee5356a826a28163152125950e85393b2ab70e0)
			First parameter (with value "DESede") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer68)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)


	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer69, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #5149c0787fcddb3e5d2d94eca87c62d2bb635dc74991be32917a6f3ef252abb3)
			First parameter (with value "DESede/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer70)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #e7a3e039cd41a9eccb2f9782a534fa910c9156fff4ba45b283e342425766cac7)
			First parameter (with value "DESede/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer72)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer71, r2)


	 in Method: byte[] initKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #70f76426a7b83b2189d3a2607015e25cfb8802a7e6c0bd6e8ecb0e932fd89f11)
			First parameter (with value "DESede") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer73)


Findings in Java Class: pro.tools.security.ToolAES

	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer78, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #87c5bf6534f0b9df02cf7bae90f81ec53f5612cd3a6eb9438c18e64c74391912)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer77)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #ab8f091cee097b8652d454de6d483d360c97dcd24b7818f6535cdaccf08baba)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer80)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer79, r2)


	 in Method: java.security.Key toKey(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, varReplacer76)


Findings in Java Class: pro.tools.security.ToolDH

	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #e264491a454f652b68535028952ee9973330eec6066b1339cbfa3f4b440c3d9d)
			First parameter (with value 512) should be any of {2048}
			at statement: virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer85)


	 in Method: byte[] decrypt(byte[],byte[])
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer95, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer96)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer95, r2)


	 in Method: java.util.Map initKey(byte[])
		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared R S A
			at statement: virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4)

		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared D H
			at statement: virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4)

		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared D S A
			at statement: virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4)

		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as prepared E C
			at statement: virtualinvoke r5.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4)


	 in Method: byte[] encrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer94, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer93)


Findings in Java Class: pro.tools.security.md.ToolMAC

	 in Method: byte[] initHmacMD5Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #3253b92262c3435f30e22dc5734fa6129fc1090b6e58ab8c0920e8ce6e30779d)
			First parameter (with value "HmacMD5") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer103)


	 in Method: byte[] encodeHmacMD5(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #81160d28ea6e7192a10b90546611796e7fde5d5e8df3263a0b6d9ded0b9482b6)
			First parameter (with value "SslMacMD5") should be any of {HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer104)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #861bbce3bf9e4268bd2280f53e0970d41bb00adf1b1f3a84becb2d5081b9658b)
			Second parameter (with value "HmacMD5") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer105)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer105)


	 in Method: byte[] initHmacSHAKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #52a793e8ed7b60e27a2dc5e9ebcbf499e5ed21866835deb25e17b240d5ff5d7c)
			First parameter (with value "HMacTiger") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer106)


	 in Method: byte[] encodeHmacSHA(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #d1bf4cea50e8abc21a4ad2e48ac5c37e3e3cf71eb82793cf4198682fb583526d)
			Second parameter (with value "HMacTiger") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer108)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer108)

		ConstraintError violating CrySL rule for javax.crypto.Mac (on Object #160ed63274aa0453a14a9a7c0f930d1b7bd47845dbacd9649ab2f754a4446006)
			First parameter (with value "SslMacMD5") should be any of {HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512, HmacPBESHA1, PBEWithHmacSHA1, PBEWithHmacSHA224, PBEWithHmacSHA256, PBEWithHmacSHA384, PBEWithHmacSHA512}
			at statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer107)


	 in Method: byte[] encodeHmacSHA256(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer110)


	 in Method: byte[] encodeHmacSHA512(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer114)


	 in Method: byte[] encodeHmacSHA384(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer112)


Findings in Java Class: pro.tools.security.md.ToolMD4

	 in Method: byte[] encodeMD4(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #cbb0d2242f37a637ce587ad4b92435b888633857f2ac070e02045ea6b05f12e0)
			First parameter (with value "MD4") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer116)


Findings in Java Class: pro.tools.security.md.ToolRipeMD

	 in Method: byte[] encodeRipeMD128(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #25a232628affc66694f273073f2bc61c03a07d804f9c80e18210c22078f65276)
			First parameter (with value "RipeMD128") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer118)


	 in Method: byte[] encodeRipeMD160(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #f8274e89fac0c65cc4b0983a3b743aeccb41c88c2ced0ec582db6baf45b4be21)
			First parameter (with value "RipeMD160") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer119)


	 in Method: byte[] encodeRipeMD256(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a27db0281a12264d76be8535c71758de8a36740ff3293e380c0f7cdd5b976779)
			First parameter (with value "RipeMD256") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer120)


	 in Method: byte[] encodeRipeMD320(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #3b623587fe00862c16c2d28f5031d219438e47ad09359884d4c88799efbe345f)
			First parameter (with value "RipeMD320") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer121)


Findings in Java Class: pro.tools.security.md.ToolMD5

	 in Method: byte[] encodeMD5(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #1d7d7b36d13aa21ee1a8d5e3a13a6845992f6faea6bf5b367ba50eaf60996a7a)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer123)


Findings in Java Class: pro.tools.security.md.ToolSHA1

	 in Method: byte[] encodeSHA(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #94d305d46ecd442c5ae9ad27043377a72f5a078ea4ed9ccf447f3c3a133a8789)
			First parameter (with value "SHA") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer125)


Findings in Java Class: pro.tools.security.md.ToolMD

	 in Method: byte[] encodeTiger(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #83a43d3870f0d8b2e7c5fab8e82d66098060f2c45fa83cc6135932014974d21d)
			First parameter (with value "Tiger") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer127)


	 in Method: byte[] encodeWhirlpool(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #6e8f7a956af0542f8c572bafa985d99a777a26cd9a2e3584e7cb97f21ad817b)
			First parameter (with value "Whirlpool") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer128)


	 in Method: byte[] encodeGOST3411(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #6e2ad16302a1be0387abd898594d677477a988ea2934882d80397fc823ff58e6)
			First parameter (with value "GOST3411") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer129)


Findings in Java Class: pro.tools.security.md.ToolMAC_BCP

	 in Method: byte[] initHmacMD2Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #5c7a16c362505ba2d6ff5cf82505741b028bd42da986fe32ee7d91f194d36233)
			First parameter (with value "HmacMD2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer131)


	 in Method: byte[] encodeHmacMD2(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer132)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #b5fa6fbd181c2b611e68a68d06907ab073ba87109dea4bd088713b61064ccbad)
			Second parameter (with value "HmacMD2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer132)


	 in Method: byte[] initHmacMD4Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #7ab52d9b9ac8c55cfca5cd6f866af60f659183dd264582b9315bc2d736e05039)
			First parameter (with value "HmacMD4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer133)


	 in Method: byte[] encodeHmacMD4(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #c4350778a9b257ed782b75e20797bc3d3974f0644c733c1e3d563c45940aa61e)
			Second parameter (with value "HmacMD4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer134)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer134)


	 in Method: byte[] encodeHmacSHA224(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer136)


Findings in Java Class: pro.tools.security.md.ToolMD2

	 in Method: byte[] encodeMD2(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b494110ac167e064d46c02ebf53475efdca7a75de28d18b2d70e6755a29576bf)
			First parameter (with value "MD2") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer138)


Findings in Java Class: pro.tools.security.md.ToolHmacRipeMD

	 in Method: byte[] initHmacRipeMD128Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #8448cd2ec454d83b2e63dbfd94449f3f531ca21c3e48c10783107853ef5a5837)
			First parameter (with value "HmacRipeMD128") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer140)


	 in Method: byte[] encodeHmacRipeMD128(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #be2ddf9a376b4f69dcda0aa138658e817f61f98623adee445787d5a976ab26ad)
			Second parameter (with value "HmacRipeMD128") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer141)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer141)


	 in Method: byte[] initHmacRipeMD160Key()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #31b80bb1502b9fd86869deb91c5e88bbb056a96f31d537a25135f72fdebc3ab0)
			First parameter (with value "HmacRipeMD160") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer142)


	 in Method: byte[] encodeHmacRipeMD160(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer143)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #775a8c391c9943d00e960e7fabd6facf8d1c5195d2761ae52d6e78ec0caf6e96)
			Second parameter (with value "HmacRipeMD160") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer143)


Findings in Java Class: pro.tools.security.md.ToolSHA2

	 in Method: byte[] encodeSHA224(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #412c0d3fc596355dbaead8c91fbe72ed41c11a7731d41f69070960f55303774f)
			First parameter (with value "SHA-224") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer145)


Findings in Java Class: pro.tools.security.ToolHTTPS

	 in Method: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #deca2f2fd47f75a658c9295c51125d6879b4610c9eee2d180634a2c01f08c91f)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r3, $r6)


	 in Method: javax.net.ssl.SSLSocketFactory getSSLSocketFactory(java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r11, $r12, $r13)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r11, $r12, $r13)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #2a5016b9881583e5a73d1e257c9a2e080c0c81aaec0bce16e96f6df4e02f4884)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer150)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r3.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r4, $r9)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #21d28b95ea94362a88aed73412bdcc4232b60f9222c14e597d046aad77f35529)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r3.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r4, $r9)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r5.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r6)


Findings in Java Class: pro.tools.security.ToolHTTPS2

	 in Method: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #dec3ffb6e48d04c1c833fc681445848bc6895d2c19e9b846e8c66a22ac574dbe)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r3, $r5)


Findings in Java Class: pro.tools.security.ToolPbkdf2

	 in Method: byte[] getEncryptedPassword(java.lang.String,byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #191a635bfa78788ab4f822d30fa09325f8862f995137d72e93b1c92323136d1)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r1, s1, s0)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #ca2def7222cf1f826795695cc40ef995369e69249745ad41bbbc6f64fd58664b)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r1, s1, s0)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r7 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #ca2def7222cf1f826795695cc40ef995369e69249745ad41bbbc6f64fd58664b)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r7 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)


Findings in Java Class: pro.tools.security.ToolECDSA

	 in Method: java.util.Map initKey()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #124c5a95e0fd276caeb05f278b2d371a7cb819851da835efdb9125849bf3e2cc)
			First parameter (with value "ECDSA") should be any of {RSA, EC, DSA, DiffieHellman, DH}
			at statement: r10 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer160)


	 in Method: byte[] sign(byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r5.<java.security.Signature: void initSign(java.security.PrivateKey)>(r4)

		ConstraintError violating CrySL rule for java.security.Signature (on Object #82b9bc7d001d131a059427ee0c85062a1512f8cc30723111eaf70a8f54def04b)
			First parameter (with value "SHA512withECDSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA224withDSA, NONEwithDSA, SHA1withDSA}
			at statement: r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer172)


	 in Method: boolean verify(byte[],byte[],byte[])
		ConstraintError violating CrySL rule for java.security.Signature (on Object #c2052c54ef88d93ee45b658716d05873e6512144ff359945a11323cc64af86e2)
			First parameter (with value "SHA512withECDSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA224withDSA, NONEwithDSA, SHA1withDSA}
			at statement: r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer174)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke r6.<java.security.Signature: void initVerify(java.security.PublicKey)>(r5)


Findings in Java Class: pro.tools.security.ToolDES

	 in Method: java.security.Key toKey(byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #c6be50dc4c37eb598683c06c0aa78a4c83e4e4afb009d20113c5e97b24597dbf)
			First parameter (with value "DES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer176)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1)


	 in Method: byte[] decrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #602ac7b37b2fb84cb3683918e3254a09bc7f514f447a099bbc594039b59e7dd6)
			First parameter (with value "DES/ECB/PKCS5PADDING") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer178)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer177, r2)


	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #7c1aa270e6ce10cccb6f9356865bd265b406bcd06b85fdb231ce055d3aaee14a)
			First parameter (with value "DES/ECB/PKCS5PADDING") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer180)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer179, r2)


	 in Method: byte[] initKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #a0e0be244c296eb7684fa724133ab0e7b79417f9cbb86f5347be7ef51703284b)
			First parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer182)


Findings in Java Class: pro.tools.security.ToolCertificate

	 in Method: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer186, r4)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer186, r4)


	 in Method: byte[] decryptByPublicKey(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer188, r2)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer188, r2)


	 in Method: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer185, r4)


	 in Method: byte[] encryptByPublicKey(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer187, r2)


	 in Method: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r5.<java.security.Signature: void initSign(java.security.PrivateKey)>(r6)


Findings in Java Class: pro.tools.security.ToolPBE2

	 in Method: java.lang.String getEncryptedPassword(java.lang.String,java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #6ade49727f791854ebf850dab8a765059dd7a85e8013f7f23d65c8b0ee72d0e4)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer191, varReplacer192)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r2)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #34285317cb390ccb4da06fc09583320e3aa2d05442cd01f531d22d4b6e0f7cc7)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer190)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #6ade49727f791854ebf850dab8a765059dd7a85e8013f7f23d65c8b0ee72d0e4)
			Third parameter (with value 1000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer191, varReplacer192)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #6ade49727f791854ebf850dab8a765059dd7a85e8013f7f23d65c8b0ee72d0e4)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r6, varReplacer191, varReplacer192)


Findings in Java Class: pro.tools.security.ToolCertificate2

	 in Method: java.security.KeyStore getKeyStore(java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #4eba203819afe9d39f0c9557fe1ac65166560ebcc07014d4f1912d65ef3eb652)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r3, $r7)


	 in Method: byte[] decryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer204, r4)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer204, r4)


	 in Method: byte[] decryptByPublicKey(byte[],java.lang.String)
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer206, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer206, r2)


	 in Method: byte[] encryptByPrivateKey(byte[],java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer203, r4)


	 in Method: byte[] sign(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r6.<java.security.Signature: void initSign(java.security.PrivateKey)>(r7)


	 in Method: byte[] encryptByPublicKey(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer205, r2)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 298

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 56
	NeverTypeOfError: 6
	RequiredPredicateError: 63
	ForbiddenMethodError: 9
	IncompleteOperationError: 2
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 0 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 1.747 s
