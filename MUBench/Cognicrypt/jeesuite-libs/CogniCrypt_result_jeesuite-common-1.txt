
Current Proejct: /home/x/CryptoAPIDetect/dataset/MUBench/jeesuite-libs/jeesuite-common/target/jeesuite-common-1.2.1-SNAPSHOT.jar
[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 445.8 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 19 analysis seeds within 0 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 20
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.05

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 20
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.1

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 21
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.14

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 22
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.18

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 23
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.21

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 35
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.2

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 36
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 38
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 39
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 41
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 42
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 43
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 43
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 45
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 46
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 46
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 48
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 49
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 49
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 24 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 25 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 26 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 27 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 28 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 29 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 30 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 31 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 32 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 33 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 34 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 35 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 36 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 37 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 38 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 39 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 40 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 41 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 42 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.82

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 43 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 44 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 45 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 46 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 47 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 48 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 49 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 50 of 51
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r9.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.jeesuite.common.util.DigestUtils: java.lang.String md5(java.lang.Object)>
		SHA-256: 872378989d22443e96a8361170c83202c2b67a46cd72412dbede1ab8838600e2
		Secure: false
	Object:
		Variable: r26
		Type: javax.crypto.Cipher
		Statement: r26 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer475)
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String decrypt(java.security.PrivateKey,byte[])>
		SHA-256: 8d373c296e77fb0c30396b345e7b2cf54f3cca6273d662477ab01ae3a46d5c5c
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.Key
		Statement: $r7 = virtualinvoke r17.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r1, $r6)
		Method: <com.jeesuite.common.crypt.RSA: java.security.PrivateKey loadPrivateKeyFromKeyStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: c2afb5acc7b2542a620ee1ea27d9c428e02c08321eb1dd7e118950c9cc4ac001
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: r21 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <com.jeesuite.common.crypt.RSA: byte[] encrypt(java.security.PublicKey,byte[])>
		SHA-256: 46062d1447097675663c5cd8fc443fe401401aaa2adeb939e86813cccc8a8820
		Secure: false
	Object:
		Variable: r4
		Type: byte[]
		Statement: r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <com.jeesuite.common.crypt.AES: byte[] encrypt(byte[],byte[])>
		SHA-256: a150e418185992c497d6f11dca8d0e7ba0edfb9da3feffd2e8e166aedf720cbd
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <com.jeesuite.common.crypt.AES: byte[] decrypt(byte[],byte[])>
		SHA-256: 6b73db66fceb04d841ec0b82915d3f5cc90e53147f01f4a2713f280d3a9b33c6
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r10)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: d5d595bffabbadc487b97299a35fc11ff29425ebf23dbe4c4fe783eb30eacac2
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.SecretKey
		Statement: r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.jeesuite.common.crypt.AES: byte[] initKey()>
		SHA-256: 7a97d0f6ba7bb2bd7bf0ad0a56b1cd73fb5c52d2ac8f27146c1cc8407246e193
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r15)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 925191a11a521431b23da3528dbf3729cdfdd3917ee0927bb1fbb1f2acbc54de
		Secure: false
	Object:
		Variable: r17
		Type: java.security.SecureRandom
		Statement: specialinvoke r17.<java.security.SecureRandom: void <init>()>()
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String[] generateKeyPair(int)>
		SHA-256: cee5a6bc21d282d0b590f46b11cc17fef1a8ef6f6b04c576f981d9f7a0157957
		Secure: true
	Object:
		Variable: r22
		Type: byte[]
		Statement: r22 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, varReplacer465)
		Method: <com.jeesuite.common.crypt.RSA: byte[] encrypt(java.security.PublicKey,byte[])>
		SHA-256: 13c96a8d7518c8499e9177fb6bcc2d4761901ae341e0f0f2ba6b1e4f5dcc6673
		Secure: false
	Object:
		Variable: r17
		Type: java.security.KeyStore
		Statement: r17 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r14)
		Method: <com.jeesuite.common.crypt.RSA: java.security.PrivateKey loadPrivateKeyFromKeyStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 4adef0ffe5abcd0e92505c4fff8358ee9bf5c8b3b4b53cf532c3a1fc38015240
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: $r9 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String decrypt(java.security.PrivateKey,byte[])>
		SHA-256: db1970bc519178b4fea5b67103db0d6c0a6b3bbc8a71717d4ef7c46970219c2f
		Secure: false
	Object:
		Variable: $r13
		Type: byte[]
		Statement: $r13 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r12)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: be0d4d928d218eb477bafd477972ebed0d514c15c625c09ce40bd2bf545bb166
		Secure: false
	Object:
		Variable: r28
		Type: byte[]
		Statement: r28 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, varReplacer477)
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String decrypt(java.security.PrivateKey,byte[])>
		SHA-256: 5ee3e3dee6a42b9daf7eed2e88b3a30e911aebca8561f3c104e1f34ff33f3a9f
		Secure: false
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r13 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r12)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 43fdb4e55476e710e0294fd68ca3cf178d28c71a6ccabcdd09319afdf28cc6b8
		Secure: false
	Object:
		Variable: r24
		Type: java.security.KeyStore
		Statement: r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r21)
		Method: <com.jeesuite.common.crypt.RSA: java.security.PublicKey loadPublicKeyFromKeyStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 76957f850018dd749fa0ef27d261bfff2fbc7122d03840a9075dd64c878424f3
		Secure: false
	Object:
		Variable: r4
		Type: byte[]
		Statement: r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <com.jeesuite.common.crypt.AES: byte[] decrypt(byte[],byte[])>
		SHA-256: 3c2535c436f58187fb0feb0389e885ded9543267b1231f3c069c9e010716be09
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: r22 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, varReplacer465)
		Method: <com.jeesuite.common.crypt.RSA: byte[] encrypt(java.security.PublicKey,byte[])>
		SHA-256: f80b823b3d89656d1d1d3e923242ae8cf871aa6f432814a284d82b5e87ba56d9
		Secure: false
	Object:
		Variable: varReplacer488
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer488)
		Method: <com.jeesuite.common.crypt.AES: byte[] decrypt(byte[],byte[])>
		SHA-256: a2f3563bdabb3b92a33ac23cf4aef1984b98f09ee42fd0e5c849d7cdd2a28399
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.Key
		Statement: $r10 = virtualinvoke r24.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r1, $r9)
		Method: <com.jeesuite.common.crypt.RSA: java.security.PublicKey loadPublicKeyFromKeyStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 95a3d0adbf30ce282a9df90e7e39d682a94b55a78de9b13ffb5064d056cb211d
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKeyFactory
		Statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer494)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: f655a8d24c0de232f3ff7ba85da397cc80b62965bb673a402a8bf2385b342c67
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer487)
		Method: <com.jeesuite.common.crypt.AES: byte[] encrypt(byte[],byte[])>
		SHA-256: 59c2ed8098085efc811af035f23dc3c38f4c05d66041ed92d862260d8c82e5ed
		Secure: false
	Object:
		Variable: r12
		Type: java.security.KeyPairGenerator
		Statement: r12 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer443)
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String[] generateKeyPair(int)>
		SHA-256: 83fb8de97892ad9ede607101f8168f7c0001799b01843ba19c595066bcded288
		Secure: true
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String decrypt(java.security.PrivateKey,byte[])>
		SHA-256: 753692e32091f569406ba8ea572b9f046fe43d010985d49a06af10dfe6df90bd
		Secure: false
	Object:
		Variable: r28
		Type: byte[]
		Statement: r28 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, $i2)
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String decrypt(java.security.PrivateKey,byte[])>
		SHA-256: b6be32eb64e4aa7a0c27b67d0379c20a4efc27bde13b5cfedc4eb3d761649f5d
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKeyFactory
		Statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer495)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: fe37adea563a2801680fc7261815a44ff0c03db3eb79e1b19b6c755faedc0ab4
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer488)
		Method: <com.jeesuite.common.crypt.AES: byte[] decrypt(byte[],byte[])>
		SHA-256: 2b732bc723ab7c72e1c7b1924d2385c8feccb88f0255238d985078ec49d11a2
		Secure: false
	Object:
		Variable: r9
		Type: java.security.MessageDigest
		Statement: r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer264)
		Method: <com.jeesuite.common.util.DigestUtils: java.lang.String md5(java.lang.Object)>
		SHA-256: 49e6c908100c7153f1e7f56ce6b8ac74062167acccffadb02a286fa776540b9e
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer492)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: c6e345bfbb91e714874bac5bf6f527b98e58747e57553f358c7b9789d19cd31a
		Secure: false
	Object:
		Variable: varReplacer487
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer487)
		Method: <com.jeesuite.common.crypt.AES: byte[] encrypt(byte[],byte[])>
		SHA-256: 20a64e2d0132458502becb8891ae0658e0c1c68962612dad5a016e3f21c1853b
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: r5 = virtualinvoke r20.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.jeesuite.common.crypt.SHA1: java.lang.String getSHA1(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 713ab650a7bdf7d52d6b1eda267c68e3497e65a80c51f4742b2882953c19f6cb
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: r28 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, varReplacer477)
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String decrypt(java.security.PrivateKey,byte[])>
		SHA-256: 6909a01f1ff9795f4ca73d880e475b466dc984ef0d6ee6c5d6ae318a804be0a2
		Secure: false
	Object:
		Variable: r21
		Type: byte[]
		Statement: r21 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <com.jeesuite.common.crypt.RSA: byte[] encrypt(java.security.PublicKey,byte[])>
		SHA-256: 97c72eeb75cf1f0f543d575c52d4a98aa2b30851047eb540b44255df83bb9ec0
		Secure: false
	Object:
		Variable: r6
		Type: byte[]
		Statement: r6 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r11)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: 3c3f56f87f9dff7130f36cbb1a3358ddca7f1adc0a7ca414bd765f5ccdee0b24
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer496)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: bb246002d6482da694333ddae5afd8a29679f533251824a0ee6f45c6bed1d4d2
		Secure: false
	Object:
		Variable: $r11
		Type: byte[]
		Statement: r6 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r11)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: 9f0b9c6bb5131c4f9c4e85f6f3cded0946a369cb6fdbb09eb1c5ac88a0665953
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.PublicKey
		Statement: $r5 = virtualinvoke r14.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String[] generateKeyPair(int)>
		SHA-256: b75b4fb0b5505f914a428c7493fa91f647bac7967815d7ff815471cf70c6c1cb
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer486)
		Method: <com.jeesuite.common.crypt.AES: byte[] encrypt(byte[],byte[])>
		SHA-256: e8b21f27a0b5f17b087684ac023df838c6bfb92b4d96acf6d28fe69c41b9677c
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.PrivateKey
		Statement: $r4 = virtualinvoke r14.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String[] generateKeyPair(int)>
		SHA-256: c50f9f2d027888ccd767b971bda5fc53f4a5212316e9c556c61196f05fcc89fb
		Secure: true
	Object:
		Variable: r20
		Type: javax.crypto.Cipher
		Statement: r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer464)
		Method: <com.jeesuite.common.crypt.RSA: byte[] encrypt(java.security.PublicKey,byte[])>
		SHA-256: 4b37025c1bca959a1107c7c8db162afc99a11c1dd4866ee538cac58e63f88794
		Secure: false
	Object:
		Variable: r20
		Type: java.security.MessageDigest
		Statement: r20 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer503)
		Method: <com.jeesuite.common.crypt.SHA1: java.lang.String getSHA1(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: a47113bac4962949846d532ec285c2d8c048b5a28554b68350d152b38be3e9ad
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r14)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: a88772932215f4b887ef51e6e75a8fb7513e6e73e583e0cd209f4196554ba3fb
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r9)
		Method: <com.jeesuite.common.crypt.DES: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 193cd8c9fd37f146eb4624b5aeab4f2e4ae4f10c82177adf27778c6caba0e713
		Secure: false
	Object:
		Variable: r22
		Type: byte[]
		Statement: r22 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, $i2)
		Method: <com.jeesuite.common.crypt.RSA: byte[] encrypt(java.security.PublicKey,byte[])>
		SHA-256: 81f50e73b8f75ca266383c41d0dececbc401189482e6ae1db2f98106f566d62a
		Secure: false
	Object:
		Variable: r14
		Type: java.security.KeyPair
		Statement: r14 = virtualinvoke r12.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String[] generateKeyPair(int)>
		SHA-256: 37d012cf0d6e956410c4d34dd392f7263df2c7a1ccacec9cace19c021633c846
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer489)
		Method: <com.jeesuite.common.crypt.AES: byte[] decrypt(byte[],byte[])>
		SHA-256: aef463c0b9cca62bf6be848a9ed36ff53146dda4e565ccbf706e0ca8840bf5cc
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: r28 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, $i2)
		Method: <com.jeesuite.common.crypt.RSA: java.lang.String decrypt(java.security.PrivateKey,byte[])>
		SHA-256: 2464d7550de616ac5b1f8db391877e85f7fe63ba20272b325bde341ef401801a
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: r4 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <com.jeesuite.common.crypt.AES: byte[] encrypt(byte[],byte[])>
		SHA-256: 34bb75786417ec0861143e0b34de6a141a3aabed1d75661e108e0ca8cb4da677
		Secure: false
	Object:
		Variable: r0
		Type: javax.crypto.KeyGenerator
		Statement: r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer483)
		Method: <com.jeesuite.common.crypt.AES: byte[] initKey()>
		SHA-256: 14d24e9b5e5d3968550c729b5f92257640b95d7bc851a1ec1e625161182bbf82
		Secure: true
	Object:
		Variable: r1
		Type: byte[]
		Statement: r22 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, $i2)
		Method: <com.jeesuite.common.crypt.RSA: byte[] encrypt(java.security.PublicKey,byte[])>
		SHA-256: df16abb405009b344f7cea377a5e93ca417387243391bf78395083c57335c278
		Secure: false

Findings in Java Class: com.jeesuite.common.util.DigestUtils

	 in Method: java.lang.String md5(java.lang.Object)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #49e6c908100c7153f1e7f56ce6b8ac74062167acccffadb02a286fa776540b9e)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer264)


Findings in Java Class: com.jeesuite.common.crypt.RSA

	 in Method: java.security.PrivateKey loadPrivateKeyFromKeyStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #4adef0ffe5abcd0e92505c4fff8358ee9bf5c8b3b4b53cf532c3a1fc38015240)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r17.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r3, $r5)


	 in Method: java.security.PublicKey loadPublicKeyFromKeyStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #76957f850018dd749fa0ef27d261bfff2fbc7122d03840a9075dd64c878424f3)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r24.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r3, $r8)


	 in Method: byte[] encrypt(java.security.PublicKey,byte[])
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #4b37025c1bca959a1107c7c8db162afc99a11c1dd4866ee538cac58e63f88794)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: r22 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, $i2)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #4b37025c1bca959a1107c7c8db162afc99a11c1dd4866ee538cac58e63f88794)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: r22 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, varReplacer465)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r20.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer471, r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #4b37025c1bca959a1107c7c8db162afc99a11c1dd4866ee538cac58e63f88794)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r20.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer471, r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #4b37025c1bca959a1107c7c8db162afc99a11c1dd4866ee538cac58e63f88794)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: r22 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, $i2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #4b37025c1bca959a1107c7c8db162afc99a11c1dd4866ee538cac58e63f88794)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: r22 = virtualinvoke r20.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, varReplacer465)


	 in Method: java.lang.String decrypt(java.security.PrivateKey,byte[])
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #8d373c296e77fb0c30396b345e7b2cf54f3cca6273d662477ab01ae3a46d5c5c)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: r28 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, varReplacer477)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #8d373c296e77fb0c30396b345e7b2cf54f3cca6273d662477ab01ae3a46d5c5c)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: r28 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, $i2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #8d373c296e77fb0c30396b345e7b2cf54f3cca6273d662477ab01ae3a46d5c5c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: r28 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, $i2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #8d373c296e77fb0c30396b345e7b2cf54f3cca6273d662477ab01ae3a46d5c5c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: r28 = virtualinvoke r26.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r1, i5, varReplacer477)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r26.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer480, r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #8d373c296e77fb0c30396b345e7b2cf54f3cca6273d662477ab01ae3a46d5c5c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r26.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer480, r0)


Findings in Java Class: com.jeesuite.common.crypt.AES

	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #e8b21f27a0b5f17b087684ac023df838c6bfb92b4d96acf6d28fe69c41b9677c)
			First parameter (with value "AES") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer486)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer485, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer487)


	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer488)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer490, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #aef463c0b9cca62bf6be848a9ed36ff53146dda4e565ccbf706e0ca8840bf5cc)
			First parameter (with value "AES") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer489)


Findings in Java Class: com.jeesuite.common.crypt.DES

	 in Method: java.lang.String encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #f655a8d24c0de232f3ff7ba85da397cc80b62965bb673a402a8bf2385b342c67)
			First parameter (with value "DES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer494)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer491, r3, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r14)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c6e345bfbb91e714874bac5bf6f527b98e58747e57553f358c7b9789d19cd31a)
			First parameter (with value "DES/CBC/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer492)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer491, r3, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r10)


	 in Method: java.lang.String decrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #bb246002d6482da694333ddae5afd8a29679f533251824a0ee6f45c6bed1d4d2)
			First parameter (with value "DES/CBC/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer496)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r9)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer497, r3, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r3 = virtualinvoke r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r15)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #fe37adea563a2801680fc7261815a44ff0c03db3eb79e1b19b6c755faedc0ab4)
			First parameter (with value "DES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer495)


Findings in Java Class: com.jeesuite.common.crypt.SHA1

	 in Method: java.lang.String getSHA1(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a47113bac4962949846d532ec285c2d8c048b5a28554b68350d152b38be3e9ad)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r20 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer503)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 51

	CogniCrypt found the following violations. For details see description above.
	TypestateError: 4
	RequiredPredicateError: 13
	ConstraintError: 8
	NeverTypeOfError: 2
	IncompleteOperationError: 6
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 0 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 1.858 s
