
Current Proejct: /home/x/CryptoAPIDetect/dataset/MUBench/whatsmars/whatsmars-common/target/whatsmars-common.jar
[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 467.3 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 15 analysis seeds within 0 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 17
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.06

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 18
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.11

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 19
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.16

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 21
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 22
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.23

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 23
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 24
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 25
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 26
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 28
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 28
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 29
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 24 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 25 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 26 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 27 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 28 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 29 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 30 of 31
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: r5
		Type: javax.crypto.KeyGenerator
		Statement: r5 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer443)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] genarateRandomKey()>
		SHA-256: 4a852b137eb97eda2e966ef0886a0aa12d7aa90a1be17b19ced5afbf4190288c
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: df1a01dc94f77b11c195f4c391045af971fd78948cf698f614d1a793f2219555
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, varReplacer422)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: d879ab10c878be080eee103205663599842a700a6bf6f3eea303fef89aded512
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>()
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] genarateRandomKey()>
		SHA-256: b6ca71ccc6eba0a45f8c52ff26921bda79b97997c71c12edf816a114b319a69c
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.SecretKey
		Statement: $r2 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>()
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] genarateRandomKey()>
		SHA-256: f6a97369124dd84edb9361b601a01960457b47aa1dd76b018ecf28c542c627c0
		Secure: true
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer662)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: 8324a6eff87ba46767df48ca4e0a4a49b6a31d1deedf3acf983e5a18c336a9b7
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: 6ffde743ed0afd34135d0ff8e3e826b1d4a870dea6ab87b5b288f9fe95dc8250
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, varReplacer428)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: b05a7851dbe69ec729d6d30944076a130425906dfdeb531a5e65f318ac4753cf
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: r5 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: b778e637639a0fdc888e748f7fa8e70ea3f673facdca41f22819eab1b1d84a07
		Secure: false
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer668)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: f2a980bd95bb1f8ff8b801ef9711b48ee7f236a4623ac7622165555745328126
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer424)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: 903eaf7a02c27bf18094a4d6736856ebd7ebaf1e05e206b2aa7c697726148e30
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: r5 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: 42e2b63a08ba016db74f5a1ecf9b34db1e918bcff49e615e4cb03fc3405ee8ff
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer427)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: 9177fc5783db15bd77b064211f280bffd0ab09a8c7310fd64c6c897143264cf5
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer423)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: 51e9f562e1661186db65e7a92c131467654634156cff66b39c5c04154e595bc5
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKeyFactory
		Statement: r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer669)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: a69ac5dbb4b8e70fbf0ff466ac7f07853699c90082d4d56542f43e4c56770b60
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: r5 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: 98ebae529fa01c66ba88e1f96d2cb06dbbb3fa04a0ad59d0b7a6f2da820753d
		Secure: false
	Object:
		Variable: varReplacer428
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, varReplacer428)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: 42aca0931893c5c7bfc7ccb3bc346fca080331e002f3ed4675aef7bca2967c6a
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.SecretKey
		Statement: r5 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: 47779db7527e6c216d97c330e4988770e3c7961fadaca95f1bca096763dd16db
		Secure: false
	Object:
		Variable: varReplacer423
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer423)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: 85446ebf5419e45875b58e0a226a7bedc1a81c60880d0bdad54f5ad82a352b80
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: 91bde57c984001c6dbb8bc8f68f7dc4123bba2f6f4b9e4397f14c6c6590c37f6
		Secure: true
	Object:
		Variable: r0
		Type: javax.crypto.SecretKey
		Statement: r0 = virtualinvoke r5.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] genarateRandomKey()>
		SHA-256: 52eda72bb1d3345d71e2000b3c50ba4fc4a942c392a3668276e6bf2e45b7c321
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer430)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: 138f9f4cc9b260b727f758d591266c451e0d14e3a8edd6f859a8590321d5af41
		Secure: false
	Object:
		Variable: varReplacer422
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, varReplacer422)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: a1894fc9cde0e42ef304d5728ea58b9b01265852dc9b8517c1f6997bf326b618
		Secure: false
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r9 = virtualinvoke r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: 9eefcaf7a6296fe705b01993eb196ded76b959ce5efd64757ea85092f522962b
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: r5 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: 1722ec150cc4251a564b8229604dcf46cdbcdd7e0aee52b996a9c6cb6a08c464
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: fcf002d34492d4f75d312da2ff19e24c19880f7888086e39ae23ce3b1b2b54dd
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKeyFactory
		Statement: r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer663)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: 429d3f2e34c7d8a74c2e2d0e50fe0f624e1d8c3471c9d3b1fcef4fcbc0081531
		Secure: false
	Object:
		Variable: varReplacer430
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer430)
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: d6f9e86889fccab405078197710f19f317a31ee200a41585a394b52354b9083c
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.hongxi.whatsmars.common.util.AESUtils: byte[] genarateRandomKey()>
		SHA-256: 4fbb834d536721b4175fded1647ec245aaf58006e0ec703b72d4ae2cd7b8b328
		Secure: true
	Object:
		Variable: r0
		Type: byte[]
		Statement: $r9 = virtualinvoke r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] encrypt(byte[],byte[])>
		SHA-256: 62492a8c66e1af743b352fa1a2dc41765ee984a748297cd27529f098fae847e
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.SecretKey
		Statement: r5 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)
		Method: <org.hongxi.whatsmars.common.util.DESUtils: byte[] decrypt(byte[],byte[])>
		SHA-256: c600856602151916dc599fd0d4b37de56b7f1d4f29511c57cf1d9aca5262404f
		Secure: false

Findings in Java Class: org.hongxi.whatsmars.common.util.AESUtils

	 in Method: byte[] encrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer421, r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, varReplacer422)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #903eaf7a02c27bf18094a4d6736856ebd7ebaf1e05e206b2aa7c697726148e30)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer424)


	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, varReplacer430)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #9177fc5783db15bd77b064211f280bffd0ab09a8c7310fd64c6c897143264cf5)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer427)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer429, r3)


	 in Method: byte[] genarateRandomKey()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #4a852b137eb97eda2e966ef0886a0aa12d7aa90a1be17b19ced5afbf4190288c)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r5 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer443)


Findings in Java Class: org.hongxi.whatsmars.common.util.DESUtils

	 in Method: byte[] encrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #429d3f2e34c7d8a74c2e2d0e50fe0f624e1d8c3471c9d3b1fcef4fcbc0081531)
			First parameter (with value "DES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer663)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer664, r5, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r5 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #8324a6eff87ba46767df48ca4e0a4a49b6a31d1deedf3acf983e5a18c336a9b7)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer662)


	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: r5 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer670, r5, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #f2a980bd95bb1f8ff8b801ef9711b48ee7f236a4623ac7622165555745328126)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer668)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #a69ac5dbb4b8e70fbf0ff466ac7f07853699c90082d4d56542f43e4c56770b60)
			First parameter (with value "DES") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer669)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 31

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 8
	ConstraintError: 7
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 0 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 1.540 s
