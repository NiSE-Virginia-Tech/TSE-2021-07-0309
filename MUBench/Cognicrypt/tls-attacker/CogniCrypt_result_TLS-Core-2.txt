
Current Proejct: /home/x/CryptoAPIDetect/dataset/MUBench/tls-attacker/TLS-Core/target/TLS-Core-2.5.jar
[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 600.7 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 79 analysis seeds within 1 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 80
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.01

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 80
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.03

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 82
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.04

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 83
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.05

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 83
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.06

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 85
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.07

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 86
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.08

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 88
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.09

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 89
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.1

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 89
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.11

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 89
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.12

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 90
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.13

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 90
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.14

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 91
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.15

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 92
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.16

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 93
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.17

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 94
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.18

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 95
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 96
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.2

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 97
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.21

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 97
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 98
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.22

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 98
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.23

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 24 of 98
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.24

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 25 of 98
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 26 of 99
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 27 of 99
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.27

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 28 of 99
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.28

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 29 of 100
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.29

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 30 of 101
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 31 of 101
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 32 of 102
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 33 of 103
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.32

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 34 of 104
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 35 of 104
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.34

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 36 of 104
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 37 of 105
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 38 of 106
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 39 of 107
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 40 of 108
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 41 of 108
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 42 of 109
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 43 of 113
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 44 of 117
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 45 of 121
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.37

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 46 of 122
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 47 of 123
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 48 of 124
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.39

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 49 of 124
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 50 of 124
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 51 of 124
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 52 of 126
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 53 of 127
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 54 of 129
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 55 of 130
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.42

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 56 of 130
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 57 of 132
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 58 of 133
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 59 of 133
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 60 of 135
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.44

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 61 of 136
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 62 of 136
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 63 of 138
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 64 of 139
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 65 of 141
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 66 of 142
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 67 of 142
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 68 of 144
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 69 of 145
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 70 of 145
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 71 of 147
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.48

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 72 of 148
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 73 of 148
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 74 of 149
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 75 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.5

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 76 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 77 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 78 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.52

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 79 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 80 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 81 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 82 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 83 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 84 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 85 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 86 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 87 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 88 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 89 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 90 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.6

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 91 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 92 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 93 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 94 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 95 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.63

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 96 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 97 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 98 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 99 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.66

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 100 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 101 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 102 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 103 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 104 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.69

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 105 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 106 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 107 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 108 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 109 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 110 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.73

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 111 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 112 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 113 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 114 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.76

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 115 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 116 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 117 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 118 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 119 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.79

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 120 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 121 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 122 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 123 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.82

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 124 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 125 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 126 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 127 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 128 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.85

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 129 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 130 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 131 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 132 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 133 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 134 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.89

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 135 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 136 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 137 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 138 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.92

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 139 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 140 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 141 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 142 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.95

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 143 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.95

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 144 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 145 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 146 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 147 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.98

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 148 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 149 of 150
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: r1
		Type: byte[]
		Statement: r19 = virtualinvoke r18.<javax.crypto.Mac: byte[] doFinal(byte[])>(r1)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] generateHMAC(de.rub.nds.tlsattacker.core.constants.MacAlgorithm,byte[],byte[])>
		SHA-256: 4945d1ea2da281c6302760261727e12b472e2e496177001e3b92ff9b0341d3a0
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.Cipher
		Statement: $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: 22c544a93caa6b28644fa92f4d9c9ec996ff6b9c5e7bd5549f94cc10c00aa7c3
		Secure: false
	Object:
		Variable: $r6
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r6)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] generateHMAC(de.rub.nds.tlsattacker.core.constants.MacAlgorithm,byte[],byte[])>
		SHA-256: c53783aba9a32fdb4da719a77543b1b89b90ce5ef04cf7214fc3f7d2d3f286b7
		Secure: false
	Object:
		Variable: r18
		Type: javax.crypto.Mac
		Statement: r18 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r4)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] generateHMAC(de.rub.nds.tlsattacker.core.constants.MacAlgorithm,byte[],byte[])>
		SHA-256: bd3bd75951a0f1bad8719d4b19cda082488b398561bbcb514b83b8e89eb44100
		Secure: true
	Object:
		Variable: r4
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r4 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer2321)
		Method: <de.rub.nds.tlsattacker.core.util.BasicTlsServer: void <init>(java.security.KeyStore,java.lang.String,java.lang.String,int)>
		SHA-256: 4a0899b73d8d7ea9fd746ef5c96e11418f646fee5798063f3fdb00b0751f8c55
		Secure: false
	Object:
		Variable: $r12
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],byte[])>
		SHA-256: 48b7a7060a5c9f91380b3178187a82b45de03b841f025604fd46469456841c4c
		Secure: false
	Object:
		Variable: r90
		Type: javax.crypto.Mac
		Statement: r90 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r53)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.FinishedPreparator: byte[] computeVerifyData()>
		SHA-256: 4b58bc9a0b5c823a5b25a8dcba5b58e0c5b857df754ce44e8d0b422eb3865bbb
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: r5 = virtualinvoke r23.<java.security.MessageDigest: byte[] digest(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: 632d67cf8c2ae8881a7a056e1de922a5fe654da22d38dfa298bacf8810029dc1
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r5 = virtualinvoke r23.<java.security.MessageDigest: byte[] digest(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: abf33b0d00e67f0b69859b50491935e5edac0ce2f67607e2963c2ee2e448a214
		Secure: false
	Object:
		Variable: $r97
		Type: byte[]
		Statement: $r97 = virtualinvoke r110.<java.security.MessageDigest: byte[] digest()>()
		Method: <de.rub.nds.tlsattacker.core.tokenbinding.TokenBindingMessagePreparator: void prepareProtocolMessageContents()>
		SHA-256: f0c19e50d44726436f7adca11f3820f331e42c4db22318ae65aac19d00fea11
		Secure: true
	Object:
		Variable: r8
		Type: javax.crypto.Mac
		Statement: r8 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r4)
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] extract(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[])>
		SHA-256: eb6befd5fc544084acc2446a2dfb7fa4a03ee9a12bd36e92133b4f11bab38ce3
		Secure: true
	Object:
		Variable: r12
		Type: java.security.MessageDigest
		Statement: r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] deriveSecret(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,java.lang.String,byte[],java.lang.String,byte[])>
		SHA-256: 5868a595fb60ade8accd044a542508942c7d7e5e2244ddba0146fcfdcae2f4a9
		Secure: true
	Object:
		Variable: r7
		Type: java.security.KeyPairGenerator
		Statement: r7 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer1272)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.RSAClientKeyExchangePreparator: java.security.interfaces.RSAPublicKey generateFreshKey()>
		SHA-256: 147cf4176eb55360bbff5425a7addf8be80439b5d347f35d52b7e059bd3e102e
		Secure: false
	Object:
		Variable: r5
		Type: java.security.MessageDigest
		Statement: r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r17)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMac(byte[],byte[],de.rub.nds.tlsattacker.core.constants.MacAlgorithm)>
		SHA-256: ef14e9fa3fcbfa2288e8ba6df77188873e401d6acb30285c8f0a78793a5115fa
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[])>
		SHA-256: 95b0b4167b95159596565d9c74e3bde0f4f9cdc6ac8698366f344617b31ede4c
		Secure: false
	Object:
		Variable: r18
		Type: java.security.MessageDigest
		Statement: r18 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer436)
		Method: <de.rub.nds.tlsattacker.core.crypto.MessageDigestCollector: byte[] digest(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)>
		SHA-256: d969688da3395a8479b5000610f27aaa912843ad99964919824cfe18a80c8d29
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: r15 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[])>
		SHA-256: ac34ffec690df8c79d310b7117aca57956e5a34d9975eef36037ce244130a9a8
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.SrpServerKeyExchangePreparator: byte[] SHAsum(byte[])>
		SHA-256: d598486823b735d658e9be71d16fd0c92cb9dc7e9471422825a0d847b05aa32d
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.Mac
		Statement: $r15 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r14)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordStreamCipher: void initCipherAndMac()>
		SHA-256: 41c3e786f1eb4daf84a2428d8bf0d1e9d46efd844720aaeecd69b337c7ea87b4
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[])>
		SHA-256: 36ee00169c52ec3b5707719218bac76fc1e42ef6979df18da0b6ab4dffb6de30
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPairGenerator
		Statement: r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer5213)
		Method: <de.rub.nds.tlsattacker.core.util.KeyStoreGenerator: java.security.KeyPair createRSAKeyPair(int,de.rub.nds.modifiablevariable.util.BadRandom)>
		SHA-256: d512525653c1781998aef504cdee93caefe004f7af89269b8a2e1770793eaa7b
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],byte[])>
		SHA-256: cb7600316658306654a18c44d13737fc0a95a3d3c18c0974362d677c0cbfc1f6
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],byte[])>
		SHA-256: 95b0b4167b95159596565d9c74e3bde0f4f9cdc6ac8698366f344617b31ede4c
		Secure: false
	Object:
		Variable: $r12
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],byte[])>
		SHA-256: 4d27a4bbb2bdd427f379cfad1c00bf71249a66e543e41a117f9449285aa6414e
		Secure: false
	Object:
		Variable: $r28
		Type: java.lang.String
		Statement: specialinvoke $r23.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r26, $r28)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordBlockCipher: void <init>(de.rub.nds.tlsattacker.core.state.TlsContext,de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySet)>
		SHA-256: b4a997e99a078aed08f5ce061ebd374e1fac5ee3988e9f1cc0069c1103d031e4
		Secure: false
	Object:
		Variable: $r18
		Type: javax.crypto.Mac
		Statement: $r18 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r17)
		Method: <de.rub.nds.tlsattacker.core.protocol.handler.FinishedHandler: void adjustApplicationTrafficSecrets()>
		SHA-256: f2a5db4a801fa92ed2e853f4fb14f78c6fbc48e23ad2a9dacecea2e54202e6fa
		Secure: false
	Object:
		Variable: r19
		Type: byte[]
		Statement: r19 = virtualinvoke r18.<javax.crypto.Mac: byte[] doFinal(byte[])>(r1)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] generateHMAC(de.rub.nds.tlsattacker.core.constants.MacAlgorithm,byte[],byte[])>
		SHA-256: f97c25b6b6e756fb1640cf7e3801f61ebbf018669580e590f83e1b3518877a0d
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Mac
		Statement: r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r19)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.extension.PreSharedKeyExtensionPreparator: void calculateBinders(byte[],de.rub.nds.tlsattacker.core.protocol.message.extension.PreSharedKeyExtensionMessage)>
		SHA-256: 6b2c4fd5272f0883061f06ad08ac5087a4193311dd7bd31e7063395960ffc7b9
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r3)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeyBlockParser: int getBlockSize()>
		SHA-256: fc3c45e4c4106727a29005e684b2ce6b2161235e1984659b087bd3a0b4309239
		Secure: false
	Object:
		Variable: r27
		Type: byte[]
		Statement: r27 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] expand(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[],int)>
		SHA-256: 3ef005d6e188488e5843e36f073b93bab748dbeb8d3e0dd13f8d7a31f1961ba6
		Secure: true
	Object:
		Variable: $r27
		Type: java.lang.String
		Statement: specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r25, $r27)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordStreamCipher: void initCipherAndMac()>
		SHA-256: 996a7f98eafbba506e21d61b31ec38ec6c9287fb2271697b28a7ae5b6d43b67b
		Secure: false
	Object:
		Variable: $r13
		Type: java.lang.String
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r13)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: 5a350a16f948c1a47848e106cbb0009e1b1773b331d60cbb33dddd0c4c57d6ea
		Secure: false
	Object:
		Variable: r23
		Type: java.security.MessageDigest
		Statement: r23 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2653)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: 590f28be38ebf6d6a3d3c86a81ec32d4ed8f1223886fa94d70f9a671d8bf6466
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r18 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],byte[])>
		SHA-256: 911bae8a3fef8347486cf75362aed0962258f0f1942c84e7f1bb6c37c216adcf
		Secure: false
	Object:
		Variable: r26
		Type: javax.crypto.Mac
		Statement: r26 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r6)
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] expand(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[],int)>
		SHA-256: 6336434c2dea3472f1a5f70819765597f0fb0fe3d73efca93bf6b401c0deaaf7
		Secure: false
	Object:
		Variable: r21
		Type: javax.crypto.Cipher
		Statement: r21 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] decrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: 7177046ee1af18848e5d3ea7653cbfbc59f9b2477f241d0f032ed4c956f14d17
		Secure: false
	Object:
		Variable: r17
		Type: java.security.MessageDigest
		Statement: r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer437)
		Method: <de.rub.nds.tlsattacker.core.crypto.MessageDigestCollector: byte[] digest(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)>
		SHA-256: 34a5a2be8b9f8cab693af6ce15ec4e75330d2c831e142318fa25851c312602e6
		Secure: false
	Object:
		Variable: $r21
		Type: java.lang.String
		Statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r19, $r21)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordStreamCipher: void initCipherAndMac()>
		SHA-256: c2774843baf23f76cc46a322421249001a76b6521a1b1e0d34b1699b4aa15fd4
		Secure: false
	Object:
		Variable: $r11
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] encrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: dc7188dbb60ccf1e8029c8499449ebedfa2098b519511347f387f6c15efca2c3
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyPair
		Statement: r2 = virtualinvoke r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <de.rub.nds.tlsattacker.core.util.KeyStoreGenerator: java.security.KeyPair createRSAKeyPair(int,de.rub.nds.modifiablevariable.util.BadRandom)>
		SHA-256: 72254d0c69afa550bb3243a0e076ec37ea1c4bffbf9d034a3a0e0147b7cd3da0
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[])>
		SHA-256: 18a12510eec039a04b3cc695e2bd263607f24cce6eacb3415ca1d086f23c5cce
		Secure: false
	Object:
		Variable: $r83
		Type: byte[]
		Statement: $r83 = virtualinvoke r90.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.FinishedPreparator: byte[] computeVerifyData()>
		SHA-256: 7ccd2f5f81149c217d0b25f2cfe593bca3387318b70fd1524a5d137f3576db01
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.Mac
		Statement: $r8 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r7)
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] deriveSecret(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,java.lang.String,byte[],java.lang.String,byte[])>
		SHA-256: 23d1e204763ba02352b719deed5d402aed2163b1c63025e979593d4b93b0d0be
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.GCMParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(i0, r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[])>
		SHA-256: f3b254f9a9a4c10cfd05f132b752c6c72e661fbbb40110b5081660a25c8744ea
		Secure: false
	Object:
		Variable: r7
		Type: javax.net.ssl.SSLContext
		Statement: r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer737)
		Method: <de.rub.nds.tlsattacker.core.util.BasicTlsClient: javax.net.ssl.SSLContext getAllowAllContext()>
		SHA-256: 7aa6662113e672c474b2767d9af672f3e53b71752562ba8847fd6dbd11e8308e
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.Mac
		Statement: $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r4)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.extension.PSKBinderPreparator: void prepareBinderValue()>
		SHA-256: ff9968bd42b83936c6ea98319094666c9c1200c445ddd4b694392646bea5711d
		Secure: false
	Object:
		Variable: r4
		Type: byte[]
		Statement: r6 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest(byte[])>(r4)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: 679aaa53591644abf01b42af2d693c8e36a90737f1beb30c609cb6fe0a0b026c
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r18 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],byte[])>
		SHA-256: 74566b18294730e2c5ce2479612297a4471798354248525e406a43589d5deb3
		Secure: false
	Object:
		Variable: $r16
		Type: javax.crypto.Mac
		Statement: $r16 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r15)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordBlockCipher: void <init>(de.rub.nds.tlsattacker.core.state.TlsContext,de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySet)>
		SHA-256: 38154c78699568469cbb3abfefef36d764c1c370b0f357a6b296c874e5d5d029
		Secure: false
	Object:
		Variable: $r13
		Type: java.lang.String
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r13)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: 9929fb630443ffa0fc6d5bfcdf382cb35270e12ed490c21557d887b487dd31c
		Secure: false
	Object:
		Variable: r18
		Type: byte[]
		Statement: r18 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[])>
		SHA-256: b6879ced236148d964ce4dbf2e4a4ec7f8f7e54c718af682a2d9627e57762429
		Secure: false
	Object:
		Variable: $r33
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r33.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r9, $r34)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.extension.PreSharedKeyExtensionPreparator: void calculateBinders(byte[],de.rub.nds.tlsattacker.core.protocol.message.extension.PreSharedKeyExtensionMessage)>
		SHA-256: e14dfeec32c6a1043a75fb111cb2e57f254bb004786d767a72f545276d1b8f85
		Secure: false
	Object:
		Variable: r4
		Type: byte[]
		Statement: r4 = virtualinvoke r28.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <de.rub.nds.tlsattacker.core.crypto.PseudoRandomFunction: byte[] computeTls12(byte[],java.lang.String,byte[],int,java.lang.String)>
		SHA-256: c09e107c1a1d476856b224971223045a6cb906afb46a5e8c4b2b8734455be226
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[])>
		SHA-256: 243bca454e2be794db605d26d575c3cc9d3fcbc99cddd699a1b997cf9c868610
		Secure: false
	Object:
		Variable: $r23
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r23.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r26, $r28)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordBlockCipher: void <init>(de.rub.nds.tlsattacker.core.state.TlsContext,de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySet)>
		SHA-256: a846a4ad8bd2a5c80709c13f52e81c8101e07ee7fa6b255695b1e6e0c6a28608
		Secure: false
	Object:
		Variable: r11
		Type: byte[]
		Statement: r11 = virtualinvoke r4.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.extension.PreSharedKeyExtensionPreparator: void calculateBinders(byte[],de.rub.nds.tlsattacker.core.protocol.message.extension.PreSharedKeyExtensionMessage)>
		SHA-256: dc4b7616520af140f2cdb4b350f555dff7b7ab859dcc183b39251d510c85df27
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r7, $r11)
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] extract(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[])>
		SHA-256: cae835aad340b7e6fb4f8574f27a402254d2675144ea72bb4b44c943a61822fb
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r10, r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.PseudoRandomFunction: byte[] computeTls12(byte[],java.lang.String,byte[],int,java.lang.String)>
		SHA-256: 6f2b299131e7762ef07e2b21b96cec1bf28af9f62bb85c8ceba0ea8d3719b78d
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r13)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: 5c9c5aa75a4caa95bfd19ebd6bf9889eda972e17164b06df617e239ea9791675
		Secure: false
	Object:
		Variable: r7
		Type: javax.net.ssl.TrustManager[]
		Statement: r7 = virtualinvoke r6.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <de.rub.nds.tlsattacker.core.util.BasicTlsServer: void <init>(java.security.KeyStore,java.lang.String,java.lang.String,int)>
		SHA-256: d6353a9430b711b3bbcd3c85b9ef71f4efc69cd22d9ddbd68f6cbad981e9cbc3
		Secure: false
	Object:
		Variable: r6
		Type: javax.net.ssl.TrustManagerFactory
		Statement: r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer2324)
		Method: <de.rub.nds.tlsattacker.core.util.BasicTlsServer: void <init>(java.security.KeyStore,java.lang.String,java.lang.String,int)>
		SHA-256: 84d71046fd426ad702a25d349eacd68ff9570f7e8c1d304db7a1244e41e5cc5a
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyPair
		Statement: r2 = virtualinvoke r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <de.rub.nds.tlsattacker.core.util.KeyStoreGenerator: java.security.KeyPair createECKeyPair(int,de.rub.nds.modifiablevariable.util.BadRandom)>
		SHA-256: 51fb87380c6c543f2b52e7a609c2979c245c19684e859dd0237d302b6e12dccb
		Secure: true
	Object:
		Variable: $r9
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r9)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] decrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: d8e02d99c620444f9cc5e951b459eb4e207a2501483b1ebbdecd01c946cff809
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r10.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] decrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: fd1d535ff276b1aec789a5115915742fa38a63dbd52af943fec249d22ef1f81e
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r18 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[])>
		SHA-256: 74566b18294730e2c5ce2479612297a4471798354248525e406a43589d5deb3
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.Mac
		Statement: $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r4)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeyBlockParser: int getMacLength()>
		SHA-256: e0a5d33b92f41b09d331916475f1ed87aecaba7af426ffe01e1e46c7e690cf06
		Secure: false
	Object:
		Variable: r5
		Type: java.security.MessageDigest
		Statement: r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2531)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.SrpServerKeyExchangePreparator: byte[] SHAsum(byte[])>
		SHA-256: 83a331d853bf7d65128bbf49cd5d375934670a451f451c46ee1453d5541ed7f4
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r11)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[])>
		SHA-256: 3c9f5f9b6a79c89daf698229f5ac4820b0cc60d9fd67c7cd204d7139fbab0f17
		Secure: false
	Object:
		Variable: $r11
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r7, $r11)
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] extract(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[])>
		SHA-256: 3d700aa7b98bb78bc58fe4b432b586b8490f96bec7aeef691584807209002abb
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r8.<java.security.Signature: byte[] sign()>()
		Method: <de.rub.nds.tlsattacker.core.crypto.SignatureCalculator: byte[] generateSignature(java.security.PrivateKey,byte[],de.rub.nds.tlsattacker.core.constants.SignatureAndHashAlgorithm,de.rub.nds.modifiablevariable.util.BadRandom)>
		SHA-256: 25ae3c7de4f0a19f2e0b7f7365f4ed17c7c394ab3607a24d23673105386ba78d
		Secure: false
	Object:
		Variable: $r22
		Type: java.lang.String
		Statement: specialinvoke $r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r20, $r22)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordBlockCipher: void <init>(de.rub.nds.tlsattacker.core.state.TlsContext,de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySet)>
		SHA-256: f4b4f17648980d3a696a819ba771238b52185558586908b1fb056f587eddb34f
		Secure: false
	Object:
		Variable: $r73
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r73.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r91, $r74)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.FinishedPreparator: byte[] computeVerifyData()>
		SHA-256: fdf4900c82fccb75a9b241cde3bba41817ee992e9a84aaf3feb3a25915dcac77
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[])>
		SHA-256: d8d1fee18f481eecff7c2ad268ab741acab7e964c1dbe04a8fce3f513d186cea
		Secure: false
	Object:
		Variable: $r13
		Type: javax.crypto.Mac
		Statement: $r13 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r12)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordStreamCipher: void initCipherAndMac()>
		SHA-256: db01c2c3f72fb9a7fe6a063106b15e47d23f1efbc6a3eb7857c9001e2bd04768
		Secure: false
	Object:
		Variable: r18
		Type: byte[]
		Statement: r18 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],byte[])>
		SHA-256: b6879ced236148d964ce4dbf2e4a4ec7f8f7e54c718af682a2d9627e57762429
		Secure: false
	Object:
		Variable: $r11
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r11)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[])>
		SHA-256: 2bc577321750a3bde0f838df31d804a15af99b32b09a888ce6b485e33777cf7d
		Secure: false
	Object:
		Variable: r4
		Type: byte[]
		Statement: r20 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r4)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: 6417ff995261baf267f60983a0ca7f6538ac80fcd1dda8aa4d0aa714f7987a9a
		Secure: false
	Object:
		Variable: $r14
		Type: javax.crypto.Mac
		Statement: $r14 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r13)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordBlockCipher: void <init>(de.rub.nds.tlsattacker.core.state.TlsContext,de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySet)>
		SHA-256: e8ec68b077fafec589f43d7ea856144ef2c36e865afca1af1ec61ad81ab2bfe
		Secure: false
	Object:
		Variable: $r17
		Type: javax.crypto.Mac
		Statement: $r17 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r16)
		Method: <de.rub.nds.tlsattacker.core.protocol.handler.ServerHelloHandler: void adjustHandshakeTrafficSecrets()>
		SHA-256: e4e2c92d13747836ef376fcd3cd673249c45792a75bf7dea7276d8ca437e34e8
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r9)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] decrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: ccfda8e562f87b549854296e1d7c0a29c4e4b5abd090695a26880a81c8a94e3f
		Secure: false
	Object:
		Variable: r28
		Type: javax.crypto.Mac
		Statement: r28 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.PseudoRandomFunction: byte[] computeTls12(byte[],java.lang.String,byte[],int,java.lang.String)>
		SHA-256: ea42cb4653669c5970616dc287356a4127930fa6cb67f917457bb49b254861aa
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.GCMParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(i0, r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: 70a60e645c3c82075c87109cdd0d972e9905c5231c971867f359d8cb70ed3ebe
		Secure: false
	Object:
		Variable: r22
		Type: byte[]
		Statement: r22 = virtualinvoke r21.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] decrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: a7aeaefe04c8607a5dfaf7a726caf7d6c5da20833e59c48fa5e1e82816becdf6
		Secure: false
	Object:
		Variable: r8
		Type: byte[]
		Statement: r9 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest(byte[])>(r8)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMac(byte[],byte[],de.rub.nds.tlsattacker.core.constants.MacAlgorithm)>
		SHA-256: 5aaac99def2cda51b63c4d9d08592309788f11db31784bbe7dea8e3780a3072d
		Secure: false
	Object:
		Variable: $r74
		Type: java.lang.String
		Statement: specialinvoke $r73.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r91, $r74)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.FinishedPreparator: byte[] computeVerifyData()>
		SHA-256: c67cdc59a6e076c7f55c3871b5b27afb356e1eb8a8dd7e5f52dde84ae04c1e7f
		Secure: false
	Object:
		Variable: r16
		Type: byte[]
		Statement: r16 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r15)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] encrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: 5589bd348791f23cffa25e7ce4190a0fd84520e4430bccd0a50f98fb4af1716a
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],byte[])>
		SHA-256: 18a12510eec039a04b3cc695e2bd263607f24cce6eacb3415ca1d086f23c5cce
		Secure: false
	Object:
		Variable: r15
		Type: byte[]
		Statement: r16 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r15)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] encrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: 14b0a56cb26b44aaf487c817671e5a51353dfb9c785197eb30d494ccd36c777f
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r11)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[])>
		SHA-256: 3290acc794acbf527784f76e13cad9b437137d80d8108ee37d5567ab6cd8e052
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r10)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] encrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: cb4b345e368110afea168792b445f18c4e44d74901248cfb9129f5bfbb1eefa
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.DHParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.keys.CustomDHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>
		SHA-256: d242622cc6aa0b991c25145e538f7331377c2ad9f228c2a787e7aecb7eb47e6d
		Secure: true
	Object:
		Variable: $r34
		Type: java.lang.String
		Statement: specialinvoke $r33.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r9, $r34)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.extension.PreSharedKeyExtensionPreparator: void calculateBinders(byte[],de.rub.nds.tlsattacker.core.protocol.message.extension.PreSharedKeyExtensionMessage)>
		SHA-256: efbf8e173a8be46a043f37684719870ff45064c24084047c2ed928605d1e193
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2654)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: 6cb14b02f22c3bfd96c755d6addef05d35239fb348da6daf390f6d6a4e91d397
		Secure: false
	Object:
		Variable: $r16
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.PseudoRandomFunction: byte[] computeTls12(byte[],java.lang.String,byte[],int,java.lang.String)>
		SHA-256: 444f931c9af16d7a32a5b026219ba6b20ec52ea55f504ad13e69536ad43af1d1
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],byte[])>
		SHA-256: 243bca454e2be794db605d26d575c3cc9d3fcbc99cddd699a1b997cf9c868610
		Secure: false
	Object:
		Variable: r7
		Type: byte[]
		Statement: r9 = virtualinvoke r23.<java.security.MessageDigest: byte[] digest(byte[])>(r7)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: 3ac8f9e40d3763a8901a937c156f7f7e5c7cb34186b943be05d60ba6613720b8
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r9)
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] expand(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[],int)>
		SHA-256: 125a45086bc55eb2753f9e38b1646fc40ce02ceaa3b0a533c5c3d2a7caa35a87
		Secure: false
	Object:
		Variable: r9
		Type: byte[]
		Statement: r9 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest(byte[])>(r8)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMac(byte[],byte[],de.rub.nds.tlsattacker.core.constants.MacAlgorithm)>
		SHA-256: 85b8041dbba5fa60862c6b331932a4bda25b143488e309729d6537f2c513f8d2
		Secure: false
	Object:
		Variable: $r17
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r20, $r22)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordBlockCipher: void <init>(de.rub.nds.tlsattacker.core.state.TlsContext,de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySet)>
		SHA-256: ab8eed28b1340cd24607787e29724d4bfd2170d769e0e829809c2a4439ab7eff
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPairGenerator
		Statement: r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer5214)
		Method: <de.rub.nds.tlsattacker.core.util.KeyStoreGenerator: java.security.KeyPair createECKeyPair(int,de.rub.nds.modifiablevariable.util.BadRandom)>
		SHA-256: deb18dd37f62e4632a85eec9968e51d75ccbb5d688dc7b738bb283f077ae03df
		Secure: true
	Object:
		Variable: r19
		Type: byte[]
		Statement: r19 = virtualinvoke r18.<java.security.MessageDigest: byte[] digest()>()
		Method: <de.rub.nds.tlsattacker.core.crypto.MessageDigestCollector: byte[] digest(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)>
		SHA-256: 94883b42665a0877c9278a10dcea152a4124d09ede997cade4de329bad3246f6
		Secure: true
	Object:
		Variable: r3
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r10, r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.PseudoRandomFunction: byte[] computeTls12(byte[],java.lang.String,byte[],int,java.lang.String)>
		SHA-256: d94d1a080d99e73fbf89152cb9514a7588c947cd133768fdb1fe6017dbc7397b
		Secure: false
	Object:
		Variable: r20
		Type: byte[]
		Statement: r20 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r4)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: 6201339b19c9cad151300eed62f784321bbc0ee8bdf49d21edfbea126a56ecaf
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],byte[])>
		SHA-256: 64ccf055c581760687af3d544bb62c0417fdd62ce34cff10cce46f0a4692a9c1
		Secure: false
	Object:
		Variable: r9
		Type: byte[]
		Statement: r9 = virtualinvoke r23.<java.security.MessageDigest: byte[] digest(byte[])>(r7)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: a82ba7a1be1f2ccf4a2b57da1321afa13f849f5c7b7c06ec0d1f499e234dfaaf
		Secure: false
	Object:
		Variable: r18
		Type: byte[]
		Statement: r18 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],byte[])>
		SHA-256: 352d9269bad13a13391da537360705f254df544f46d0f5f8c1929bf84a3731df
		Secure: false
	Object:
		Variable: r10
		Type: byte[]
		Statement: r10 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest(byte[])>(r8)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: 6eff757eebcaf17a764caf89587fd89f5dc5c727dff3a4d38b5cc83166da1b6d
		Secure: false
	Object:
		Variable: r18
		Type: byte[]
		Statement: r18 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[])>
		SHA-256: 352d9269bad13a13391da537360705f254df544f46d0f5f8c1929bf84a3731df
		Secure: false
	Object:
		Variable: r7
		Type: byte[]
		Statement: r7 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest(byte[])>(r6)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMac(byte[],byte[],de.rub.nds.tlsattacker.core.constants.MacAlgorithm)>
		SHA-256: ae0d71361eb4da19a68ffc9523f4c841e3cae2e009d48c79c3ebbed7b1170f14
		Secure: false
	Object:
		Variable: r6
		Type: byte[]
		Statement: r7 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest(byte[])>(r6)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMac(byte[],byte[],de.rub.nds.tlsattacker.core.constants.MacAlgorithm)>
		SHA-256: 9a1a26b01f17878e1134a2a57c8a5e98790497d747b58d09b1a954cb074a968f
		Secure: false
	Object:
		Variable: $r16
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r19, $r21)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordStreamCipher: void initCipherAndMac()>
		SHA-256: 55652542bb62267691512843b240a061a3c6b5e0f108e44653841814fcd625e7
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] encrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: 405ebc3943019a4aba5e7871f8bf3e36f98272e0dc5fcc482cbbc8d88ca259a5
		Secure: false
	Object:
		Variable: r3
		Type: java.lang.String
		Statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.PseudoRandomFunction: byte[] computeTls12(byte[],java.lang.String,byte[],int,java.lang.String)>
		SHA-256: 19d01041bbd831daa770afd967f5ccd561e986b52dc057c56e93425c48256d95
		Secure: false
	Object:
		Variable: $r12
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[])>
		SHA-256: 48b7a7060a5c9f91380b3178187a82b45de03b841f025604fd46469456841c4c
		Secure: false
	Object:
		Variable: $r22
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r25, $r27)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.RecordStreamCipher: void initCipherAndMac()>
		SHA-256: 89a8001d7a7107a6363f266aee9f2dcf30beac819130e843912a898052bba2c4
		Secure: false
	Object:
		Variable: $r17
		Type: javax.crypto.Mac
		Statement: $r17 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r16)
		Method: <de.rub.nds.tlsattacker.core.protocol.handler.NewSessionTicketHandler: byte[] derivePsk(de.rub.nds.tlsattacker.core.protocol.message.NewSessionTicketMessage)>
		SHA-256: e812f8da855e238daf7899baf1212aad2de5eab689f9e44f9446d87d0ee2f9f5
		Secure: false
	Object:
		Variable: r110
		Type: java.security.MessageDigest
		Statement: r110 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1432)
		Method: <de.rub.nds.tlsattacker.core.tokenbinding.TokenBindingMessagePreparator: void prepareProtocolMessageContents()>
		SHA-256: f9479cce7710a552c4ac7ae7057fddce0b8a07e3de00c354d46d43ac4e39c110
		Secure: true
	Object:
		Variable: r15
		Type: byte[]
		Statement: r15 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[])>
		SHA-256: 2ba727b088cbba66a16c3357009bc5fb026cfd565a03bbf9c56baec1677022bd
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r6)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[])>
		SHA-256: 2697aac999097587d2554e8afa1bf5d6259dc3371ba77cea5d2e81053fc36f67
		Secure: false
	Object:
		Variable: r20
		Type: byte[]
		Statement: r20 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r4)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: e4b89878fbc88ed8843a63a1e7f7d0ca8edbfc401a6a479151342934184ad7a0
		Secure: false
	Object:
		Variable: r4
		Type: byte[]
		Statement: r20 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r4)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: b3a9ca3838d55170b1693e75978f9604a89a9002cdc83238a2600a7876b5d186
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.SrpClientKeyExchangePreparator: byte[] SHAsum(byte[])>
		SHA-256: b652060f5c602b82c12bd65b765b1304e77f525cd7c87313a5016747b0470af3
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.Cipher
		Statement: $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: ac2c582949a0381f3124c05364857feb2aeb89c2ea9d7391a6517d4955087042
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.GCMParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(i0, r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[])>
		SHA-256: 139cbfe208c0611bd718638be77255717c8bfb18beae655dd795b47eb29a5ff4
		Secure: false
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r12 = virtualinvoke r8.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] extract(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[])>
		SHA-256: 37367e8d1d66f019c6c225ab9b73b48d457018b18c0387a1274baf90bf3f6437
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: r5 = virtualinvoke r12.<java.security.MessageDigest: byte[] digest()>()
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] deriveSecret(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,java.lang.String,byte[],java.lang.String,byte[])>
		SHA-256: 7bf0ba166b95bb7b0ebbeea998c4d6f04c6bee5979340bfa4aaa699d1afb5649
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: r15 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[])>
		SHA-256: 126736acb1971cc5875b960668c5f66267f83d55ff70ea0ce03ede5b5388e5e5
		Secure: false
	Object:
		Variable: $r12
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[])>
		SHA-256: 4d27a4bbb2bdd427f379cfad1c00bf71249a66e543e41a117f9449285aa6414e
		Secure: false
	Object:
		Variable: r4
		Type: byte[]
		Statement: r4 = virtualinvoke r17.<java.security.MessageDigest: byte[] digest()>()
		Method: <de.rub.nds.tlsattacker.core.crypto.MessageDigestCollector: byte[] digest(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)>
		SHA-256: 96562da9598344e8e77c45b4aab21efbd3f6a67364424b980ee1cdebc1f4ab42
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Mac
		Statement: r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r4)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySetGenerator: int getBlockSecretSetSize(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)>
		SHA-256: 182b1c1adfca682ee4e3e663520d17cb2b258ee87b3556be0ce2ad8d8ba1e9c9
		Secure: false
	Object:
		Variable: $r9
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r9)
		Method: <de.rub.nds.tlsattacker.core.crypto.HKDFunction: byte[] expand(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[],int)>
		SHA-256: ca38cebb2a5b794531781b2b5f932fbc74b2c2be936c5cf141a891a5c4cdb00b
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],byte[])>
		SHA-256: 36ee00169c52ec3b5707719218bac76fc1e42ef6979df18da0b6ab4dffb6de30
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: r22 = virtualinvoke r21.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] decrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: 8791755d0880541a03b4b1064845579ca86c6c78630aec04032dad7abae984e
		Secure: false
	Object:
		Variable: $r11
		Type: javax.net.ssl.SSLContext
		Statement: $r11 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r3)
		Method: <de.rub.nds.tlsattacker.core.util.BasicTlsServer: void <init>(java.security.KeyStore,java.lang.String,java.lang.String,int)>
		SHA-256: 3b59174ec7ced266aebc3dbced24ee7f46dbe076a5ad73283ab9889937e6be1a
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r6)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] generateHMAC(de.rub.nds.tlsattacker.core.constants.MacAlgorithm,byte[],byte[])>
		SHA-256: 718e10d1500cc35885233ef2cbcfa67295cb26d0f6a6e4b5616bc5ace8512989
		Secure: false
	Object:
		Variable: $r10
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r10)
		Method: <de.rub.nds.tlsattacker.core.util.StaticTicketCrypto: byte[] encrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])>
		SHA-256: db396a059ea5f34a0a553a82edab30919b23749b0de8988b95e1d6bf5131c5cc
		Secure: false
	Object:
		Variable: r8
		Type: byte[]
		Statement: r10 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest(byte[])>(r8)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: 21f0f3f09592840eb92dfe4908787fc1dd364034d19de966b32f6c16bccbc845
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r13)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: 23885ee97389b384cd34a3d8793f49f4d11ee9eb6341e53594dfebd3c8cd6371
		Secure: false
	Object:
		Variable: r15
		Type: byte[]
		Statement: r15 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[])>
		SHA-256: a47cae260f04930f612c05d49c34f4e7eebcfb546cc6af00def94583ab030b2e
		Secure: false
	Object:
		Variable: r18
		Type: java.security.MessageDigest
		Statement: r18 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r7)
		Method: <de.rub.nds.tlsattacker.core.crypto.MessageDigestCollector: byte[] digest(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)>
		SHA-256: 742de20de67ce6fca919b2f2f0f914545008ca0bb172c91e66cf814f5ee63c1d
		Secure: true
	Object:
		Variable: $r11
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r11)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[])>
		SHA-256: 6b4c9e8ea9ade58e19da31292575de34e13acba31a8f22f5e73ab0c74584a862
		Secure: false
	Object:
		Variable: r8
		Type: java.security.AlgorithmParameters
		Statement: r8 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>(varReplacer432)
		Method: <de.rub.nds.tlsattacker.core.crypto.keys.CustomECPrivateKey: java.security.spec.ECParameterSpec getParams()>
		SHA-256: dd6ebec8958213444db25995ee996e5159b6609f74b0cd104dca5c0a13a73c03
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r18 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] encrypt(byte[],byte[],int,byte[])>
		SHA-256: 911bae8a3fef8347486cf75362aed0962258f0f1942c84e7f1bb6c37c216adcf
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Mac
		Statement: r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySetGenerator: int getStreamSecretSetSize(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)>
		SHA-256: 92f35c1fa6390b5d7707de78900e78a4782f3c48aa2078a692001196be9784ee
		Secure: false
	Object:
		Variable: r5
		Type: javax.net.ssl.KeyManager[]
		Statement: r5 = virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <de.rub.nds.tlsattacker.core.util.BasicTlsServer: void <init>(java.security.KeyStore,java.lang.String,java.lang.String,int)>
		SHA-256: d39380e08c9967d6f58f3da59bea670a97b5ddbe43d554db13d8f7fca7dd4dc6
		Secure: false
	Object:
		Variable: r5
		Type: java.security.MessageDigest
		Statement: r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer106)
		Method: <de.rub.nds.tlsattacker.core.protocol.preparator.SrpClientKeyExchangePreparator: byte[] SHAsum(byte[])>
		SHA-256: 41c94cfb8f02b5b9eac8a4825c2c82dc1e8b42e5c7040f95fee988a9f17897f4
		Secure: false
	Object:
		Variable: r8
		Type: java.security.Signature
		Statement: r8 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r4)
		Method: <de.rub.nds.tlsattacker.core.crypto.SignatureCalculator: byte[] generateSignature(java.security.PrivateKey,byte[],de.rub.nds.tlsattacker.core.constants.SignatureAndHashAlgorithm,de.rub.nds.modifiablevariable.util.BadRandom)>
		SHA-256: c3aa91a90b8b9804ddbf8e1c723c932582bcedefdd68baf36bba238c7cb35053
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.GCMParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(i0, r2)
		Method: <de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher: byte[] decrypt(byte[],byte[],int,byte[],byte[])>
		SHA-256: bafddab9abaad441a6854d21fc739630e49e32425ffab84a78808e8e896e0efd
		Secure: false
	Object:
		Variable: r14
		Type: java.security.KeyStore
		Statement: r14 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer5223)
		Method: <de.rub.nds.tlsattacker.core.util.KeyStoreGenerator: java.security.KeyStore createKeyStore(java.security.KeyPair,de.rub.nds.modifiablevariable.util.BadRandom)>
		SHA-256: b3e89d7831b2060e21fee0921b8287ef9529422b641313aa7592f49541a54372
		Secure: true
	Object:
		Variable: r6
		Type: byte[]
		Statement: r6 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest(byte[])>(r4)
		Method: <de.rub.nds.tlsattacker.core.crypto.SSLUtils: byte[] calculateSSLMd5SHASignature(byte[],byte[])>
		SHA-256: 2f3b47b4a2353555da174fd106f088d3c40c991b78bb5db0af60db07fae58ea
		Secure: false

Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.preparator.SrpClientKeyExchangePreparator

	 in Method: byte[] SHAsum(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #41c94cfb8f02b5b9eac8a4825c2c82dc1e8b42e5c7040f95fee988a9f17897f4)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer106)


Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.handler.NewSessionTicketHandler

	 in Method: byte[] derivePsk(de.rub.nds.tlsattacker.core.protocol.message.NewSessionTicketMessage)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e812f8da855e238daf7899baf1212aad2de5eab689f9e44f9446d87d0ee2f9f5)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: i0 = virtualinvoke $r17.<javax.crypto.Mac: int getMacLength()>()


Findings in Java Class: de.rub.nds.tlsattacker.core.crypto.keys.CustomECPrivateKey

	 in Method: java.security.spec.ECParameterSpec getParams()
		ConstraintError violating CrySL rule for java.security.AlgorithmParameters (on Object #dd6ebec8958213444db25995ee996e5159b6609f74b0cd104dca5c0a13a73c03)
			First parameter (with value "EC") should be any of {AES, Blowfish, DESede, DiffieHellman, OEAP, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r8 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>(varReplacer432)


Findings in Java Class: de.rub.nds.tlsattacker.core.crypto.MessageDigestCollector

	 in Method: byte[] digest(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #d969688da3395a8479b5000610f27aaa912843ad99964919824cfe18a80c8d29)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r18 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer436)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #34a5a2be8b9f8cab693af6ce15ec4e75330d2c831e142318fa25851c312602e6)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to update, java.security.MessageDigest: byte[] digest(byte[])
			at statement: r4 = virtualinvoke r17.<java.security.MessageDigest: byte[] digest()>()

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #34a5a2be8b9f8cab693af6ce15ec4e75330d2c831e142318fa25851c312602e6)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer437)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #34a5a2be8b9f8cab693af6ce15ec4e75330d2c831e142318fa25851c312602e6)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer437)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #34a5a2be8b9f8cab693af6ce15ec4e75330d2c831e142318fa25851c312602e6)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: r17 = null


Findings in Java Class: de.rub.nds.tlsattacker.core.crypto.HKDFunction

	 in Method: byte[] expand(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[],int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #6336434c2dea3472f1a5f70819765597f0fb0fe3d73efca93bf6b401c0deaaf7)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to javax.crypto.Mac: void doFinal(byte[],int), javax.crypto.Mac: byte[] doFinal(byte[]), update, javax.crypto.Mac: byte[] doFinal()
			at statement: r27 = virtualinvoke r26.<javax.crypto.Mac: byte[] doFinal()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #6336434c2dea3472f1a5f70819765597f0fb0fe3d73efca93bf6b401c0deaaf7)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: virtualinvoke r26.<javax.crypto.Mac: void init(java.security.Key)>(r3)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #6336434c2dea3472f1a5f70819765597f0fb0fe3d73efca93bf6b401c0deaaf7)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke r26.<javax.crypto.Mac: void update(byte[])>(r27)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r9)


	 in Method: byte[] deriveSecret(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,java.lang.String,byte[],java.lang.String,byte[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #23d1e204763ba02352b719deed5d402aed2163b1c63025e979593d4b93b0d0be)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: i0 = virtualinvoke $r8.<javax.crypto.Mac: int getMacLength()>()


	 in Method: byte[] extract(de.rub.nds.tlsattacker.core.constants.HKDFAlgorithm,byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r7, $r11)


Findings in Java Class: de.rub.nds.tlsattacker.core.util.BasicTlsClient

	 in Method: javax.net.ssl.SSLContext getAllowAllContext()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer736, r10, r11)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer736, r10, r11)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #7aa6662113e672c474b2767d9af672f3e53b71752562ba8847fd6dbd11e8308e)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer737)


Findings in Java Class: de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeyBlockParser

	 in Method: int getMacLength()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e0a5d33b92f41b09d331916475f1ed87aecaba7af426ffe01e1e46c7e690cf06)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $i0 = virtualinvoke $r5.<javax.crypto.Mac: int getMacLength()>()


	 in Method: int getBlockSize()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #fc3c45e4c4106727a29005e684b2ce6b2161235e1984659b087bd3a0b4309239)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $i0 = virtualinvoke $r4.<javax.crypto.Cipher: int getBlockSize()>()


Findings in Java Class: de.rub.nds.tlsattacker.core.record.cipher.RecordStreamCipher

	 in Method: void initCipherAndMac()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #41c3e786f1eb4daf84a2428d8bf0d1e9d46efd844720aaeecd69b337c7ea87b4)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $r15 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r14)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r19, $r21)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #db01c2c3f72fb9a7fe6a063106b15e47d23f1efbc6a3eb7857c9001e2bd04768)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: virtualinvoke $r17.<javax.crypto.Mac: void init(java.security.Key)>($r16)


Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.preparator.RSAClientKeyExchangePreparator

	 in Method: java.security.interfaces.RSAPublicKey generateFreshKey()
		TypestateError violating CrySL rule for java.security.KeyPairGenerator (on Object #147cf4176eb55360bbff5425a7addf8be80439b5d347f35d52b7e059bd3e102e)
			Unexpected call to method genKeyPair on object of type java.security.KeyPairGenerator. Expect a call to one of the following methods initialize
			at statement: $r2 = virtualinvoke r7.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>()


Findings in Java Class: de.rub.nds.tlsattacker.core.record.cipher.RecordBlockCipher

	 in Method: void <init>(de.rub.nds.tlsattacker.core.state.TlsContext,de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySet)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #38154c78699568469cbb3abfefef36d764c1c370b0f357a6b296c874e5d5d029)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $r16 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r15)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e8ec68b077fafec589f43d7ea856144ef2c36e865afca1af1ec61ad81ab2bfe)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: virtualinvoke $r18.<javax.crypto.Mac: void init(java.security.Key)>($r17)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r20, $r22)


Findings in Java Class: de.rub.nds.tlsattacker.core.util.BasicTlsServer

	 in Method: void <init>(java.security.KeyStore,java.lang.String,java.lang.String,int)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r6.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r1)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r1, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r13.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r5, r7, r45)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r13.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r5, r7, r45)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #4a0899b73d8d7ea9fd746ef5c96e11418f646fee5798063f3fdb00b0751f8c55)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r1, $r10)


Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.preparator.SrpServerKeyExchangePreparator

	 in Method: byte[] SHAsum(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #83a331d853bf7d65128bbf49cd5d375934670a451f451c46ee1453d5541ed7f4)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2531)


Findings in Java Class: de.rub.nds.tlsattacker.core.crypto.SSLUtils

	 in Method: byte[] calculateSSLMac(byte[],byte[],de.rub.nds.tlsattacker.core.constants.MacAlgorithm)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #ef14e9fa3fcbfa2288e8ba6df77188873e401d6acb30285c8f0a78793a5115fa)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r17)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #ef14e9fa3fcbfa2288e8ba6df77188873e401d6acb30285c8f0a78793a5115fa)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r17)


	 in Method: byte[] calculateSSLMd5SHASignature(byte[],byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #590f28be38ebf6d6a3d3c86a81ec32d4ed8f1223886fa94d70f9a671d8bf6466)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r23 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2653)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #6cb14b02f22c3bfd96c755d6addef05d35239fb348da6daf390f6d6a4e91d397)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2654)


Findings in Java Class: de.rub.nds.tlsattacker.core.crypto.PseudoRandomFunction

	 in Method: byte[] computeTls12(byte[],java.lang.String,byte[],int,java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #ea42cb4653669c5970616dc287356a4127930fa6cb67f917457bb49b254861aa)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: virtualinvoke r28.<javax.crypto.Mac: void init(java.security.Key)>(r24)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #ea42cb4653669c5970616dc287356a4127930fa6cb67f917457bb49b254861aa)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to javax.crypto.Mac: void doFinal(byte[],int), javax.crypto.Mac: byte[] doFinal(byte[]), update, javax.crypto.Mac: byte[] doFinal()
			at statement: r5 = virtualinvoke r28.<javax.crypto.Mac: byte[] doFinal()>()

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #ea42cb4653669c5970616dc287356a4127930fa6cb67f917457bb49b254861aa)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke r28.<javax.crypto.Mac: void update(byte[])>(r30)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, r3)


Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.handler.ServerHelloHandler

	 in Method: void adjustHandshakeTrafficSecrets()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #e4e2c92d13747836ef376fcd3cd673249c45792a75bf7dea7276d8ca437e34e8)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: i2 = virtualinvoke $r17.<javax.crypto.Mac: int getMacLength()>()


Findings in Java Class: de.rub.nds.tlsattacker.core.crypto.cipher.JavaCipher

	 in Method: byte[] decrypt(byte[],byte[])
		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4226, $r8)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r11)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4226, $r8)


	 in Method: byte[] encrypt(byte[],byte[],int,byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4223, $r10, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared G C M
			at statement: virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4223, $r10, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r13)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.GCMParameterSpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(i0, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4223, $r10, r5)


	 in Method: byte[] decrypt(byte[],byte[],int,byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.GCMParameterSpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(i0, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared G C M
			at statement: virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4230, $r10, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4230, $r10, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r13)


	 in Method: byte[] decrypt(byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4224, $r9, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared G C M
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4224, $r9, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)


	 in Method: byte[] encrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r11)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4218, $r8)


	 in Method: byte[] encrypt(byte[],byte[],int,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4220, $r9, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.GCMParameterSpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(i0, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared G C M
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4220, $r9, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4220, $r9, r4)


	 in Method: byte[] encrypt(byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared G C M
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4217, $r9, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4217, $r9, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4217, $r9, r4)


	 in Method: byte[] decrypt(byte[],byte[],int,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r12)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared G C M
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4229, $r9, r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.GCMParameterSpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(i0, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4229, $r9, r4)


Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.preparator.extension.PSKBinderPreparator

	 in Method: void prepareBinderValue()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #ff9968bd42b83936c6ea98319094666c9c1200c445ddd4b694392646bea5711d)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: i0 = virtualinvoke $r5.<javax.crypto.Mac: int getMacLength()>()


Findings in Java Class: de.rub.nds.tlsattacker.core.record.cipher.cryptohelper.KeySetGenerator

	 in Method: int getBlockSecretSetSize(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #182b1c1adfca682ee4e3e663520d17cb2b258ee87b3556be0ce2ad8d8ba1e9c9)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $i2 = virtualinvoke r3.<javax.crypto.Mac: int getMacLength()>()


	 in Method: int getStreamSecretSetSize(de.rub.nds.tlsattacker.core.constants.ProtocolVersion,de.rub.nds.tlsattacker.core.constants.CipherSuite)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #92f35c1fa6390b5d7707de78900e78a4782f3c48aa2078a692001196be9784ee)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: $i5 = virtualinvoke r4.<javax.crypto.Mac: int getMacLength()>()


Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.handler.FinishedHandler

	 in Method: void adjustApplicationTrafficSecrets()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #f2a5db4a801fa92ed2e853f4fb14f78c6fbc48e23ad2a9dacecea2e54202e6fa)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to init
			at statement: i0 = virtualinvoke $r18.<javax.crypto.Mac: int getMacLength()>()


Findings in Java Class: de.rub.nds.tlsattacker.core.util.StaticTicketCrypto

	 in Method: byte[] decrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r10.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared G C M
			at statement: virtualinvoke r21.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer200, r5, r6)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r9)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r21.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer200, r5, r6)


	 in Method: byte[] encrypt(de.rub.nds.tlsattacker.core.constants.CipherAlgorithm,byte[],byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer198, r6, r7)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer198, r6, r7)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared G C M
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer198, r6, r7)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r10)


	 in Method: byte[] generateHMAC(de.rub.nds.tlsattacker.core.constants.MacAlgorithm,byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, $r6)


Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.preparator.extension.PreSharedKeyExtensionPreparator

	 in Method: void calculateBinders(byte[],de.rub.nds.tlsattacker.core.protocol.message.extension.PreSharedKeyExtensionMessage)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r33.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r9, $r34)


Findings in Java Class: de.rub.nds.tlsattacker.core.protocol.preparator.FinishedPreparator

	 in Method: byte[] computeVerifyData()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r73.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r91, $r74)


Findings in Java Class: de.rub.nds.tlsattacker.core.crypto.SignatureCalculator

	 in Method: byte[] generateSignature(java.security.PrivateKey,byte[],de.rub.nds.tlsattacker.core.constants.SignatureAndHashAlgorithm,de.rub.nds.modifiablevariable.util.BadRandom)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r8.<java.security.Signature: void initSign(java.security.PrivateKey,java.security.SecureRandom)>(r0, r11)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 150

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 1
	IncompleteOperationError: 20
	RequiredPredicateError: 55
	TypestateError: 3
	ConstraintError: 10
	ForbiddenMethodError: 1
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 3 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 6.493 s
