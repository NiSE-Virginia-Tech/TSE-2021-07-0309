
Current Proejct: /home/x/CryptoAPIDetect/dataset/MUBench/ijpay/target/IJPay.jar
[main] INFO crypto.HeadlessCryptoScanner - Using call graph algorithm CHA
[main] INFO crypto.HeadlessCryptoScanner - Analysis soot setup done in 467.0 ms 
[main] INFO crypto.analysis.CryptoScanner - Searching fo Seeds for analysis!
[main] INFO crypto.analysis.CryptoScanner - Discovered 40 analysis seeds within 0 seconds!
[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 1 of 40
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.03

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 2 of 41
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.05

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 3 of 42
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.07

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 4 of 43
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.09

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 5 of 44
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.11

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 6 of 46
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.13

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 7 of 48
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.15

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 8 of 50
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.16

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 9 of 52
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.17

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 10 of 52
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.19

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 11 of 53
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.21

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 12 of 53
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.23

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 13 of 53
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.25

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 14 of 53
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.26

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 15 of 54
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.28

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 16 of 54
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.3

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 17 of 54
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.31

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 18 of 54
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.33

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 19 of 55
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.35

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 20 of 55
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.36

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 21 of 55
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.38

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 22 of 55
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.4

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 23 of 56
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.41

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 24 of 56
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.43

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 25 of 56
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.45

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 26 of 56
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.46

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 27 of 57
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.47

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 28 of 57
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.49

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 29 of 57
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.51

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 30 of 57
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 31 of 58
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.53

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 32 of 58
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 33 of 58
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 34 of 59
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 35 of 63
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.56

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 36 of 67
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.54

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 37 of 67
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.55

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 38 of 67
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 39 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.57

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 40 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.58

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 41 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.59

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 42 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.61

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 43 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.62

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 44 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.64

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 45 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.65

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 46 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.67

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 47 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.68

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 48 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.7

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 49 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.71

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 50 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.72

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 51 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.74

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 52 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.75

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 53 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.77

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 54 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.78

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 55 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.8

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 56 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.81

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 57 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.83

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 58 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.84

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 59 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.86

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 60 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.87

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 61 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.88

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 62 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.9

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 63 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.91

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 64 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.93

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 65 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.94

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 66 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.96

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 67 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.97

[main] INFO crypto.analysis.CryptoScanner - Analyzed Objects: 68 of 69
[main] INFO crypto.analysis.CryptoScanner - Percentage Completed: 0.99

Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.SSLParameters
	java.security.DigestOutputStream
	java.security.spec.RSAKeyGenParameterSpec
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.SSLEngine
	java.security.cert.PKIXParameters
	javax.net.ssl.TrustManagerFactory
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.SecretKeyFactory
	javax.crypto.CipherOutputStream
	java.security.cert.PKIXBuilderParameters
	javax.crypto.spec.GCMParameterSpec
	java.security.KeyStore
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.SSLContext
	java.security.spec.DSAGenParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.IvParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	java.security.cert.TrustAnchor
	java.security.SecureRandom
	javax.crypto.CipherInputStream
	java.security.Key
	javax.crypto.spec.PBEKeySpec
	javax.crypto.Mac
	void
	javax.crypto.SecretKey
	java.security.Signature
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.KeyPairGenerator
	java.security.DigestInputStream
	java.security.MessageDigest
	java.security.KeyPair
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.DHParameterSpec

Analyzed Objects: 
	Object:
		Variable: r4
		Type: java.security.MessageDigest
		Statement: r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer485)
		Method: <com.jpay.unionpay.SecureUtil: byte[] sha1(byte[])>
		SHA-256: 1219c696c702dde4ebae016657680095998b8facab4d2458a1fe7f4b4f14795f
		Secure: false
	Object:
		Variable: r16
		Type: byte[]
		Statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, $i3)
		Method: <com.jpay.secure.RSAUtils: java.lang.String decryptByPrivateKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: b55cfa7fa07224634c75b8fcddf18df615124920a76b072dc897a27e2fa7251c
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <com.jpay.unionpay.SecureUtil: byte[] decryptData(java.security.PrivateKey,byte[])>
		SHA-256: 5512cc7c9cfa4f6bf1b9f72d66804fed5bc8b8545b8eb4bd58bff91302501215
		Secure: false
	Object:
		Variable: r13
		Type: java.security.SecureRandom
		Statement: specialinvoke r13.<java.security.SecureRandom: void <init>()>()
		Method: <com.jpay.ext.kit.HttpKit: javax.net.ssl.SSLSocketFactory initSSLSocketFactory()>
		SHA-256: 16fd6065a7868743057c31d110431681d15bcc1cb429ce1725e16af6c8019548
		Secure: true
	Object:
		Variable: r8
		Type: javax.crypto.Cipher
		Statement: r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r2)
		Method: <com.jpay.secure.RSAUtils: java.lang.String decryptByPrivateKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: f9b58857688c3010ef11e8d847954ebe1fddf46f1960ee5aee3cc40814ca291b
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.jpay.ext.kit.HashKit: void <clinit>()>
		SHA-256: 38f34173a0bb82680bb0924532aa6dc3d3178bb71186423d35e3cdb08ebd5722
		Secure: true
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer508, varReplacer509)
		Method: <com.jpay.unionpay.SecureUtil: byte[] encryptData(java.security.PublicKey,byte[])>
		SHA-256: dd49fb27e7412606103bd546617c901f28c30ec6f97a53ccd90c6c9dced7ce07
		Secure: false
	Object:
		Variable: r10
		Type: javax.net.ssl.KeyManager[]
		Statement: r10 = virtualinvoke r9.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: 376b55aca4ea85e2eaa828206cd165917dbe260131b4fe5524a96ba10a04bc94
		Secure: false
	Object:
		Variable: r42
		Type: java.security.KeyStore
		Statement: r42 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer760)
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: 2e9f3d6c43527e2c48ad5b013470a1c35a0960f0dbeb92ce2460d52227c9bdb3
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: $r2 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <com.jpay.unionpay.SecureUtil: byte[] decryptData(java.security.PrivateKey,byte[])>
		SHA-256: dbae87213af7ec517eaa4d4dfb6a77b3c414b05c2b8c62daadbd1230919f0b6d
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.jpay.unionpay.SecureUtil: byte[] sha256(byte[])>
		SHA-256: c67d844202a98ddca218a8e790522077a14fb1d78989a9671a7da82fccf3d615
		Secure: true
	Object:
		Variable: r8
		Type: javax.net.ssl.KeyManager[]
		Statement: r8 = virtualinvoke r7.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 896b813ee765986904a1226877e3a7a7c1b68e23dd341d24f1da7f85ebf187d9
		Secure: false
	Object:
		Variable: r9
		Type: javax.net.ssl.KeyManager[]
		Statement: r9 = virtualinvoke r8.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 70c24523ab6bafe47b9407f2633a2cc0d821d7858fb37949f1c33120f82477c0
		Secure: false
	Object:
		Variable: r9
		Type: javax.net.ssl.SSLContext
		Statement: r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer747)
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: d13f342626d6aabf82e5785c93b255829322bebcb60061cc18b67572b166333a
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r3.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <com.jpay.unionpay.SecureUtil: boolean validateSignBySoft(java.security.PublicKey,byte[],byte[])>
		SHA-256: 663b224341826e4602d0f10b405cd3eafda2806c1a68f788f0ef0db3b623123c
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, varReplacer813)
		Method: <com.jpay.secure.RSAUtils: java.lang.String encryptByPublicKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: f6671576e9add0a2044ec4c5e2252ceee6df7c57815565bb3094bcec8bf6e968
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r3 = virtualinvoke r2.<java.security.Signature: byte[] sign()>()
		Method: <com.jpay.unionpay.SecureUtil: byte[] signBySoft256(java.security.PrivateKey,byte[])>
		SHA-256: 2c84949919b996426aee34398dccd44bfc1eb70f213ca04d47bb685b1648dfda
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <com.jpay.unionpay.SecureUtil: byte[] encryptData(java.security.PublicKey,byte[])>
		SHA-256: 57ac12c1983828c0fee84ba71e7df20cfd6ad06a8573f699783b0da25c15b581
		Secure: false
	Object:
		Variable: r3
		Type: java.security.Signature
		Statement: r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(varReplacer503, varReplacer504)
		Method: <com.jpay.unionpay.SecureUtil: boolean validateSignBySoft256(java.security.PublicKey,byte[],byte[])>
		SHA-256: 6812f61560056fcc4c3a738468562fd76d85f0e2fe404c0bab671c0c5ca610ef
		Secure: false
	Object:
		Variable: r24
		Type: java.security.KeyStore
		Statement: r24 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(r2, varReplacer128)
		Method: <com.jpay.unionpay.CertUtil: java.security.KeyStore getKeyInfo(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 5855d058000ef38b6bc40df62778a650ec0acd5b3ced1cd8182270f09ce6ff02
		Secure: false
	Object:
		Variable: r39
		Type: java.security.KeyStore
		Statement: r39 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer744)
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: abe393b7fa26b404d776d34db9101255684ef4c0b50b7689b0a1f13900ceb500
		Secure: false
	Object:
		Variable: $r15
		Type: java.security.SecureRandom
		Statement: specialinvoke $r15.<java.security.SecureRandom: void <init>()>()
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: a9a897217825546545eb193e5524b045a6adef2186b4eab43267279bb75314c2
		Secure: true
	Object:
		Variable: r2
		Type: java.security.Signature
		Statement: r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(varReplacer497, varReplacer498)
		Method: <com.jpay.unionpay.SecureUtil: byte[] signBySoft(java.security.PrivateKey,byte[])>
		SHA-256: 23b5b8d3e2e24b53722b267e59994d01529858110f70a61a6741cf10673b1a5b
		Secure: false
	Object:
		Variable: $r21
		Type: java.security.SecureRandom
		Statement: specialinvoke $r21.<java.security.SecureRandom: void <init>()>()
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: e29472bf85c54dbddc78e9d506f09256eb21f4da13b85ccef53c988ec771d9b8
		Secure: true
	Object:
		Variable: r7
		Type: java.security.MessageDigest
		Statement: r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r0)
		Method: <com.jpay.ext.kit.HashKit: java.lang.String hash(java.lang.String,java.lang.String)>
		SHA-256: 6685f3d4a30e6105c2da441c926d71650507d1ebcbcff4eb14c3dbbc466e6a37
		Secure: false
	Object:
		Variable: $r22
		Type: java.security.SecureRandom
		Statement: specialinvoke $r22.<java.security.SecureRandom: void <init>()>()
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 43997991c5351bb2d26c23776acb49b1ccf9c0c930b4b26aa08d5a279f3bc9f
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer513, varReplacer514)
		Method: <com.jpay.unionpay.SecureUtil: byte[] decryptData(java.security.PrivateKey,byte[])>
		SHA-256: 853e7702e979fc37dfc34475cf584151a053976621f28013a25b4ad79294c251
		Secure: false
	Object:
		Variable: r43
		Type: java.security.KeyStore
		Statement: r43 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer768)
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: f05caa11581d2766dbc7782062bb88dfdce910dd0bb109f4eb4e5ff84c0f9bbf
		Secure: false
	Object:
		Variable: $r22
		Type: java.security.SecureRandom
		Statement: specialinvoke $r22.<java.security.SecureRandom: void <init>()>()
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: 43997991c5351bb2d26c23776acb49b1ccf9c0c930b4b26aa08d5a279f3bc9f
		Secure: true
	Object:
		Variable: r10
		Type: javax.net.ssl.SSLContext
		Statement: r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer773)
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: ebcd4506186dedde095e7c0f839fd643642d6a0178c68b41198f39756d20ac3b
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: $z0 = virtualinvoke r3.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <com.jpay.unionpay.SecureUtil: boolean validateSignBySoft(java.security.PublicKey,byte[],byte[])>
		SHA-256: d8b19433a3fc27f6e4193cf10a413c813410e5fd92964a5e03a0ea272b3b4d7c
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: $z0 = virtualinvoke r3.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <com.jpay.unionpay.SecureUtil: boolean validateSignBySoft256(java.security.PublicKey,byte[],byte[])>
		SHA-256: 81234ec144518bd4152604fa33ae482060c646b16ba5161e50ac5b767cc96b6c
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke r3.<java.security.Signature: boolean verify(byte[])>(r1)
		Method: <com.jpay.unionpay.SecureUtil: boolean validateSignBySoft256(java.security.PublicKey,byte[],byte[])>
		SHA-256: 4a4859a1ccd9a1ec24a78a40070f760cf5d24f66816bd22931255c492892ddf8
		Secure: false
	Object:
		Variable: r0
		Type: javax.net.ssl.SSLContext
		Statement: r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer850)
		Method: <com.jpay.ext.kit.HttpKit: javax.net.ssl.SSLSocketFactory initSSLSocketFactory()>
		SHA-256: 4a64be9e03cfcfebf4230eed261f88fe4af8d642854243b9a798baec950f8f02
		Secure: false
	Object:
		Variable: r16
		Type: byte[]
		Statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, $i3)
		Method: <com.jpay.secure.RSAUtils: java.lang.String encryptByPublicKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 6577f13ec83e0e2f73b148ea07d096eccbaf671ce3678f6f56d2bc4309a0583c
		Secure: false
	Object:
		Variable: r4
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r4 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r13)
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 64db9c9b9dc2d4d9ef5e25a99a187172ed69e23dfafa7b31527f6f168972ef9e
		Secure: false
	Object:
		Variable: r0
		Type: java.security.KeyPairGenerator
		Statement: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer799)
		Method: <com.jpay.secure.RSAUtils: java.util.Map getKeys()>
		SHA-256: 6f02d468791e86aaaa1ad355e88e798b567f13235d0fb5eeb2030a4aaf1a438f
		Secure: false
	Object:
		Variable: r40
		Type: java.security.KeyStore
		Statement: r40 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer749)
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 5bd388e886456e8b1da9737061cbfd99087047b9a3c9908d26a35b16bea8a73e
		Secure: false
	Object:
		Variable: r8
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r8 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r20)
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: 84777fc44d7d5f8680c8632ae2a479c858094bbbaf4268de6083e744f7bcf817
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, varReplacer820)
		Method: <com.jpay.secure.RSAUtils: java.lang.String decryptByPrivateKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 7640109b9bb78ed3b1d536cec894f7c3d27314819910a3d2e3296c9b7c1b81ef
		Secure: false
	Object:
		Variable: r11
		Type: javax.net.ssl.SSLContext
		Statement: r11 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer762)
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: e627dec614b39943861048d29c8415934227cef1bfdec28c1ddd1d9d231e9e69
		Secure: false
	Object:
		Variable: r9
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r9 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r20)
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: d7846ae52faa88d12e66443a0cb5b3d7038de4ba24676f2d0c9db16aa5a6c9f5
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.jpay.unionpay.SecureUtil: byte[] sha1(byte[])>
		SHA-256: 44fc3d31c485052a539ea35da605a6f5c6b21cd376533e8168bb7a0a706a312e
		Secure: false
	Object:
		Variable: r33
		Type: java.security.KeyStore
		Statement: r33 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer724)
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)>
		SHA-256: 79bc4f31232cb41a77efab9836365aad5bf6136068ca92fd6c0d56cacd5ce74b
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: $r2 = virtualinvoke r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
		Method: <com.jpay.unionpay.SecureUtil: byte[] encryptData(java.security.PublicKey,byte[])>
		SHA-256: c1055c8006624b691ff6c90c40a9aa09f4094d4e038c3f025c4f88c5245ab26b
		Secure: false
	Object:
		Variable: r5
		Type: javax.net.ssl.KeyManager[]
		Statement: r5 = virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: e12fb027e6d562c8e151eef420dada8bcd40ba95573558a8a9016657b4feea34
		Secure: false
	Object:
		Variable: r8
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r8 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r20)
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: c577f24d9bcfbe3f4b9d34a0afa7679915ddec7153da2d6ca4bf8d75a2564fe4
		Secure: false
	Object:
		Variable: $r21
		Type: java.security.SecureRandom
		Statement: specialinvoke $r21.<java.security.SecureRandom: void <init>()>()
		Method: <com.jpay.util.HttpUtils$OkHttp3Delegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: e29472bf85c54dbddc78e9d506f09256eb21f4da13b85ccef53c988ec771d9b8
		Secure: true
	Object:
		Variable: r1
		Type: java.security.KeyPair
		Statement: r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.jpay.secure.RSAUtils: java.util.Map getKeys()>
		SHA-256: d79759887e198a56756c894c841af2f0d285593453cad8ffaac69984945647a9
		Secure: false
	Object:
		Variable: r3
		Type: java.security.Signature
		Statement: r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(varReplacer501, varReplacer502)
		Method: <com.jpay.unionpay.SecureUtil: boolean validateSignBySoft(java.security.PublicKey,byte[],byte[])>
		SHA-256: c932ce59812af4070a234c94910b56a0eb17781f43ebf48a47aa6dab55fed529
		Secure: false
	Object:
		Variable: r4
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r4 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r12)
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)>
		SHA-256: 524fb87670af1515b8fea364fc50fa8a23ddba78f59dabf83bc45d4e2ceeac7b
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, $i3)
		Method: <com.jpay.secure.RSAUtils: java.lang.String decryptByPrivateKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 357c7d4514b7a4c08c1a09379dfc9281497c5cd442e277d13466d467cf0050fe
		Secure: false
	Object:
		Variable: r9
		Type: javax.net.ssl.KeyManager[]
		Statement: r9 = virtualinvoke r8.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: 550d70eda6165b2d7f352aba734433af913ec984f29a35aa06244c6a3bdeaa80
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r3 = virtualinvoke r2.<java.security.Signature: byte[] sign()>()
		Method: <com.jpay.unionpay.SecureUtil: byte[] signBySoft(java.security.PrivateKey,byte[])>
		SHA-256: c9645bc913d457e28efc80bc65902f6a3db2b5973dbc28725ac822feb782a63e
		Secure: false
	Object:
		Variable: r16
		Type: byte[]
		Statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, varReplacer813)
		Method: <com.jpay.secure.RSAUtils: java.lang.String encryptByPublicKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: d2e1ed5806c1ef22d6a81bad7480626305f1c35fe2b177e98bafef295db1b0be
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, $i3)
		Method: <com.jpay.secure.RSAUtils: java.lang.String encryptByPublicKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 1f2cf53f1997b931c3a99e1498b1ab8e49e51ccb502aff94f35dab9394756525
		Secure: false
	Object:
		Variable: r5
		Type: javax.net.ssl.KeyManager[]
		Statement: r5 = virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)>
		SHA-256: e12fb027e6d562c8e151eef420dada8bcd40ba95573558a8a9016657b4feea34
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: r2 = virtualinvoke r7.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <com.jpay.ext.kit.HashKit: java.lang.String hash(java.lang.String,java.lang.String)>
		SHA-256: d06ddf84a9af96098cf0fc49a2ffb4c0309a74494a6ff6fbb7ba42b81195489d
		Secure: false
	Object:
		Variable: r16
		Type: byte[]
		Statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, varReplacer820)
		Method: <com.jpay.secure.RSAUtils: java.lang.String decryptByPrivateKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 47933ae30d43a8e3f81ea8f105f3f12887ba28281531cd69119eae5de48d7ecd
		Secure: false
	Object:
		Variable: r6
		Type: javax.net.ssl.SSLContext
		Statement: r6 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer714)
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 1a1d508a1ea1829dd56d919c73504a6faf8288655cbc43c081171c7a22da2a08
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: r2 = virtualinvoke r7.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <com.jpay.ext.kit.HashKit: java.lang.String hash(java.lang.String,java.lang.String)>
		SHA-256: 383cd4a9befd0051e1699a529914eaa6f0860189bbd240ff79b286edbce77e96
		Secure: false
	Object:
		Variable: r4
		Type: java.security.MessageDigest
		Statement: r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer486)
		Method: <com.jpay.unionpay.SecureUtil: byte[] sha256(byte[])>
		SHA-256: b86570750ca236b50f5135b86a9b8ef37dcc3402aaebd81760f306ac8a01eb90
		Secure: true
	Object:
		Variable: r34
		Type: java.security.KeyStore
		Statement: r34 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer718)
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: a52ddf0601e7fb409ba580d4a2c99bee19b36123cdf28edfb3849ae53df5ae63
		Secure: false
	Object:
		Variable: r2
		Type: java.security.Signature
		Statement: r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(varReplacer499, varReplacer500)
		Method: <com.jpay.unionpay.SecureUtil: byte[] signBySoft256(java.security.PrivateKey,byte[])>
		SHA-256: f262b2c372cedf6d8c01932b902954f6cd1f475125db583b12b4c6c7899448e9
		Secure: false
	Object:
		Variable: r6
		Type: javax.net.ssl.SSLContext
		Statement: r6 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer727)
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)>
		SHA-256: a9120d601e96f1b9059200743b6632a267a82e3eedfb23b5d3b9bcb0777482ae
		Secure: false
	Object:
		Variable: $r14
		Type: java.security.SecureRandom
		Statement: specialinvoke $r14.<java.security.SecureRandom: void <init>()>()
		Method: <com.jpay.util.HttpKitExt: java.lang.String postSSL(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)>
		SHA-256: 72feb637a9e476e19f9ac68e06463d8751e13bf88bc94371b75816a6b59e243c
		Secure: true
	Object:
		Variable: r8
		Type: javax.crypto.Cipher
		Statement: r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r2)
		Method: <com.jpay.secure.RSAUtils: java.lang.String encryptByPublicKey(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 4685351f4f4be93917e1be713fde0913c107704a8e003f6652f79134bd023133
		Secure: false
	Object:
		Variable: r10
		Type: javax.net.ssl.SSLContext
		Statement: r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer746)
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>
		SHA-256: b3eaabbfb219f838a82333e72bacd850b26f772ae489b85c433c0ab9e54c697f
		Secure: false
	Object:
		Variable: r7
		Type: javax.net.ssl.KeyManagerFactory
		Statement: r7 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r20)
		Method: <com.jpay.util.HttpUtils$OkHttpDelegate: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 3b4d16b800a9dc0436e3715406f90479a1a79135002465e9c86329fae8361833
		Secure: false

Findings in Java Class: com.jpay.unionpay.CertUtil

	 in Method: java.security.KeyStore getKeyInfo(java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #5855d058000ef38b6bc40df62778a650ec0acd5b3ced1cd8182270f09ce6ff02)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r24.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r23, r26)


	 in Method: void loadSignCert(java.lang.String,java.lang.String)
		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #5855d058000ef38b6bc40df62778a650ec0acd5b3ced1cd8182270f09ce6ff02)
			Operation on object of type java.security.KeyStore object not completed. Expected call to load
			at statement: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r5)


Findings in Java Class: com.jpay.unionpay.SecureUtil

	 in Method: byte[] sha1(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #1219c696c702dde4ebae016657680095998b8facab4d2458a1fe7f4b4f14795f)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer485)


	 in Method: byte[] signBySoft(java.security.PrivateKey,byte[])
		ConstraintError violating CrySL rule for java.security.Signature (on Object #23b5b8d3e2e24b53722b267e59994d01529858110f70a61a6741cf10673b1a5b)
			First parameter (with value "SHA1withRSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA224withDSA, NONEwithDSA, SHA1withDSA}
			at statement: r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(varReplacer497, varReplacer498)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r2.<java.security.Signature: void initSign(java.security.PrivateKey)>(r0)


	 in Method: boolean validateSignBySoft(java.security.PublicKey,byte[],byte[])
		ConstraintError violating CrySL rule for java.security.Signature (on Object #c932ce59812af4070a234c94910b56a0eb17781f43ebf48a47aa6dab55fed529)
			First parameter (with value "SHA1withRSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA224withDSA, NONEwithDSA, SHA1withDSA}
			at statement: r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(varReplacer501, varReplacer502)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke r3.<java.security.Signature: void initVerify(java.security.PublicKey)>(r0)


	 in Method: byte[] decryptData(java.security.PrivateKey,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer511, r0)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #853e7702e979fc37dfc34475cf584151a053976621f28013a25b4ad79294c251)
			First parameter (with value "RSA/ECB/PKCS1Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer513, varReplacer514)


	 in Method: byte[] encryptData(java.security.PublicKey,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer510, r0)


	 in Method: boolean validateSignBySoft256(java.security.PublicKey,byte[],byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke r3.<java.security.Signature: void initVerify(java.security.PublicKey)>(r0)


	 in Method: byte[] signBySoft256(java.security.PrivateKey,byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke r2.<java.security.Signature: void initSign(java.security.PrivateKey)>(r0)


Findings in Java Class: com.jpay.util.HttpKitExt

	 in Method: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #64db9c9b9dc2d4d9ef5e25a99a187172ed69e23dfafa7b31527f6f168972ef9e)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r34, $r14)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r6.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r5, varReplacer717, $r15)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r6.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r5, varReplacer717, $r15)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #a52ddf0601e7fb409ba580d4a2c99bee19b36123cdf28edfb3849ae53df5ae63)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r34.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r11, $r12)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r34, $r14)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #1a1d508a1ea1829dd56d919c73504a6faf8288655cbc43c081171c7a22da2a08)
			First parameter (with value "TLSv1") should be any of {TLSv1.2}
			at statement: r6 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer714)


	 in Method: java.lang.String postSSL(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)
		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #524fb87670af1515b8fea364fc50fa8a23ddba78f59dabf83bc45d4e2ceeac7b)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r33, $r13)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #79bc4f31232cb41a77efab9836365aad5bf6136068ca92fd6c0d56cacd5ce74b)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r33.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r2, $r11)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #a9120d601e96f1b9059200743b6632a267a82e3eedfb23b5d3b9bcb0777482ae)
			First parameter (with value "TLSv1") should be any of {TLSv1.2}
			at statement: r6 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer727)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r6.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r5, varReplacer731, $r14)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r6.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r5, varReplacer731, $r14)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r33, $r13)


Findings in Java Class: com.jpay.util.HttpUtils$OkHttpDelegate

	 in Method: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r39, $r21)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r9, varReplacer743, $r22)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #b3eaabbfb219f838a82333e72bacd850b26f772ae489b85c433c0ab9e54c697f)
			First parameter (with value "TLSv1") should be any of {TLSv1.2}
			at statement: r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer746)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #84777fc44d7d5f8680c8632ae2a479c858094bbbaf4268de6083e744f7bcf817)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r39, $r21)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #abe393b7fa26b404d776d34db9101255684ef4c0b50b7689b0a1f13900ceb500)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r39.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r4, $r19)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r9, varReplacer743, $r22)


	 in Method: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #5bd388e886456e8b1da9737061cbfd99087047b9a3c9908d26a35b16bea8a73e)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r40.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r39, $r19)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r8, varReplacer750, $r22)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #d13f342626d6aabf82e5785c93b255829322bebcb60061cc18b67572b166333a)
			First parameter (with value "TLSv1") should be any of {TLSv1.2}
			at statement: r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer747)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r8, varReplacer750, $r22)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #3b4d16b800a9dc0436e3715406f90479a1a79135002465e9c86329fae8361833)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r7.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r40, $r21)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r7.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r40, $r21)


Findings in Java Class: com.jpay.util.HttpUtils$OkHttp3Delegate

	 in Method: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r9.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r42, r8)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #2e9f3d6c43527e2c48ad5b013470a1c35a0960f0dbeb92ce2460d52227c9bdb3)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r42.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r7, r8)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r11.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r10, varReplacer765, $r21)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #d7846ae52faa88d12e66443a0cb5b3d7038de4ba24676f2d0c9db16aa5a6c9f5)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r9.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r42, r8)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #e627dec614b39943861048d29c8415934227cef1bfdec28c1ddd1d9d231e9e69)
			First parameter (with value "TLSv1") should be any of {TLSv1.2}
			at statement: r11 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer762)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r11.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r10, varReplacer765, $r21)


	 in Method: java.lang.String postSSL(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ebcd4506186dedde095e7c0f839fd643642d6a0178c68b41198f39756d20ac3b)
			First parameter (with value "TLSv1") should be any of {TLSv1.2}
			at statement: r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer773)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r9, varReplacer769, $r21)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r9, varReplacer769, $r21)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r43, r7)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #c577f24d9bcfbe3f4b9d34a0afa7679915ddec7153da2d6ca4bf8d75a2564fe4)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r43, r7)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #f05caa11581d2766dbc7782062bb88dfdce910dd0bb109f4eb4e5ff84c0f9bbf)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r43.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r42, r7)


Findings in Java Class: com.jpay.secure.RSAUtils

	 in Method: java.util.Map getKeys()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #6f02d468791e86aaaa1ad355e88e798b567f13235d0fb5eeb2030a4aaf1a438f)
			First parameter (with value 1024) should be any of {4096, 3072, 2048}
			at statement: virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer803)


	 in Method: java.lang.String encryptByPublicKey(java.lang.String,java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #4685351f4f4be93917e1be713fde0913c107704a8e003f6652f79134bd023133)
			First parameter (with value "RSA/ECB/OAEPWITHSHA-1ANDMGF1PADDING") should be any of RSA/ECB/{NoPadding, PKCS1Padding, OAEPWithMD5AndMGF1Padding, OAEPWithSHA-224AndMGF1Padding, OAEPWithSHA-256AndMGF1Padding, OAEPWithSHA-384AndMGF1Padding, OAEPWithSHA-512AndMGF1Padding}
			at statement: r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r2)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #4685351f4f4be93917e1be713fde0913c107704a8e003f6652f79134bd023133)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, $i3)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #4685351f4f4be93917e1be713fde0913c107704a8e003f6652f79134bd023133)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, varReplacer813)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #4685351f4f4be93917e1be713fde0913c107704a8e003f6652f79134bd023133)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, $i3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #4685351f4f4be93917e1be713fde0913c107704a8e003f6652f79134bd023133)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, varReplacer813)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #4685351f4f4be93917e1be713fde0913c107704a8e003f6652f79134bd023133)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer814, r7)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer814, r7)


	 in Method: java.lang.String decryptByPrivateKey(java.lang.String,java.lang.String,java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #f9b58857688c3010ef11e8d847954ebe1fddf46f1960ee5aee3cc40814ca291b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, $i3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #f9b58857688c3010ef11e8d847954ebe1fddf46f1960ee5aee3cc40814ca291b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer), javax.crypto.Cipher: byte[] doFinal(byte[]), javax.crypto.Cipher: byte[] doFinal(byte[],int,int), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]), javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int), update, wrap
			at statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, varReplacer820)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer818, r7)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #f9b58857688c3010ef11e8d847954ebe1fddf46f1960ee5aee3cc40814ca291b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer818, r7)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #f9b58857688c3010ef11e8d847954ebe1fddf46f1960ee5aee3cc40814ca291b)
			First parameter (with value "RSA/ECB/OAEPWITHSHA-1ANDMGF1PADDING") should be any of RSA/ECB/{NoPadding, PKCS1Padding, OAEPWithMD5AndMGF1Padding, OAEPWithSHA-224AndMGF1Padding, OAEPWithSHA-256AndMGF1Padding, OAEPWithSHA-384AndMGF1Padding, OAEPWithSHA-512AndMGF1Padding}
			at statement: r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r2)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #f9b58857688c3010ef11e8d847954ebe1fddf46f1960ee5aee3cc40814ca291b)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, varReplacer820)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #f9b58857688c3010ef11e8d847954ebe1fddf46f1960ee5aee3cc40814ca291b)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: r16 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i5, $i3)


Findings in Java Class: com.jpay.ext.kit.HttpKit

	 in Method: javax.net.ssl.SSLSocketFactory initSSLSocketFactory()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer848, r15, r13)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer848, r15, r13)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #4a64be9e03cfcfebf4230eed261f88fe4af8d642854243b9a798baec950f8f02)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer850)


Findings in Java Class: com.jpay.ext.kit.HashKit

	 in Method: java.lang.String hash(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #6685f3d4a30e6105c2da441c926d71650507d1ebcbcff4eb14c3dbbc466e6a37)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r0)

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #6685f3d4a30e6105c2da441c926d71650507d1ebcbcff4eb14c3dbbc466e6a37)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r0)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 39
	Number of Objects Analyzed: 69

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 28
	ConstraintError: 16
	TypestateError: 4
	IncompleteOperationError: 7
	NeverTypeOfError: 13
=====================================================================
[main] INFO crypto.analysis.CryptoScanner - Static Analysis took 0 seconds!
[main] INFO crypto.HeadlessCryptoScanner - Analysis finished in 2.100 s
