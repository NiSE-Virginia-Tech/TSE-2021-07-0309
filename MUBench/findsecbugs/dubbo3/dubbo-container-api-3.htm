<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/MUBench/dubbo3/dubbo-container/dubbo-container-api/target/dubbo-container-api-3.0.0-SNAPSHOT.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>498 lines of code analyzed,
	in 11 classes, 
	in 3 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">5</td>
<td align="right">10.04</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">9</td>
<td align="right">18.07</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>14</b>
</td>
<td align="right">
<b>28.11</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">14</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>14</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method new com.alibaba.dubbo.container.page.PageServlet()<br/>At PageServlet.java:[line 45]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66649');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66649" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.ResourceFilter<br/>In method com.alibaba.dubbo.container.page.ResourceFilter.getInputStream(String)<br/>At ResourceFilter.java:[line 141]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source com/alibaba/dubbo/container/page/ResourceFilter.getInputStream(Ljava/lang/String;)Ljava/io/InputStream; parameter 0<br/>Unknown source com/alibaba/dubbo/container/page/ResourceFilter.resources<br/>Method usage with tainted arguments detected<br/>At ResourceFilter.java:[line 78]<br/>At ResourceFilter.java:[line 83]<br/>At ResourceFilter.java:[line 86]<br/>At ResourceFilter.java:[line 95]<br/>At ResourceFilter.java:[line 137]<br/>At ResourceFilter.java:[line 138]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66793');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66793" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.ResourceFilter<br/>In method com.alibaba.dubbo.container.page.ResourceFilter.getLastModified(String)<br/>At ResourceFilter.java:[line 126]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source com/alibaba/dubbo/container/page/ResourceFilter.resources<br/>Unknown source com/alibaba/dubbo/container/page/ResourceFilter.getLastModified(Ljava/lang/String;)J parameter 0<br/>Method usage with tainted arguments detected<br/>At ResourceFilter.java:[line 78]<br/>At ResourceFilter.java:[line 83]<br/>At ResourceFilter.java:[line 86]<br/>At ResourceFilter.java:[line 88]<br/>At ResourceFilter.java:[line 122]<br/>At ResourceFilter.java:[line 124]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66937');">
<td>
<span class="priority-1">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66937" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.ResourceFilter<br/>In method com.alibaba.dubbo.container.page.ResourceFilter.getInputStream(String)<br/>At ResourceFilter.java:[line 145]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source com/alibaba/dubbo/container/page/ResourceFilter.getInputStream(Ljava/lang/String;)Ljava/io/InputStream; parameter 0<br/>Unknown source com/alibaba/dubbo/container/page/ResourceFilter.resources<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Method usage with tainted arguments detected<br/>At ResourceFilter.java:[line 78]<br/>At ResourceFilter.java:[line 83]<br/>At ResourceFilter.java:[line 86]<br/>At ResourceFilter.java:[line 95]<br/>At ResourceFilter.java:[line 137]<br/>At ResourceFilter.java:[line 138]<br/>At ResourceFilter.java:[line 145]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65609');">
<td>
<span class="priority-1">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65609" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.doPost(HttpServletRequest, HttpServletResponse)<br/>At PageServlet.java:[line 181]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>At PageServlet.java:[line 94]<br/>At PageServlet.java:[line 101]<br/>At PageServlet.java:[line 104]<br/>At PageServlet.java:[line 181]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65718');">
<td>
<span class="priority-1">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65718" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.doPost(HttpServletRequest, HttpServletResponse)<br/>At PageServlet.java:[line 188]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>At PageServlet.java:[line 94]<br/>At PageServlet.java:[line 101]<br/>At PageServlet.java:[line 104]<br/>At PageServlet.java:[line 188]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65827');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65827" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.doPost(HttpServletRequest, HttpServletResponse)<br/>At PageServlet.java:[line 141]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/alibaba/dubbo/common/utils/StringUtils.toString(Ljava/lang/Throwable;)Ljava/lang/String;<br/>Unknown source java/lang/Throwable.getMessage()Ljava/lang/String;<br/>At PageServlet.java:[line 141]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65911');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65911" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.doPost(HttpServletRequest, HttpServletResponse)<br/>At PageServlet.java:[line 148]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/alibaba/dubbo/common/utils/StringUtils.toString(Ljava/lang/Throwable;)Ljava/lang/String;<br/>Unknown source java/lang/Throwable.getMessage()Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65985');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65985" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.doPost(HttpServletRequest, HttpServletResponse)<br/>At PageServlet.java:[line 166]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/alibaba/dubbo/container/page/Page.rows<br/>Unknown source com/alibaba/dubbo/container/page/Page.getRows()Ljava/util/List;<br/>At Page.java:[line 80]<br/>At PageServlet.java:[line 166]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66079');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66079" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.writeMenu(HttpServletRequest, PrintWriter, String)<br/>At PageServlet.java:[line 205]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/alibaba/dubbo/container/page/Menu.name()Ljava/lang/String;<br/>Unknown source com/alibaba/dubbo/common/extension/ExtensionLoader.getExtensionName(Ljava/lang/Object;)Ljava/lang/String;<br/>At PageServlet.java:[line 205]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66163');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66163" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.writeMenu(HttpServletRequest, PrintWriter, String)<br/>At PageServlet.java:[line 212]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/alibaba/dubbo/container/page/PageServlet.writeMenu(Ljavax/servlet/http/HttpServletRequest;Ljava/io/PrintWriter;Ljava/lang/String;)V parameter 0<br/>At Page.java:[line 68]<br/>At PageServlet.java:[line 153]<br/>At PageServlet.java:[line 156]<br/>At PageServlet.java:[line 159]<br/>At PageServlet.java:[line 161]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66282');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66282" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.writeTable(PrintWriter, String, List, List)<br/>At PageServlet.java:[line 229]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/alibaba/dubbo/container/page/PageServlet.writeTable(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V parameter 2<br/>At Page.java:[line 72]<br/>At PageServlet.java:[line 162]<br/>At PageServlet.java:[line 229]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66381');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66381" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.writeTable(PrintWriter, String, List, List)<br/>At PageServlet.java:[line 254]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/alibaba/dubbo/container/page/PageServlet.writeTable(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V parameter 1<br/>At Page.java:[line 76]<br/>At PageServlet.java:[line 162]<br/>At PageServlet.java:[line 234]<br/>At PageServlet.java:[line 236]<br/>At PageServlet.java:[line 243]<br/>At PageServlet.java:[line 254]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66510');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of java/io/PrintWriter.println(Ljava/lang/String;)V could be vulnerable to XSS in the Servlet</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66510" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class com.alibaba.dubbo.container.page.PageServlet<br/>In method com.alibaba.dubbo.container.page.PageServlet.writeTable(PrintWriter, String, List, List)<br/>At PageServlet.java:[line 266]<br/>Sink method java/io/PrintWriter.println(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Iterator.next()Ljava/lang/Object;<br/>Unknown source com/alibaba/dubbo/container/page/PageServlet.writeTable(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V parameter 0<br/>Unknown source java/util/Collection.iterator()Ljava/util/Iterator;<br/>At Page.java:[line 80]<br/>At PageServlet.java:[line 162]<br/>At PageServlet.java:[line 163]<br/>At PageServlet.java:[line 262]<br/>At PageServlet.java:[line 265]<br/>At PageServlet.java:[line 266]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        </body>
</html>
