<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/MUBench/game-server/game-gate/target/game-gate-releases.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>779 lines of code analyzed,
	in 21 classes, 
	in 8 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">4</td>
<td align="right">5.13</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">3</td>
<td align="right">3.85</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>7</b>
</td>
<td align="right">
<b>8.99</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">7</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>7</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-1">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class com.jzy.game.gate.server.ssl.GateSslContextFactory<br/>In method com.jzy.game.gate.server.ssl.GateSslContextFactory.createClientSslContext()<br/>At GateSslContextFactory.java:[line 149]<br/>Called method java.security.KeyStore.load(InputStream, char[])<br/>Hard coded parameter number (in reverse order) is 1<br/>Value loaded from field com.jzy.game.gate.server.ssl.GateSslContextFactory.GATE_PW</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65641');">
<td>
<span class="priority-1">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65641" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class com.jzy.game.gate.server.ssl.GateSslContextFactory<br/>In method com.jzy.game.gate.server.ssl.GateSslContextFactory.createClientSslContext()<br/>At GateSslContextFactory.java:[line 161]<br/>Called method javax.net.ssl.KeyManagerFactory.init(KeyStore, char[])<br/>Hard coded parameter number (in reverse order) is 1<br/>Value loaded from field com.jzy.game.gate.server.ssl.GateSslContextFactory.GATE_PW</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65731');">
<td>
<span class="priority-1">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65731" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class com.jzy.game.gate.server.ssl.GateSslContextFactory<br/>In method com.jzy.game.gate.server.ssl.GateSslContextFactory.createServerSslContext()<br/>At GateSslContextFactory.java:[line 120]<br/>Called method java.security.KeyStore.load(InputStream, char[])<br/>Hard coded parameter number (in reverse order) is 1<br/>Value loaded from field com.jzy.game.gate.server.ssl.GateSslContextFactory.GATE_PW</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65821');">
<td>
<span class="priority-1">SECHCP</span>
</td>
<td>Hard coded password found</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65821" style="display: none;">
<a href="#HARD_CODE_PASSWORD">Bug type HARD_CODE_PASSWORD (click for details)</a>
<br/>In class com.jzy.game.gate.server.ssl.GateSslContextFactory<br/>In method com.jzy.game.gate.server.ssl.GateSslContextFactory.createServerSslContext()<br/>At GateSslContextFactory.java:[line 132]<br/>Called method javax.net.ssl.KeyManagerFactory.init(KeyStore, char[])<br/>Hard coded parameter number (in reverse order) is 1<br/>Value loaded from field com.jzy.game.gate.server.ssl.GateSslContextFactory.GATE_PW</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65911');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65911" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class com.jzy.game.gate.server.ssl.GateTrustManagerFactory$1<br/>In method com.jzy.game.gate.server.ssl.GateTrustManagerFactory$1.checkClientTrusted(X509Certificate[], String)<br/>At GateTrustManagerFactory.java:[line 38]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65965');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65965" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class com.jzy.game.gate.server.ssl.GateTrustManagerFactory$1<br/>In method com.jzy.game.gate.server.ssl.GateTrustManagerFactory$1.checkServerTrusted(X509Certificate[], String)<br/>At GateTrustManagerFactory.java:[line 33]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66019');">
<td>
<span class="priority-2">SECWTM</span>
</td>
<td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66019" style="display: none;">
<a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
<br/>In class com.jzy.game.gate.server.ssl.GateTrustManagerFactory$1<br/>In method com.jzy.game.gate.server.ssl.GateTrustManagerFactory$1.getAcceptedIssuers()<br/>At GateTrustManagerFactory.java:[line 27]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="HARD_CODE_PASSWORD">HARD_CODE_PASSWORD: Hard coded password</a>
</h2>
            
<p>
Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>private String SECRET_PASSWORD = "letMeIn!";

Properties props = new Properties();
props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/259.html">CWE-259: Use of Hard-coded Password</a>
</p>

        
<h2>
<a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
</h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        </body>
</html>
