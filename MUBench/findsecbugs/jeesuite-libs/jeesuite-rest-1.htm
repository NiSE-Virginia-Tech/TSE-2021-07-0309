<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/MUBench/jeesuite-libs/jeesuite-rest/target/jeesuite-rest-1.1.8.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>486 lines of code analyzed,
	in 27 classes, 
	in 8 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right"/>
<td align="right">0.00</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">1</td>
<td align="right">2.06</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>1</b>
</td>
<td align="right">
<b>2.06</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">1</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>1</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/logging/log4j/Logger.info(Ljava/lang/String;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.jeesuite.rest.filter.handler.ReqResLogHandler<br/>In method com.jeesuite.rest.filter.handler.ReqResLogHandler.processRequest(ContainerRequestContext, HttpServletRequest, ResourceInfo)<br/>At ReqResLogHandler.java:[line 35]<br/>Sink method org/apache/logging/log4j/Logger.info(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Tainted source java/util/Map$Entry.getValue()Ljava/lang/Object;<br/>Tainted source javax/servlet/http/HttpServletRequest.getParameterNames()Ljava/util/Enumeration;<br/>Tainted source java/util/Map.entrySet()Ljava/util/Set;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Unknown source org/apache/commons/lang3/StringUtils.left(Ljava/lang/String;I)Ljava/lang/String;<br/>Tainted source java/util/Map.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source java/util/Map$Entry.getKey()Ljava/lang/Object;<br/>Tainted source com/jeesuite/rest/utils/RequestUtils.buildQueryParamsMap(Ljavax/servlet/http/HttpServletRequest;)Ljava/util/Map;<br/>Tainted source com/jeesuite/rest/utils/RequestUtils.getParametersMap(Ljavax/ws/rs/container/ContainerRequestContext;Ljavax/servlet/http/HttpServletRequest;)Ljava/util/Map;<br/>Tainted source javax/servlet/http/HttpServletRequest.getParameterValues(Ljava/lang/String;)[Ljava/lang/String;<br/>Tainted source java/util/Enumeration.nextElement()Ljava/lang/Object;<br/>Tainted source java/util/Iterator.next()Ljava/lang/Object;<br/>Tainted source com/jeesuite/rest/filter/handler/ReqResLogHandler.buildRequestLog(Ljavax/ws/rs/container/ContainerRequestContext;Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>At ReqResLogHandler.java:[line 34]<br/>At ReqResLogHandler.java:[line 47]<br/>At ReqResLogHandler.java:[line 49]<br/>At ReqResLogHandler.java:[line 51]<br/>At ReqResLogHandler.java:[line 52]<br/>At ReqResLogHandler.java:[line 54]<br/>At ReqResLogHandler.java:[line 55]<br/>At ReqResLogHandler.java:[line 60]<br/>At RequestUtils.java:[line 41]<br/>At RequestUtils.java:[line 44]<br/>At RequestUtils.java:[line 55]<br/>At RequestUtils.java:[line 61]<br/>At RequestUtils.java:[line 62]<br/>At RequestUtils.java:[line 63]<br/>At RequestUtils.java:[line 67]<br/>At RequestUtils.java:[line 69]<br/>At RequestUtils.java:[line 70]<br/>At RequestUtils.java:[line 71]<br/>At RequestUtils.java:[line 105]<br/>At RequestUtils.java:[line 110]<br/>At RequestUtils.java:[line 111]<br/>At RequestUtils.java:[line 113]<br/>At RequestUtils.java:[line 114]<br/>At RequestUtils.java:[line 118]<br/>At RequestUtils.java:[line 119]<br/>At RequestUtils.java:[line 123]<br/>At RequestUtils.java:[line 124]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        </body>
</html>
