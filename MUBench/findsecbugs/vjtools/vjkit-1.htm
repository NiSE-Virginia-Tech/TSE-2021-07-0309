<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/MUBench/vjtools/vjkit/target/vjkit-1.0.3-SNAPSHOT.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>4903 lines of code analyzed,
	in 142 classes, 
	in 19 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">4</td>
<td align="right">0.82</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">25</td>
<td align="right">5.10</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>29</b>
</td>
<td align="right">
<b>5.91</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">29</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>29</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67273');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67273" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.security.CryptoUtil<br/>In method com.vip.vjtools.vjkit.security.CryptoUtil.aes(byte[], byte[], int)<br/>At CryptoUtil.java:[line 134]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67327');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67327" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.security.CryptoUtil<br/>In method com.vip.vjtools.vjkit.security.CryptoUtil.aes(byte[], byte[], byte[], int)<br/>At CryptoUtil.java:[line 154]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.base.ExceptionUtil<br/>In method com.vip.vjtools.vjkit.base.ExceptionUtil.stackTraceText(Throwable)<br/>At ExceptionUtil.java:[line 96]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67435');">
<td>
<span class="priority-1">PADORA</span>
</td>
<td>The cipher is susceptible to padding oracle attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67435" style="display: none;">
<a href="#PADDING_ORACLE">Bug type PADDING_ORACLE (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.security.CryptoUtil<br/>In method com.vip.vjtools.vjkit.security.CryptoUtil.aes(byte[], byte[], byte[], int)<br/>At CryptoUtil.java:[line 154]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67381');">
<td>
<span class="priority-1">SECECB</span>
</td>
<td>The cipher uses ECB mode, which provides poor confidentiality for encrypted data</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67381" style="display: none;">
<a href="#ECB_MODE">Bug type ECB_MODE (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.security.CryptoUtil<br/>In method com.vip.vjtools.vjkit.security.CryptoUtil.aes(byte[], byte[], int)<br/>At CryptoUtil.java:[line 134]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65605');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65605" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.collection.ArrayUtil<br/>In method com.vip.vjtools.vjkit.collection.ArrayUtil.shuffle(Object[])<br/>At ArrayUtil.java:[line 66]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65663');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65663" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.concurrent.jsr166e.Striped64<br/>In method com.vip.vjtools.vjkit.concurrent.jsr166e.Striped64.&lt;static initializer for Striped64&gt;()<br/>At Striped64.java:[line 107]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66577');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66577" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.net.NetUtil<br/>In method com.vip.vjtools.vjkit.net.NetUtil.&lt;static initializer for NetUtil&gt;()<br/>At NetUtil.java:[line 37]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66635');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66635" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextDouble()<br/>At RandomUtil.java:[line 184]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66693');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66693" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextDouble(double)<br/>At RandomUtil.java:[line 200]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66751');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66751" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextDouble(double, double)<br/>At RandomUtil.java:[line 214]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66809');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66809" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextInt()<br/>At RandomUtil.java:[line 55]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66867');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66867" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextInt(int)<br/>At RandomUtil.java:[line 76]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66925');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66925" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextInt(int, int)<br/>At RandomUtil.java:[line 92]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66983');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66983" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextLong()<br/>At RandomUtil.java:[line 120]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67041');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67041" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextLong(long)<br/>At RandomUtil.java:[line 140]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67099');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67099" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.nextLong(long, long)<br/>At RandomUtil.java:[line 156]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67157');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.concurrent.ThreadLocalRandom) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67157" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.number.RandomUtil<br/>In method com.vip.vjtools.vjkit.number.RandomUtil.threadLocalRandom()<br/>At RandomUtil.java:[line 32]<br/>Value java.util.concurrent.ThreadLocalRandom</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65721');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65721" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.concurrent.threadpool.AbortPolicyWithReport$1<br/>In method com.vip.vjtools.vjkit.concurrent.threadpool.AbortPolicyWithReport$1.run()<br/>At AbortPolicyWithReport.java:[line 80]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/text/SimpleDateFormat.format(Ljava/util/Date;)Ljava/lang/String;<br/>Unknown source com/vip/vjtools/vjkit/concurrent/threadpool/AbortPolicyWithReport.threadName<br/>At AbortPolicyWithReport.java:[line 80]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65805');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Files.createTempFile(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65805" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.io.FileUtil<br/>In method com.vip.vjtools.vjkit.io.FileUtil.createTempFile(String, String)<br/>At FileUtil.java:[line 510]<br/>Sink method java/nio/file/Files.createTempFile(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source com/vip/vjtools/vjkit/io/FileUtil.createTempFile(Ljava/lang/String;Ljava/lang/String;)Ljava/nio/file/Path; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65879');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65879" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.io.FileUtil<br/>In method com.vip.vjtools.vjkit.io.FileUtil.getPath(String)<br/>At FileUtil.java:[line 514]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source com/vip/vjtools/vjkit/io/FileUtil.getPath(Ljava/lang/String;)Ljava/nio/file/Path; parameter 0<br/>Method usage not detected<br/>At PropertiesUtil.java:[line 57]<br/>At FileUtil.java:[line 112]<br/>At FileUtil.java:[line 141]<br/>At FileUtil.java:[line 170]<br/>At FileUtil.java:[line 171]<br/>At FileUtil.java:[line 185]<br/>At FileUtil.java:[line 186]<br/>At FileUtil.java:[line 395]<br/>At FileUtil.java:[line 416]<br/>At FileUtil.java:[line 457]<br/>At URLResourceUtil.java:[line 51]<br/>At URLResourceUtil.java:[line 61]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66073');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66073" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.io.FileUtil<br/>In method com.vip.vjtools.vjkit.io.FileUtil.touch(String)<br/>At FileUtil.java:[line 335]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/vip/vjtools/vjkit/io/FileUtil.touch(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66285');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66285" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.io.URLResourceUtil<br/>In method com.vip.vjtools.vjkit.io.URLResourceUtil.asFile(String)<br/>At URLResourceUtil.java:[line 43]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/vip/vjtools/vjkit/io/URLResourceUtil.asFile(Ljava/lang/String;)Ljava/io/File; parameter 0<br/>Method usage not detected<br/>At URLResourceUtil.java:[line 34]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66369');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66369" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.io.URLResourceUtil<br/>In method com.vip.vjtools.vjkit.io.URLResourceUtil.getFileByURL(URL)<br/>At URLResourceUtil.java:[line 72]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/net/URI.getSchemeSpecificPart()Ljava/lang/String;<br/>Unknown source org/apache/commons/lang3/StringUtils.replace(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/net/URI.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source com/vip/vjtools/vjkit/io/URLResourceUtil.toURI(Ljava/lang/String;)Ljava/net/URI;<br/>At URLResourceUtil.java:[line 72]<br/>At URLResourceUtil.java:[line 80]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66473');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66473" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.io.URLResourceUtil<br/>In method com.vip.vjtools.vjkit.io.URLResourceUtil.getFileByURL(URL)<br/>At URLResourceUtil.java:[line 75]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/net/URL.getFile()Ljava/lang/String;<br/>Unknown source com/vip/vjtools/vjkit/io/URLResourceUtil.getFileByURL(Ljava/net/URL;)Ljava/io/File; parameter 0<br/>At URLResourceUtil.java:[line 36]<br/>At URLResourceUtil.java:[line 66]<br/>At URLResourceUtil.java:[line 75]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67215');">
<td>
<span class="priority-2">SECRD</span>
</td>
<td>The regular expression "(\\d+)([a-zA-Z]+)?" is vulnerable to a denial of service attack (ReDOS)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67215" style="display: none;">
<a href="#REDOS">Bug type REDOS (click for details)</a>
<br/>Value (\\d+)([a-zA-Z]+)?<br/>In class com.vip.vjtools.vjkit.number.UnitConverter<br/>In method com.vip.vjtools.vjkit.number.UnitConverter.&lt;static initializer for UnitConverter&gt;()<br/>At UnitConverter.java:[line 36]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66147');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66147" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.io.ResourceUtil<br/>In method com.vip.vjtools.vjkit.io.ResourceUtil.asStream(Class, String)<br/>At ResourceUtil.java:[line 65]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source com/google/common/io/Resources.getResource(Ljava/lang/Class;Ljava/lang/String;)Ljava/net/URL;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66216');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66216" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.io.ResourceUtil<br/>In method com.vip.vjtools.vjkit.io.ResourceUtil.asStream(String)<br/>At ResourceUtil.java:[line 58]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source com/google/common/io/Resources.getResource(Ljava/lang/String;)Ljava/net/URL;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67489');">
<td>
<span class="priority-2">STAIV</span>
</td>
<td>The initialization vector (IV) is not properly generated</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67489" style="display: none;">
<a href="#STATIC_IV">Bug type STATIC_IV (click for details)</a>
<br/>In class com.vip.vjtools.vjkit.security.CryptoUtil<br/>In method com.vip.vjtools.vjkit.security.CryptoUtil.aes(byte[], byte[], byte[], int)<br/>At CryptoUtil.java:[line 153]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CIPHER_INTEGRITY">CIPHER_INTEGRITY: Cipher with no integrity</a>
</h2>
            
<p>
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the
    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.
</p>
<p>
    The solution is to use a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the
    existing cipher is prone to error <sup><a href="https://moxie.org/blog/the-cryptographic-doom-principle/">[1]</a></sup>. Specifically,
    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic
    functions on the data.
</p>
<p>The following modes are vulnerable because they don't provide a HMAC:<br/>
    - CBC<br/>
    - OFB<br/>
    - CTR<br/>
    - ECB<br/><br/>
    The following snippets code are some examples of vulnerable code.<br/><br/>
    <b>Code at risk:</b><br/>
    <i>AES in CBC mode</i><br/>

    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
    <br/>
    <i>Triple DES with ECB mode</i><br/>

<pre>Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="https://csrc.nist.gov/projects/block-cipher-techniques/bcm/modes-develoment#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="https://moxie.org/blog/the-cryptographic-doom-principle/">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/353.html">CWE-353: Missing Support for Integrity Check</a>
</p>

        
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        
<h2>
<a name="PADDING_ORACLE">PADDING_ORACLE: Cipher is susceptible to Padding Oracle</a>
</h2>
            
<p>
    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the
    message if the system exposed the difference between plaintext with invalid padding or valid padding. The distinction between
    valid and invalid padding is usually revealed through distinct error messages being returned for each condition.
</p>
<p>
    <b>Code at risk:</b>
    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://www.infobytesec.com/down/paddingoracle_openjam.pdf">Padding Oracles for the masses (by Matias Soler)</a><br/>
    <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="https://csrc.nist.gov/projects/block-cipher-techniques/bcm/modes-develoment#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="https://capec.mitre.org/data/definitions/463.html">CAPEC: Padding Oracle Crypto Attack</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/696.html">CWE-696: Incorrect Behavior Order</a>
</p>

        
<h2>
<a name="ECB_MODE">ECB_MODE: ECB mode is insecure</a>
</h2>
            
<p>An authentication cipher mode which provides better confidentiality of the encrypted data should be used instead of Electronic Code Book (ECB) mode,
which does not provide good confidentiality. Specifically, ECB mode produces the same output for the same input each time. So,
for example, if a user is sending a password, the encrypted value is the same each time. This allows an attacker to intercept
and replay the data.</p>
<p>
To fix this, something like Galois/Counter Mode (GCM) should be used instead.
</p>
<p>
<b>Code at risk:</b>
    <pre>Cipher c = Cipher.getInstance("AES/ECB/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
<a href="https://csrc.nist.gov/projects/block-cipher-techniques/bcm/modes-develoment#01">NIST: Authenticated Encryption Modes</a><br/>
<a href="https://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29">Wikipedia: Block cipher modes of operation</a><br/>
<a href="https://csrc.nist.gov/publications/detail/sp/800-38a/final">NIST: Recommendation for Block Cipher Modes of Operation</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
</h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="STATIC_IV">STATIC_IV: Static IV</a>
</h2>
            
<p>
    Initialization vector must be regenerated for each message to be encrypted.
</p>
<p><b>Vulnerable Code:</b></p>
<p>
<pre>
private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};

public void encrypt(String message) throws Exception {

    IvParameterSpec ivSpec = new IvParameterSpec(IV);
[...]
</pre>
<p><b>Solution:</b></p>
<p>
<pre>
public void encrypt(String message) throws Exception {

    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);

    IvParameterSpec ivSpec = new IvParameterSpec(iv);
[...]
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://en.wikipedia.org/wiki/Initialization_vector">Wikipedia: Initialization vector</a><br/>
<a href="https://cwe.mitre.org/data/definitions/329.html">CWE-329: Not Using a Random IV with CBC Mode</a><br/>
<a href="https://defuse.ca/cbcmodeiv.htm">Encryption - CBC Mode IV: Secret or Not?</a>
</p>
            
        </body>
</html>
