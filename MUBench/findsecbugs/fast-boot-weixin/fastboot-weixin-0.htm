<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/home/x/CryptoAPIDetect/dataset/MUBench/fast-boot-weixin/target/fastboot-weixin-0.6.2.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>10859 lines of code analyzed,
	in 379 classes, 
	in 44 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">3</td>
<td align="right">0.28</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">13</td>
<td align="right">1.20</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>16</b>
</td>
<td align="right">
<b>1.47</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">16</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>16</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65747');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65747" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.service.WxXmlCryptoService<br/>In method com.mxixm.fastboot.weixin.service.WxXmlCryptoService.afterPropertiesSet()<br/>At WxXmlCryptoService.java:[line 102]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65801');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65801" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.service.WxXmlCryptoService<br/>In method com.mxixm.fastboot.weixin.service.WxXmlCryptoService.afterPropertiesSet()<br/>At WxXmlCryptoService.java:[line 107]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66385');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.info(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66385" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.web.WxOAuth2Interceptor<br/>In method com.mxixm.fastboot.weixin.web.WxOAuth2Interceptor.preHandle(HttpServletRequest, HttpServletResponse, Object)<br/>At WxOAuth2Interceptor.java:[line 88]<br/>Sink method org/apache/commons/logging/Log.info(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source com/mxixm/fastboot/weixin/web/WxOAuth2Interceptor.getRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/module/Wx$Environment.callbackUri<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURL()Ljava/lang/StringBuffer;<br/>Tainted source java/net/URI.create(Ljava/lang/String;)Ljava/net/URI;<br/>Tainted source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Tainted source java/net/URI.getScheme()Ljava/lang/String;<br/>Tainted source java/net/URI.getPath()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/module/Wx$Environment.getCallbackHost()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Unknown source java/net/URI.getHost()Ljava/lang/String;<br/>At Wx.java:[line 92]<br/>At WxOAuth2Interceptor.java:[line 87]<br/>At WxOAuth2Interceptor.java:[line 88]<br/>At WxOAuth2Interceptor.java:[line 99]<br/>At WxOAuth2Interceptor.java:[line 101]<br/>At WxOAuth2Interceptor.java:[line 102]<br/>At WxOAuth2Interceptor.java:[line 103]<br/>At WxOAuth2Interceptor.java:[line 104]<br/>At WxOAuth2Interceptor.java:[line 107]<br/>At WxOAuth2Interceptor.java:[line 108]<br/>At WxOAuth2Interceptor.java:[line 109]<br/>At WxOAuth2Interceptor.java:[line 112]<br/>At WxOAuth2Interceptor.java:[line 116]<br/>At WxOAuth2Interceptor.java:[line 119]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66639');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/commons/logging/Log.info(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66639" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.web.WxOAuth2Interceptor<br/>In method com.mxixm.fastboot.weixin.web.WxOAuth2Interceptor.preHandle(HttpServletRequest, HttpServletResponse, Object)<br/>At WxOAuth2Interceptor.java:[line 91]<br/>Sink method org/apache/commons/logging/Log.info(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.mediaUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURL()Ljava/lang/StringBuffer;<br/>Tainted source java/net/URI.create(Ljava/lang/String;)Ljava/net/URI;<br/>Tainted source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Tainted source java/net/URI.getScheme()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Tainted source java/net/URI.getPath()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.DEFAULT_HOST<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.mediaUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.mediaUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source java/net/URI.getHost()Ljava/lang/String;<br/>Tainted source com/mxixm/fastboot/weixin/web/WxOAuth2Interceptor.getRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/module/Wx$Environment.callbackUri<br/>Unknown source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;<br/>Tainted source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/module/Wx$Environment.getCallbackHost()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.HTTP_PROTOCOL<br/>Unknown source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String; parameter 3<br/>Unknown source org/springframework/web/util/UriComponents.toUriString()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>At Wx.java:[line 92]<br/>At WxRedirectUtils.java:[line 77]<br/>At WxRedirectUtils.java:[line 93]<br/>At WxRedirectUtils.java:[line 96]<br/>At WxRedirectUtils.java:[line 99]<br/>At WxRedirectUtils.java:[line 102]<br/>At WxRedirectUtils.java:[line 116]<br/>At WxUrlUtils.java:[line 51]<br/>At WxUrlUtils.java:[line 58]<br/>At WxUrlUtils.java:[line 59]<br/>At WxUrlUtils.java:[line 60]<br/>At WxUrlUtils.java:[line 61]<br/>At WxUrlUtils.java:[line 62]<br/>At WxUrlUtils.java:[line 63]<br/>At WxUrlUtils.java:[line 68]<br/>At WxUrlUtils.java:[line 73]<br/>At WxUrlUtils.java:[line 81]<br/>At WxUrlUtils.java:[line 86]<br/>At WxOAuth2Interceptor.java:[line 87]<br/>At WxOAuth2Interceptor.java:[line 90]<br/>At WxOAuth2Interceptor.java:[line 91]<br/>At WxOAuth2Interceptor.java:[line 99]<br/>At WxOAuth2Interceptor.java:[line 101]<br/>At WxOAuth2Interceptor.java:[line 102]<br/>At WxOAuth2Interceptor.java:[line 103]<br/>At WxOAuth2Interceptor.java:[line 104]<br/>At WxOAuth2Interceptor.java:[line 107]<br/>At WxOAuth2Interceptor.java:[line 108]<br/>At WxOAuth2Interceptor.java:[line 109]<br/>At WxOAuth2Interceptor.java:[line 112]<br/>At WxOAuth2Interceptor.java:[line 116]<br/>At WxOAuth2Interceptor.java:[line 119]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.module.credential.DefaultWxJsTicketPart<br/>In method com.mxixm.fastboot.weixin.module.credential.DefaultWxJsTicketPart.nonce(int)<br/>At DefaultWxJsTicketPart.java:[line 40]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65855');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>This random generator (java.util.Random) is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65855" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.service.WxXmlCryptoService<br/>In method com.mxixm.fastboot.weixin.service.WxXmlCryptoService.getRandomString()<br/>At WxXmlCryptoService.java:[line 275]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65609');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65609" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.module.media.WxMediaResource<br/>In method com.mxixm.fastboot.weixin.module.media.WxMediaResource.createRelative(String)<br/>At WxMediaResource.java:[line 300]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/util/StringUtils.applyRelativePath(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65678');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65678" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.module.media.WxMediaResource<br/>In method com.mxixm.fastboot.weixin.module.media.WxMediaResource.getFile(String)<br/>At WxMediaResource.java:[line 274]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/util/StringUtils.applyRelativePath(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66021');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66021" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.support.MapDbWxMediaStore<br/>In method com.mxixm.fastboot.weixin.support.MapDbWxMediaStore.afterPropertiesSet()<br/>At MapDbWxMediaStore.java:[line 187]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/mxixm/fastboot/weixin/support/MapDbWxMediaStore.defaultFilePath<br/>At MapDbWxMediaStore.java:[line 187]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66100');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66100" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.support.MapDbWxMediaStore<br/>In method com.mxixm.fastboot.weixin.support.MapDbWxMediaStore.afterPropertiesSet()<br/>At MapDbWxMediaStore.java:[line 191]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/mxixm/fastboot/weixin/support/MapDbWxMediaStore.defaultTempFilePath<br/>At MapDbWxMediaStore.java:[line 191]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66179');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66179" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.support.MapDbWxMediaStore<br/>In method com.mxixm.fastboot.weixin.support.MapDbWxMediaStore.afterPropertiesSet()<br/>At MapDbWxMediaStore.java:[line 195]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/mxixm/fastboot/weixin/support/MapDbWxMediaStore.defaultDbPath<br/>At MapDbWxMediaStore.java:[line 195]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66258');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66258" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.support.MapDbWxMediaStore<br/>In method com.mxixm.fastboot.weixin.support.MapDbWxMediaStore.storeResource(MediaEntity)<br/>At MapDbWxMediaStore.java:[line 161]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/util/StringUtils.applyRelativePath(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66327');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>This API SHA-1 (SHA-1) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66327" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.util.CryptUtils<br/>In method com.mxixm.fastboot.weixin.util.CryptUtils.encryptSHA1(String)<br/>At CryptUtils.java:[line 57]<br/>Value SHA-1</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67128');">
<td>
<span class="priority-1">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67128" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.web.WxOAuth2Interceptor<br/>In method com.mxixm.fastboot.weixin.web.WxOAuth2Interceptor.preHandle(HttpServletRequest, HttpServletResponse, Object)<br/>At WxOAuth2Interceptor.java:[line 92]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.mediaUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getRequestURL()Ljava/lang/StringBuffer;<br/>Tainted source java/net/URI.create(Ljava/lang/String;)Ljava/net/URI;<br/>Tainted source java/lang/StringBuffer.toString()Ljava/lang/String;<br/>Tainted source java/net/URI.getScheme()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Z)Ljava/lang/String; parameter 1<br/>Tainted source java/net/URI.getPath()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.DEFAULT_HOST<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.mediaUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.mediaUrl(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Unknown source java/net/URI.getHost()Ljava/lang/String;<br/>Tainted source com/mxixm/fastboot/weixin/web/WxOAuth2Interceptor.getRequestUrl(Ljavax/servlet/http/HttpServletRequest;)Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/module/Wx$Environment.callbackUri<br/>Unknown source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;<br/>Tainted source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Z)Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/module/Wx$Environment.getCallbackHost()Ljava/lang/String;<br/>Tainted source javax/servlet/http/HttpServletRequest.getQueryString()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/util/WxUrlUtils.HTTP_PROTOCOL<br/>Unknown source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String; parameter 3<br/>Unknown source org/springframework/web/util/UriComponents.toUriString()Ljava/lang/String;<br/>Unknown source com/mxixm/fastboot/weixin/util/WxRedirectUtils.redirect(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String; parameter 2<br/>At Wx.java:[line 92]<br/>At WxRedirectUtils.java:[line 77]<br/>At WxRedirectUtils.java:[line 93]<br/>At WxRedirectUtils.java:[line 96]<br/>At WxRedirectUtils.java:[line 99]<br/>At WxRedirectUtils.java:[line 102]<br/>At WxRedirectUtils.java:[line 116]<br/>At WxUrlUtils.java:[line 51]<br/>At WxUrlUtils.java:[line 58]<br/>At WxUrlUtils.java:[line 59]<br/>At WxUrlUtils.java:[line 60]<br/>At WxUrlUtils.java:[line 61]<br/>At WxUrlUtils.java:[line 62]<br/>At WxUrlUtils.java:[line 63]<br/>At WxUrlUtils.java:[line 68]<br/>At WxUrlUtils.java:[line 73]<br/>At WxUrlUtils.java:[line 81]<br/>At WxUrlUtils.java:[line 86]<br/>At WxOAuth2Interceptor.java:[line 87]<br/>At WxOAuth2Interceptor.java:[line 90]<br/>At WxOAuth2Interceptor.java:[line 99]<br/>At WxOAuth2Interceptor.java:[line 101]<br/>At WxOAuth2Interceptor.java:[line 102]<br/>At WxOAuth2Interceptor.java:[line 103]<br/>At WxOAuth2Interceptor.java:[line 104]<br/>At WxOAuth2Interceptor.java:[line 107]<br/>At WxOAuth2Interceptor.java:[line 108]<br/>At WxOAuth2Interceptor.java:[line 109]<br/>At WxOAuth2Interceptor.java:[line 112]<br/>At WxOAuth2Interceptor.java:[line 116]<br/>At WxOAuth2Interceptor.java:[line 119]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65913');">
<td>
<span class="priority-2">STAIV</span>
</td>
<td>The initialization vector (IV) is not properly generated</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65913" style="display: none;">
<a href="#STATIC_IV">Bug type STATIC_IV (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.service.WxXmlCryptoService<br/>In method com.mxixm.fastboot.weixin.service.WxXmlCryptoService.afterPropertiesSet()<br/>At WxXmlCryptoService.java:[line 103]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65967');">
<td>
<span class="priority-2">STAIV</span>
</td>
<td>The initialization vector (IV) is not properly generated</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65967" style="display: none;">
<a href="#STATIC_IV">Bug type STATIC_IV (click for details)</a>
<br/>In class com.mxixm.fastboot.weixin.service.WxXmlCryptoService<br/>In method com.mxixm.fastboot.weixin.service.WxXmlCryptoService.afterPropertiesSet()<br/>At WxXmlCryptoService.java:[line 108]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CIPHER_INTEGRITY">CIPHER_INTEGRITY: Cipher with no integrity</a>
</h2>
            
<p>
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the
    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.
</p>
<p>
    The solution is to use a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the
    existing cipher is prone to error <sup><a href="https://moxie.org/blog/the-cryptographic-doom-principle/">[1]</a></sup>. Specifically,
    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic
    functions on the data.
</p>
<p>The following modes are vulnerable because they don't provide a HMAC:<br/>
    - CBC<br/>
    - OFB<br/>
    - CTR<br/>
    - ECB<br/><br/>
    The following snippets code are some examples of vulnerable code.<br/><br/>
    <b>Code at risk:</b><br/>
    <i>AES in CBC mode</i><br/>

    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
    <br/>
    <i>Triple DES with ECB mode</i><br/>

<pre>Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="https://csrc.nist.gov/projects/block-cipher-techniques/bcm/modes-develoment#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="https://moxie.org/blog/the-cryptographic-doom-principle/">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/353.html">CWE-353: Missing Support for Integrity Check</a>
</p>

        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="WEAK_MESSAGE_DIGEST_SHA1">WEAK_MESSAGE_DIGEST_SHA1: SHA-1 is a weak hash function</a>
</h2>
            
<p>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other
uses. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "<b>SHA-1 for digital signature generation:</b><br/>
    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.
    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>
    <b>SHA-1 for digital signature verification:</b><br/>
    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>
    [...]<br/>
    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>

</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest sha1Digest = MessageDigest.getInstance("SHA1");
    sha1Digest.update(password.getBytes());
    byte[] hashValue = sha1Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know">Qualys blog: SHA1 Deprecation: What You Need to Know</a><br/>
<a href="https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html">Google Online Security Blog: Gradually sunsetting SHA-1</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="UNVALIDATED_REDIRECT">UNVALIDATED_REDIRECT: Unvalidated Redirect</a>
</h2>
            
<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>
            
        
<h2>
<a name="STATIC_IV">STATIC_IV: Static IV</a>
</h2>
            
<p>
    Initialization vector must be regenerated for each message to be encrypted.
</p>
<p><b>Vulnerable Code:</b></p>
<p>
<pre>
private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};

public void encrypt(String message) throws Exception {

    IvParameterSpec ivSpec = new IvParameterSpec(IV);
[...]
</pre>
<p><b>Solution:</b></p>
<p>
<pre>
public void encrypt(String message) throws Exception {

    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);

    IvParameterSpec ivSpec = new IvParameterSpec(iv);
[...]
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://en.wikipedia.org/wiki/Initialization_vector">Wikipedia: Initialization vector</a><br/>
<a href="https://cwe.mitre.org/data/definitions/329.html">CWE-329: Not Using a Random IV with CBC Mode</a><br/>
<a href="https://defuse.ca/cbcmodeiv.htm">Encryption - CBC Mode IV: Secret or Not?</a>
</p>
            
        </body>
</html>
